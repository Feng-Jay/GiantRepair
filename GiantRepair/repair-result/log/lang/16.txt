Repair : lang_16
Current failed test : org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber | 2019.09.05 AD at 12:49:27 CDT
Location : org.apache.commons.lang3.math.NumberUtils.createNumber:[459, 470, 476, 478, 481, 484, 517, 518, 521, 531, 532, 533, 545, 551, 554, 556, 559, 560, 564, 572, 574, 575, 576, 445, 448, 451, 458, 461, 465, 466, 468, 480, 486, 488, 490, 491, 494, 497, 498, 499, 502, 506]#0.7071067811865475
Compute Candidate : 2019.09.05 AD at 12:49:56 CDT - 2019.09.05 AD at 14:57:37 CDT , PNumber : 9989, CandNumber : 1002 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 14:57:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 14:57:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 14:57:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 14:58:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 14:58:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 14:58:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+ boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 14:58:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+ boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 14:58:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 14:59:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 14:59:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 14:59:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 14:59:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")&&str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 14:59:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))&&isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/3484/pattern-ver1-serial/src.com.massivecraft.creativegates.MainListener.java-stabilizePortalContent.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)==0&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>=-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+return null;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+return null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+return null;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
+return null;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+return null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+return null;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:00:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec!=null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null&&exp!=null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec!=null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp!=null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str!=null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+return null;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/1695/pattern-ver1-serial/src.fr.project.bluechat.layout.activity.MainActivity.java-newName.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/6603/pattern-ver1-serial/java.ak.EnchantChanger.block.EcBlockMaterializer.java-checkCost.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+return null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/2057/pattern-ver1-serial/multiplication-game.Main.java-ollie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
+return null;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return null;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return null;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<=decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/1247/pattern-ver1-serial/src.connect4.HumanPlayer.java-drop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+1,0);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos>str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos>str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)&&lastChar=='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()<=0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()<=0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()<=0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)<='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos-1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')-str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')-1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/163/pattern-ver1-serial/app.src.main.java.th.zirata.Blocks.EnemyBlocks.Hydra.java-createHydra.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(1)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite(1)||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(1)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:01:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+str);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos<-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos<str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos<str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos<-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos<-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()>=0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()>=0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()>=0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)>='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos!=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos!=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos!=-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos!=-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()!=0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()!=0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()!=0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)!='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+return 0;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2131/pattern-ver1-serial/src.nl.dobots.bluenet.extended.structs.BleDeviceList.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+return 0;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2131/pattern-ver1-serial/src.nl.dobots.bluenet.extended.structs.BleDeviceList.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:02:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+Integer decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+Integer expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(1,decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+return 0;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/5432/pattern-ver1-serial/app.src.main.java.com.rrdevs.peerboard.DBCompare.java-authenticateLogin.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-2);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-2);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return 0;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
+return 0;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return 0;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'!=isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()!=(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))!=isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()!=(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()!=(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null!=(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4891/pattern-ver1-serial/app.src.main.java.edu.temple.androidpermissions.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)&&lastChar<'.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf('+');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.alisa.workbench.src-gen.org.osate.alisa.workbench.parser.antlr.internal.InternalAlisaLexer.java-mT__59.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('+')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.alisa.workbench.src-gen.org.osate.alisa.workbench.parser.antlr.internal.InternalAlisaLexer.java-mT__59.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('+')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/5726/pattern-ver1-serial/org.osate.alisa.workbench.src-gen.org.osate.alisa.workbench.parser.antlr.internal.InternalAlisaLexer.java-mT__59.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()>0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()>0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()>0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)>'-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:03:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-decPos){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-lastChar){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V52/5364/pattern-ver1-serial/src.beast.core.MCMC.java-doLoop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)&&lastChar>'.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos,decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2403/pattern-ver1-serial/app.src.main.java.com.door43.translationstudio.core.Indexer.java-getFrame.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(f)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/5031/pattern-ver1-serial/demos.src.main.java.com.datatorrent.demos.adsdimension.GenericApplication.java-populateDAG.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.contains("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.contains("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.contains("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/1681/pattern-ver1-serial/src.edu.umn.cs.melt.copper.compiletime.srcbuilders.single.ParserFragmentEngineBuilder.java-writeRunProductionSemanticAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(mant+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/758/pattern-ver1-serial/genomix.genomix-driver.src.main.java.edu.uci.ics.genomix.driver.GenomixDriver.java-addStep.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(mant+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/758/pattern-ver1-serial/genomix.genomix-driver.src.main.java.edu.uci.ics.genomix.driver.GenomixDriver.java-addStep.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant="";
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.lastIndexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.lastIndexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.lastIndexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4339/pattern-ver1-serial/app.src.main.java.com.leafpic.app.utils.StringUtils.java-getPhotoNamebyPath.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=null;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+1,2);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+throw new NumberFormatException();
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/753/pattern-ver1-serial/src.main.java.com.scrumtech.octopus.Deployments.java-WaitForDeploymentToComplete.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
-}catch(NumberFormatException nfe){
+}catch(Exception nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V18/2675/pattern-ver1-serial/src.cyrus.lib.Utils.java-isNumber.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-2){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-2&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-2){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-2){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-2&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/1609/pattern-ver1-serial/jsqlbox.src.main.java.com.github.drinkjava2.jsqlbox.Dao.java-executeQuiet.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
+case 401 :
+
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return 1;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:04:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
+return 1;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return 1;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0!=!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==0.0!=!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0!=!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<dec.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/3712/pattern-ver1-serial/src.com.wrathOfLoD.Models.Entity.Character.Character.java-Character.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=dec.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V43/3712/pattern-ver1-serial/src.com.wrathOfLoD.Models.Entity.Character.Character.java-Character.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(2)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite(2)||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(2)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
+case 4 :
+
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2088/pattern-ver1-serial/core.src.com.finalstand.game.Screens.PlayScreen.java-findCreepStartingPos.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+3);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')+3;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<mant.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2288/pattern-ver1-serial/src.view.GamePanel.java-GamePanel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+return decPos;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/2280/pattern-ver1-serial/Project1.src.searchAlgorithms.BFS.java-search.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(mant==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4199/pattern-ver1-serial/src.main.java.de.isibboi.PasswordGenerator.java-addGroup.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+Boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/934/pattern-ver1-serial/mifosng-provider.src.main.java.org.mifosplatform.accounting.journalentry.serialization.JournalEntryCommandFromApiJsonDeserializer.java-commandFromApiJson.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+Boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/934/pattern-ver1-serial/mifosng-provider.src.main.java.org.mifosplatform.accounting.journalentry.serialization.JournalEntryCommandFromApiJsonDeserializer.java-commandFromApiJson.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:05:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ final String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ final String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return null;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return null;
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return null;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return null;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4668/pattern-ver1-serial/src.main.java.accountService.AccountServiceImpl.java-updateUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4668/pattern-ver1-serial/src.main.java.accountService.AccountServiceImpl.java-updateUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:06:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return createInteger(str.trim());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+Float f=NumberUtils.createFloat(numeric.trim());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+Double d=NumberUtils.createDouble(numeric.trim());
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return createInteger(str.trim());
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return createLong(str.trim());
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=isAllZeros(mant.trim())&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=isAllZeros(mant)&&isAllZeros(exp.trim());
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+Float f=createFloat(str.trim());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str.trim())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--".trim())){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str.trim();
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/7448/pattern-ver1-serial/DODO.src.Parser.Parser.java-setAddAttributes.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.Iterator;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==-1&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.Iterator;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==-1&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.Iterator;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==-1&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.Iterator;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)==-1&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:07:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
-if(expPos>-1){
+if(decPos>=-1){
+if(expPos>=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>=-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>=-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/3236/pattern-ver1-serial/src.main.java.co.arcs.groove.basking.Cli.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+decPos++;
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+decPos++;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+expPos++;
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+expPos++;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+decPos++;
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+expPos++;
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+expPos++;
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+expPos++;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+expPos++;
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
+f++;
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+decPos++;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+expPos++;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+decPos++;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+expPos++;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+decPos++;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+decPos++;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
+decPos++;
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+decPos++;
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+decPos++;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/868/pattern-ver1-serial/src.main.java.gcommon.objects.NumberFormatter.java-format.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:08:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+expPos--;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+decPos--;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+decPos--;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+expPos--;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+expPos--;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
+expPos--;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+expPos--;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+expPos--;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+decPos--;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
-return d;
+return null;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V63/2730/pattern-ver1-serial/src.zen.codegen.jvm.JavaSolution.java-GetConstValue.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<=decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<=decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<=str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+decPos--;
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+decPos--;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+decPos--;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
+decPos--;
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
+expPos++;
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V68/5574/pattern-ver1-serial/no.ntnu.item.semesterassignment.src.no.ntnu.item.semesterassignment.taxidispatcher.TaxiDispatcher.java-getRequestQueuePosition.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||!isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return (Number)createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return (Number)createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return (Number)createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return (Number)createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return 0;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:09:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return 0;
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return 0;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return 0;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+decPos++;
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3681/pattern-ver1-serial/src.main.java.halo.query.Query.java-buildArgs.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return -1;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/5579/pattern-ver1-serial/src.utils.Controls.java-getCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return -1;
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/5579/pattern-ver1-serial/src.utils.Controls.java-getCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+return null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+return null;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+return null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+return null;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return -createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return -createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return -createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return -createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>3){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>3&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>3){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>3){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>3){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>3&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")&&str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:10:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")&&str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()&&(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()&&(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/3665/pattern-ver1-serial/org.bridgedb.uri.ws.server.src.org.bridgedb.ws.uri.WSUriInterfaceService.java-map.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+createNumber(str);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf((int)('.'));
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf((int)('e'))+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf((int)('E'))+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit((int)(lastChar))&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt((int)(0))=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring((int)(1)))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>=-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos>=-1){
+if(expPos<decPos||expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(!f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3067/pattern-ver1-serial/core.src.com.ashenrider.game.Player.java-killPlayer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(!d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3067/pattern-ver1-serial/core.src.com.ashenrider.game.Player.java-killPlayer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(!f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3067/pattern-ver1-serial/core.src.com.ashenrider.game.Player.java-killPlayer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str.toUpperCase();
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4456/pattern-ver1-serial/src.main.java.com.codegen.model.ColumnDefinition.java-setDbColumnIdentifier.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(decPos++)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2359/pattern-ver1-serial/rocketmq-store.src.main.java.com.alibaba.rocketmq.store.ha.HAService.java-doWaitTransfer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite(decPos++)||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2359/pattern-ver1-serial/rocketmq-store.src.main.java.com.alibaba.rocketmq.store.ha.HAService.java-doWaitTransfer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return createInteger((str).toLowerCase());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+Float f=NumberUtils.createFloat((numeric).toLowerCase());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+Double d=NumberUtils.createDouble((numeric).toLowerCase());
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return createInteger((str).toLowerCase());
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return createLong((str).toLowerCase());
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:11:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=isAllZeros((mant).toLowerCase())&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=isAllZeros(mant)&&isAllZeros((exp).toLowerCase());
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+Float f=createFloat((str).toLowerCase());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank((str).toLowerCase())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+(int)(1));
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')+(int)(1);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return 1;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return 1;
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return 1;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return 1;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
+case 27 :
+
+return 5;
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1889/pattern-ver1-serial/app.src.main.java.johan.laststraw.AiPatterns.java-getAiPatternNr.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+expPos++;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2119/pattern-ver1-serial/src.field.initial.FieldConstructor.java-execute.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+-1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')+-1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return (Number)(createInteger(str));
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return (Number)(createInteger(str));
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return (Number)(createLong(str));
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return (Number)(f);
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return (Number)(createLong(numeric));
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
+return (Number)(d);
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return (Number)(f);
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+return null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
+return null;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+return null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+return null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+return null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
+return null;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:12:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+return null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+return null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:13:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+while(true){
+
+}
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:13:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+while(true){
+
+}
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:15:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+while(true){
+
+}
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:17:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+while(true){
+
+}
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:19:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
+while(true){
+
+}
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-2);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5377/pattern-ver1-serial/src.main.Map.java-setTempPos.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5377/pattern-ver1-serial/src.main.Map.java-setTempPos.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-2);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5377/pattern-ver1-serial/src.main.Map.java-setTempPos.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-2);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5377/pattern-ver1-serial/src.main.Map.java-setTempPos.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-2);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-2){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5377/pattern-ver1-serial/src.main.Map.java-setTempPos.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-2);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-2);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/5377/pattern-ver1-serial/src.main.Map.java-setTempPos.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null&&!dec.isEmpty()){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/997/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.computecontroller.impl.ucs.UcsDiscoveryWorker.java-deleteComputeLanBootImagePaths.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&!dec.isEmpty()&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/997/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.computecontroller.impl.ucs.UcsDiscoveryWorker.java-deleteComputeLanBootImagePaths.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str.equals(null)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(!StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(!str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ final String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:21:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ final String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ final String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(30-(0),decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0,30-(decPos));
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(30-(0),expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(0,30-(expPos));
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(30-(0),str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str.isEmpty()){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
-String mant;
+ final char lastChar=str.charAt(str.length()-1);
+ final String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ @SuppressWarnings("UnusedAssignment") Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ @SuppressWarnings("UnusedAssignment") Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
-String mant;
+ @SuppressWarnings("UnusedAssignment") String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ @SuppressWarnings("UnusedAssignment") String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ @SuppressWarnings("UnusedAssignment") String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+ @SuppressWarnings("UnusedAssignment") Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+ @SuppressWarnings("UnusedAssignment") Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:22:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ @SuppressWarnings("UnusedAssignment") int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+ @SuppressWarnings("UnusedAssignment") boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+ @SuppressWarnings("UnusedAssignment") boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+str=str;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+dec=str;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+1+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+1+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()+f==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+ final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+ final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric.isEmpty()){
+return null;
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2729/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.DiskLruImageCache.java-getBitmap.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return createInteger(str)&0xff;
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return createInteger(str)&0xff;
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return createLong(str)&0xff;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return createLong(numeric)&0xff;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str+": ";
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/1370/pattern-ver1-serial/src.main.java.net.jeebiss.spazz.Spazz.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(true){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(true){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")==false){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str)==false){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||!str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits("https://myschool.ru.is/myschool/"+numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/3824/pattern-ver1-serial/MyRU.src.com.littleindian.myru.AssignmentDetailFragment.java-onCreateView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
+if(str!=null){
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
+}
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+if(str!=null){
 if(str.startsWith("--")){
 return null;
+}
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6730/pattern-ver1-serial/app.src.main.java.capprotectors.saveyourcap.GameScreen.java-updateRunning.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1)+" votes")||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2342/pattern-ver1-serial/app.src.main.java.com.example.abhishek.bookshareapp.ui.adapter.BooksAdapter.java-onBindViewHolder.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1/2){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:23:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()/2){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1/2&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1/2){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1/2){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1/2&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+int a=0;
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+int a=0;
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+int a=0;
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+int a=0;
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
+int a=0;
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+int a=0;
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+int a=0;
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
+int a=0;
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+int a=0;
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
+int a=0;
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits("There was a problem with the call to ManyWho: "+numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V18/1227/pattern-ver1-serial/sdk-core.src.main.java.com.manywho.sdk.RunService.java-executePost.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(str!=null){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/691/pattern-ver1-serial/us.textrade.models.MatchesQueue.java-addTradeToQueue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+String OUTSTRING="";
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+String OUTSTRING="";
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+String OUTSTRING="";
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+String OUTSTRING="";
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
+String OUTSTRING="";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+String OUTSTRING="";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+String OUTSTRING="";
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+String OUTSTRING="";
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+String OUTSTRING="";
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:24:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+String OUTSTRING="";
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str.isEmpty()){
+return null;
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+if(str.isEmpty()){
+return null;
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+if(str.isEmpty()){
+return null;
+}
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if(str.isEmpty()){
+return null;
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+if(str.isEmpty()){
+return null;
+}
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str.isEmpty()){
+return null;
+}
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+if(str.isEmpty()){
+return null;
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring((int)(decPos+1));
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(Math.round(0),decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0,Math.round(decPos));
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(Math.round(0),expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(0,Math.round(expPos));
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(Math.round(0),str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits((numeric.substring(1)).toLowerCase())||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+(int)(str.indexOf('E'))+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/4690/pattern-ver1-serial/33_CDIO3.src.controller.DecisionController.java-askForDecision.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+(str.indexOf('E')+1)+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2277/pattern-ver1-serial/core.src.com.mygdx.dame.Token.java-jumpOver.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str)==true){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")==true){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+-1+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4243/pattern-ver1-serial/app.src.main.java.com.ryanwedoff.senor.naoservercontroller.WalkFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:25:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(Math.abs(decPos+1));
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
-int decPos=str.indexOf('.');
+int decPos=str.indexOf(Math.abs('.'));
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf(Math.abs('e'))+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf(Math.abs('E'))+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(Math.abs(lastChar))&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(Math.abs(0))=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(Math.abs(1)))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+int indexSelection=0;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+int indexSelection=0;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
+int indexSelection=0;
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+int indexSelection=0;
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+int indexSelection=0;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+int indexSelection=0;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(Math.max(0,decPos),decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0,Math.max(0,decPos));
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(Math.max(0,str.length()-1),str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(Math.max(0,expPos),expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(0,Math.max(0,expPos));
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+3+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/4478/pattern-ver1-serial/src.holdem.HoldemGame.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0*2,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0,decPos*2);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(0*2,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(0,expPos*2);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0*2,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
+str="";
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1830/pattern-ver1-serial/SR03.src.java.controler.ActionQuestion.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits("PATH: \n"+numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/1966/pattern-ver1-serial/obdEnergy.src.main.java.com.example.obdenergy.obdenergy.MainActivity.java-onStop.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(String.valueOf(numeric.substring(1)))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V37/4379/pattern-ver1-serial/src.main.java.st.alr.mqttitude.preferences.PreferencesBroker.java-onBindDialogView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str==null){
+return null;
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:26:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+if(str==null){
+return null;
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+if(str==null){
+return null;
+}
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+if(str==null){
+return null;
+}
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+if(str==null){
+return null;
+}
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if(str==null){
+return null;
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+if(str==null){
+return null;
+}
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if(str==null){
+return null;
+}
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str==null){
+return null;
+}
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
+if(str==null){
+return null;
+}
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric==null){
+return null;
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if(!allZeros){
+throw new NumberFormatException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if(!allZeros){
+throw new NumberFormatException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str.isEmpty()){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str==null){
+return null;
+}
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(str==null){
+return null;
+}
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if(str==null){
+return null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(str==null){
+return null;
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if("index".equals(str)){
+return 0;
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+if("index".equals(str)){
+return 0;
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+if("index".equals(str)){
+return 0;
+}
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+if("index".equals(str)){
+return 0;
+}
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+if("index".equals(str)){
+return 0;
+}
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if("index".equals(str)){
+return 0;
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+if("index".equals(str)){
+return 0;
+}
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if("index".equals(str)){
+return 0;
+}
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
+if("index".equals(str)){
+return 0;
+}
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if("index".equals(decPos)){
+return 0;
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(str==null){
+return null;
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/4743/pattern-ver1-serial/app.src.main.java.com.wafflestudio.shafe.MapManager.java-initializeMapWithSavedValue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if("&null".equals(str)){
+return null;
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+if("&null".equals(str)){
+return null;
+}
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if("&null".equals(str)){
+return null;
+}
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+}
+if("&null".equals(str)){
+return null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if("&null".equals(decPos)){
+return null;
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if("&null".equals(expPos)){
+return null;
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+if("&null".equals(decPos)){
+return null;
+}
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if("&null".equals(allZeros)){
+return null;
+}
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,30-(str.length()-1));
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-1-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/250/pattern-ver1-serial/src.main.java.com.scienjus.client.PixivParserClient.java-buildGetUrl.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+exp=null;
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
-exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(true){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(true){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(true){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(true){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()==false){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6999/pattern-ver1-serial/src.mop.MopData.java-str2Mop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V4/6999/pattern-ver1-serial/src.mop.MopData.java-str2Mop.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1||expPos==Long.MIN_VALUE){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()||expPos==Long.MIN_VALUE){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1||expPos==Long.MIN_VALUE){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1||decPos==Long.MIN_VALUE){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0,decPos).replaceAll("\n","");
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(0,expPos).replaceAll("\n","");
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:28:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str.replaceAll("\n","");
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=(str.substring(0,decPos)).replace("\\","\\\\");
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=(str.substring(0,expPos)).replace("\\","\\\\");
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=(str).replace("\\","\\\\");
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-1*-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1-22);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/2147/pattern-ver1-serial/src.main.java.ch.bfh.ti.projekt1.sokoban.view.GameWindowView.java-loadSolutionFile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
+System.out.println("Aucun siège disponible dans les conditions établies.");
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3088/pattern-ver1-serial/src.model.DataAccess.java-book.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(str.length()-1*1000);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
-exp=null;
 }
+exp=null;
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2335/pattern-ver1-serial/app.src.main.java.swampthings.dems.LoginActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+if(str==null){
+return Double.NaN;
+}else {
 if(str.startsWith("--")){
 return null;
+}
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3795/pattern-ver1-serial/opentripplanner-routing.src.main.java.org.opentripplanner.routing.edgetype.PlainStreetEdge.java-calculateSpeed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt((int)(str.length()-1));
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.trim().startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.trim().startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.trim().startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.trim().startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.trim().startsWith("0x")||str.trim().startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/5228/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.util.VPlexUtil.java-isDeviceStructureValid.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
+return null;
+}
+if(str==null){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+assert (str!=null);
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+assert (str!=null);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+assert (str!=null);
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+assert (str!=null);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+assert (str!=null);
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+assert (str!=null);
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
+assert (str!=null);
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+assert (str!=null);
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+assert (str!=null);
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:29:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+assert (str!=null);
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new UnsupportedOperationException();
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/56/pattern-ver1-serial/core.src.main.java.lupos.datastructures.paged_dbbptree.DBBPTree.java-lastKey.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+assert (!str.isEmpty());
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+assert (!str.isEmpty());
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+assert (!str.isEmpty());
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
+assert (!str.isEmpty());
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+mant=str;
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str.contains(str)){
+return null;
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(str.contains(str)){
+return null;
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant="";
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant="";
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,Math.round(str.length()-1));
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
 }
+mant=str;
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/1092/pattern-ver1-serial/app.src.main.java.dimitris.android.chessviews.Square.java-setPiece.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=null;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=null;
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(Double.isNaN(expPos)){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(Double.isNaN(expPos)){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(Double.isNaN(expPos)){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(Double.isNaN(decPos)){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
+nfe.printStackTrace();
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
+nfe.printStackTrace();
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4773/pattern-ver1-serial/app.src.main.java.demo.panatrip.net.XWalkLibraryLoader.java-decompress.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()==true){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str!=null){
+return createInteger(str);
+}
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+if(str!=null){
+if(str==null){
+return null;
+}
+if(StringUtils.isBlank(str)){
+throw new NumberFormatException("A blank string is not a valid number");
+}
+if(str.startsWith("--")){
+return null;
+}
+if(str.startsWith("0x")||str.startsWith("-0x")){
+return createInteger(str);
+}
+char lastChar=str.charAt(str.length()-1);
+String mant;
+String dec;
+String exp;
+int decPos=str.indexOf('.');
+int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(decPos>-1){
+if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
+dec=str.substring(decPos+1);
+}
+mant=str.substring(0,decPos);
+}else {
+if(expPos>-1){
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+mant=str.substring(0,expPos);
+}else {
+mant=str;
+}
+dec=null;
+}
+if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
+}else {
+exp=null;
+}
+String numeric=str.substring(0,str.length()-1);
+boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+switch (lastChar){
+case 'l' :
+
+case 'L' :
+
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+try{
+return createLong(numeric);
+}catch(NumberFormatException nfe){
+}
+return createBigInteger(numeric);
+}
+throw new NumberFormatException(str+" is not a valid number.");
+case 'f' :
+
+case 'F' :
+
+try{
+Float f=NumberUtils.createFloat(numeric);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
+}catch(NumberFormatException nfe){
+}
+case 'd' :
+
+case 'D' :
+
+try{
+Double d=NumberUtils.createDouble(numeric);
+if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+return d;
+}
+}catch(NumberFormatException nfe){
+}
+try{
+return createBigDecimal(numeric);
+}catch(NumberFormatException e){
+}
+default :
+
+throw new NumberFormatException(str+" is not a valid number.");
+}
+}else {
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
+}else {
+exp=null;
+}
+if(dec==null&&exp==null){
+try{
+return createInteger(str);
+}catch(NumberFormatException nfe){
+}
+try{
+return createLong(str);
+}catch(NumberFormatException nfe){
+}
+return createBigInteger(str);
+}else {
+boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+try{
+Float f=createFloat(str);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
+}catch(NumberFormatException nfe){
+}
+try{
+Double d=createDouble(str);
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+return d;
+}
+}catch(NumberFormatException nfe){
+}
+return createBigDecimal(str);
+}
+}
+}
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+if(str!=null){
+dec=str.substring(decPos+1);
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str!=null){
+if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
+dec=str.substring(decPos+1);
+}
+mant=str.substring(0,decPos);
+}
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:30:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if(str!=null){
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+mant=str.substring(0,expPos);
+}
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+}else {
+if(str!=null){
+if(expPos>-1){
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+mant=str.substring(0,expPos);
 }else {
+mant=str;
+}
+dec=null;
+}
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null&&dec.length()>0){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/2471/pattern-ver1-serial/plugins.org.obeonetwork.dsl.uml2.properties.src.org.obeonetwork.dsl.uml2.properties.service.TableLabelService.java-caseName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&dec.length()>0&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V28/2471/pattern-ver1-serial/plugins.org.obeonetwork.dsl.uml2.properties.src.org.obeonetwork.dsl.uml2.properties.service.TableLabelService.java-caseName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0,decPos).trim();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.ui.RadioStationView.java-processEllipsis.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(0,expPos).trim();
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.ui.RadioStationView.java-processEllipsis.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
-char lastChar=str.charAt(str.length()-1);
+char lastChar=str.charAt(Math.abs(str.length()-1));
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if(str.contains(str)){
+return null;
+}
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if(str.contains(str)){
+return null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+if(str.contains(str)){
+return null;
+}
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(str.contains(str)){
+return null;
+}
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(str.contains(str)){
+return null;
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+assert (!str.isEmpty());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
+assert (!str.isEmpty());
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+assert (!str.isEmpty());
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+assert (!str.isEmpty());
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
+throw new NumberFormatException("duplicate local variable "+nfe);
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/583/pattern-ver1-serial/src.net.fudev.laye.codegen.FunctionPrototypeBuilder.java-addLocal.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
+throw new NumberFormatException("duplicate local variable "+nfe);
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/583/pattern-ver1-serial/src.net.fudev.laye.codegen.FunctionPrototypeBuilder.java-addLocal.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
+throw new NumberFormatException("duplicate local variable "+nfe);
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/583/pattern-ver1-serial/src.net.fudev.laye.codegen.FunctionPrototypeBuilder.java-addLocal.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
+throw new NumberFormatException("duplicate local variable "+nfe);
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/583/pattern-ver1-serial/src.net.fudev.laye.codegen.FunctionPrototypeBuilder.java-addLocal.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
+NumberUtils utils=new NumberUtils();
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+Float f=utils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V26/5772/pattern-ver1-serial/RunQuery.src.retrieWin.PatternBuilder.Aju.java-runBootStrapforEntityAndNER.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
+NumberUtils utils=new NumberUtils();
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+Float f=utils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V26/5772/pattern-ver1-serial/RunQuery.src.retrieWin.PatternBuilder.Aju.java-runBootStrapforEntityAndNER.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,Math.max(0,str.length()-1));
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return createInteger(str.trim());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return createInteger(str.trim());
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return createInteger(str.trim());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return createLong(str.trim());
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return createInteger(str.trim());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
+Float f=createFloat(str.trim());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:31:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str.trim())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return createInteger(str.trim());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return createInteger(str.trim());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(str);
+return createBigInteger(str.trim());
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return createInteger(str.trim());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
+Double d=createDouble(str.trim());
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
-return createInteger(str);
+return createInteger(str.trim());
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
-return createBigDecimal(str);
+return createBigDecimal(str.trim());
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+Float f=NumberUtils.createFloat(numeric.trim());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
-Double d=NumberUtils.createDouble(numeric);
+Double d=NumberUtils.createDouble(numeric.trim());
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric.trim()))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
-Float f=NumberUtils.createFloat(numeric);
+Float f=NumberUtils.createFloat(numeric.trim());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1*2);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5419/pattern-ver1-serial/android.src.com.lappard.android.screens.GameScreen.java-show.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0,decPos).toLowerCase();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/3267/pattern-ver1-serial/src.it.uniroma3.diadia.comandi.FabbricaDiComandiRiflessiva.java-costruisciComando.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(0,expPos).toLowerCase();
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/3267/pattern-ver1-serial/src.it.uniroma3.diadia.comandi.FabbricaDiComandiRiflessiva.java-costruisciComando.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+assert (allZeros!=isAllZeros(mant)&&isAllZeros(exp));
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+assert (numeric!=str.substring(0,str.length()-1));
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+assert (allZeros!=isAllZeros(mant)&&isAllZeros(exp));
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||((f.floatValue()==0.0)&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||((d.floatValue()==0.0)&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||((f.floatValue()==0.0)&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+mant=str;
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4769/pattern-ver1-serial/android.src.main.java.com.baebae.reactnativecamera.cameralib.ui.CameraPreviewLayout.java-setFlash.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+assert (f!=null);
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+assert (f!=null);
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+assert (d!=null);
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
+}
+if(numeric==null){
+return null;
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/5092/pattern-ver1-serial/app.src.main.java.neeedo.imimaprx.htw.de.neeedo.fragments.SingleDemandFragmentSwiper.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
+}
+if(numeric==null){
+return null;
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V33/5092/pattern-ver1-serial/app.src.main.java.neeedo.imimaprx.htw.de.neeedo.fragments.SingleDemandFragmentSwiper.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1||"查看红包".equals(expPos)){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()||"查看红包".equals(expPos)){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:32:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1||"查看红包".equals(expPos)){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1||expPos==3){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()||expPos==3){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1||decPos==3){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1||expPos==3){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str==null){
+throw new NumberFormatException("player is not initialised, game might not be started");
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(str==null){
+throw new NumberFormatException("player is not initialised, game might not be started");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(decPos>7){
+throw new NumberFormatException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(expPos>7){
+throw new NumberFormatException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(str.isEmpty()){
+str=null;
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+if(str.isEmpty()){
+str=null;
+}
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if(str.isEmpty()){
+str=null;
+}
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
+}
+if(str.isEmpty()){
+str=null;
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+if(str.isEmpty()){
+str=null;
+}
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if(str.isEmpty()){
+str=null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+}
+if(str.isEmpty()){
+str=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
+}
+if(str.isEmpty()){
+str=null;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(str.isEmpty()){
+str=null;
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str==""){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos<0||expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos<0||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos<0||expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos<0||decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")||str.startsWith("https://")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/5632/pattern-ver1-serial/components.formats-common.src.loci.common.Location.java-getHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:33:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.equals("manufacturedOn")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V37/509/pattern-ver1-serial/product-validation-system-war.src.main.java.com.pvs.web.freemarker.processors.ProductTemplateRegistrationProcessor.java-postHTML.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")||str.startsWith("$Proxy")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6211/pattern-ver1-serial/agent-parent.agent.src.main.java.org.glowroot.agent.weaving.WeavingClassFileTransformer.java-ignoreClass.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&f.floatValue()>=0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==0.0&&d.floatValue()>=0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&numeric.charAt(0)>=0&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1272/pattern-ver1-serial/rest-provider.src.main.java.org.jboss.pressgang.ccms.proxy.RESTCSRelatedNodeV1ProxyHandler.java-internalInvoke.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+1).replaceAll("\n","");
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/6059/pattern-ver1-serial/src.main.java.com.sequenceiq.cloudbreak.shell.commands.TemplateCommands.java-createAzureTemplate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=(str.substring(decPos+1)).replace("\\","\\\\");
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1801/pattern-ver1-serial/Alfresco.Alfresco-EE-v5.0.AAAR-Alfresco-EE-v5.0-Repository.src.main.java.com.fcorti.aaar.GetNodesModifiedAfterWebScript.java-getCustomProperties.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
+}
+if(str==null){
+throw new NumberFormatException("connection offline");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/7367/pattern-ver1-serial/mhu-lib-jms.src.main.java.de.mhus.lib.jms.ServerJms.java-open.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str==null){
+throw new NumberFormatException("connection offline");
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V10/7367/pattern-ver1-serial/mhu-lib-jms.src.main.java.de.mhus.lib.jms.ServerJms.java-open.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+Float f=createFloat(str);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+Double d=createDouble(str);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
+Float f=createFloat(str);
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&((numeric.charAt(0)=='-'||numeric.charAt(0)=='\'')&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1||expPos=='\'')&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V25/6625/pattern-ver1-serial/src.com.google.javascript.jscomp.CodeConsumer.java-add.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return createLong(str)==null?0:createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2889/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.VirtualPool.java-getRpRpoValue.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return createLong(numeric)==null?0:createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2889/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.VirtualPool.java-getRpRpoValue.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1||expPos==0){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:34:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()||expPos==0){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1||expPos==0){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1||expPos>9){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()||expPos>9){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1||expPos>9){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1||decPos>9){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+" -u "+str);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec="";
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6756/pattern-ver1-serial/src.main.java.org.silvertunnel_ng.netlib.adapter.url.impl.net.http.MessageHeader.java-mergeHeader.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1&&expPos<4000000){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()&&expPos<4000000){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1&&decPos<4000000){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1&&expPos<4000000){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=null;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric==null?null:numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1&&expPos!=9999){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()&&expPos!=9999){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1&&expPos!=9999){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
+if(decPos>-1&&decPos!=9999){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(-1>0&&expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(str.length()>0&&expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:35:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+1).trim();
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V19/2376/pattern-ver1-serial/src.br.com.siva.pinkmusic.ui.RadioStationView.java-processEllipsis.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f!=null&&f.isInfinite())||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2151/pattern-ver1-serial/coeus-impl.src.main.java.org.kuali.kra.award.document.authorization.AwardDocumentAuthorizer.java-canCancel.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!((d!=null&&d.isInfinite())||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2151/pattern-ver1-serial/coeus-impl.src.main.java.org.kuali.kra.award.document.authorization.AwardDocumentAuthorizer.java-canCancel.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f!=null&&f.isInfinite())||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2151/pattern-ver1-serial/coeus-impl.src.main.java.org.kuali.kra.award.document.authorization.AwardDocumentAuthorizer.java-canCancel.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str==null||str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/443/pattern-ver1-serial/bundles.opaeum-compilation.org.opaeum.compilation.java.src.org.opaeum.javageneration.bpm.actions.AbstractProtectedNodeBuilder.java-implementCallbackOnComplete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric!=null?numeric.substring(1):null)||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f!=null&&f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7/pattern-ver1-serial/wallet.src.main.java.com.coinomi.wallet.ui.WalletActivity.java-processUri.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d!=null&&d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7/pattern-ver1-serial/wallet.src.main.java.com.coinomi.wallet.ui.WalletActivity.java-processUri.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f!=null&&f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/7/pattern-ver1-serial/wallet.src.main.java.com.coinomi.wallet.ui.WalletActivity.java-processUri.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||(str!=null&&str.startsWith("-0x"))){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V30/2463/pattern-ver1-serial/src.Level.java-collides.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str.substring(decPos+1).toLowerCase();
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V35/3267/pattern-ver1-serial/src.it.uniroma3.diadia.comandi.FabbricaDiComandiRiflessiva.java-costruisciComando.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&((numeric.charAt(0)=='-')&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric.equals("")){
+numeric="Manchester United FC";
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4958/pattern-ver1-serial/FootballScores.app.src.main.java.barqsoft.footballscores.widget.ScoresWidgetIntentService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null&&dec.length()>0&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/774/pattern-ver1-serial/android_studio_proj.MyWeatherApp.app.src.main.java.jmtechsvcs.myweatherapp.utilspkg.WeatherAppUtils.java-getDefaultStringDisplayString.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&dec.length()>0&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V9/774/pattern-ver1-serial/android_studio_proj.MyWeatherApp.app.src.main.java.jmtechsvcs.myweatherapp.utilspkg.WeatherAppUtils.java-getDefaultStringDisplayString.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+",");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/3838/pattern-ver1-serial/Chess.src.CSE712.java-WriteFENToFile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:36:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec.equals(null)&&exp.equals(null)){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/4279/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.processor.LunMaskingProcessor.java-addIoLimitsOnVolume.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec.equals(null)&&exp.equals(null)&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/4279/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.volumecontroller.impl.plugins.discovery.smis.processor.LunMaskingProcessor.java-addIoLimitsOnVolume.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+ final String dropStatement=str+" is not a valid number.";
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+ final String dropStatement=str+" is not a valid number.";
+throw new NumberFormatException(dropStatement);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
+ final String dropStatement=str+" is not a valid number.";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+ final String dropStatement=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+ final String dropStatement=str+" is not a valid number.";
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+ final String dropStatement=str+" is not a valid number.";
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+ final String dropStatement=str+" is not a valid number.";
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-1/2.0){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-1/2.0){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/1517/pattern-ver1-serial/library.src.com.jakewharton.android.viewpagerindicator.TitlePageIndicator.java-onDraw.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+String loc=str+" is not a valid number.";
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+String loc=str+" is not a valid number.";
+throw new NumberFormatException(loc);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
+String loc=str+" is not a valid number.";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+String loc=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+String loc=str+" is not a valid number.";
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+String loc=str+" is not a valid number.";
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos>-1-1){
+if(expPos<decPos||expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
-if(expPos>-1){
+if(decPos>-1-1){
+if(expPos>-1-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
+if(expPos>-1-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str)&&!str.equals("全部")){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/6475/pattern-ver1-serial/src.main.java.com.morningsidevc.service.impl.FeedInfoServiceImpl.java-findFeeds.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")&&!"--".equals("全部")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V29/6475/pattern-ver1-serial/src.main.java.com.morningsidevc.service.impl.FeedInfoServiceImpl.java-findFeeds.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0-1,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0-1,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:37:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0-1,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0-1,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
+mant=str.substring(0-1,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null&&!str.equals("")){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric==null){
+throw new NumberFormatException("User isn't registered! "+str);
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5393/pattern-ver1-serial/peergos.user.UserContext.java-sendFollowRequest.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null&&exp==null||"查看红包".equals(dec==null)){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.isEmpty()){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7675/pattern-ver1-serial/libsrc.ffdec_lib.src.com.jpexs.decompiler.flash.action.swf4.ActionGotoFrame2.java-execute.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(!str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str!=null&&str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V65/5693/pattern-ver1-serial/src.org.community.intellij.plugins.communitycase.history.LogParser.java-getFormatOption.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+mant=str.substring(0,decPos);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+mant=str.substring(0,expPos);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+mant=str.substring(0,expPos);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+str.indexOf('E')+1+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V34/2703/pattern-ver1-serial/src.main.java.net.minecraftforge.common.interpreter.AST.java-apply.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+mant=str.substring(0,expPos);
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+mant=str.substring(0,expPos);
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+mant=str.substring(0,decPos);
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+mant=str.substring(0,expPos);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+mant=str.substring(0,expPos);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+mant=str.substring(0,expPos);
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:38:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(true){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")||str.startsWith("-0x")==false){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+mant=str.substring(0,expPos);
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/2094/pattern-ver1-serial/src.main.java.com.dagobert_engine.core.service.UpdateService.java-run.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||!(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||!(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||!(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+mant=str.substring(0,decPos);
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null&&exp==null||exp.isEmpty()){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/4205/pattern-ver1-serial/parsers.src.main.java.org.coode.xml.OWLOntologyXMLNamespaceManager.java-getQName.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.matches("/+[\\w\\.\\d/]+.*")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5089/pattern-ver1-serial/exportLibraries.cimadapter.src.main.java.com.emc.storageos.cimadapter.processors.CimIndicationSet.java-processProperty.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
-int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int expPos=str.indexOf('e')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/2316/pattern-ver1-serial/src.main.java.net.cubespace.CloudChat.Module.IRC.Bot.Bot.java-relayMessage.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+mant=str.substring(0,expPos);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
+mant=str.substring(0,expPos);
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/5159/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ecms.ContextMenu.java-lockNode.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if(str.startsWith("0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if(mant==null){
+mant=exp.toString();
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/70/pattern-ver1-serial/app.src.main.java.kr.ac.snu.imlab.scdc.service.core.SCDCService.java-changeConfig.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if(exp==null){
+exp=mant.toString();
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/70/pattern-ver1-serial/app.src.main.java.kr.ac.snu.imlab.scdc.service.core.SCDCService.java-changeConfig.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 7, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0-1,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
+String numeric=str.substring(0,str.length()-1-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
+mant=str.substring(0-1,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length()-1-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
-if(str.startsWith("--")){
+if(str.startsWith("--")&&!StringUtils.equalsIgnoreCase(str,"vpool.rpCopiesJson")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V48/29/pattern-ver1-serial/vipr-portal.portal.app.controllers.arrays.BlockVirtualPools.java-error.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
+Number t=d;
+d=null;
+return t;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
+Number t=d;
+d=null;
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
+return t;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if("Chrome".equals(dec==null)&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V53/1790/pattern-ver1-serial/src.main.java.syam.Honeychest.config.ConfigurationManager.java-checkver.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)&&lastChar!='.'||lastChar=='%'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:39:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+dec=str.substring(decPos+1);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
+dec=str.substring(decPos+1);
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+dec=str.substring(decPos+1);
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
+dec=str.substring(decPos+1);
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+dec=str.substring(decPos+1);
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
+dec=str.substring(decPos+1);
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+dec=str.substring(decPos+1);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+dec=str.substring(decPos+1);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+dec=str.substring(decPos+1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5726/pattern-ver1-serial/library.src.main.java.com.cocosw.bottomsheet.ClosableSlidingLayout.java-onViewReleased.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+dec=str.substring(decPos+1);
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
+dec=str.substring(decPos+1);
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+dec=str.substring(decPos+1);
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
+dec=str.substring(decPos+1);
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+dec=str.substring(decPos+1);
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
+dec=str.substring(decPos+1);
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+dec=str.substring(decPos+1);
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:40:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+try{
 mant=str.substring(0,decPos);
+}finally{
+dec=str.substring(decPos+1);
+}
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 1, INS : 0, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+if(str.startsWith("/")){
+str=str.substring(1);
+}
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+if(str.startsWith("/")){
+str=str.substring(1);
+}
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
+if(str.startsWith("/")){
+str=str.substring(1);
+}
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6177/pattern-ver1-serial/src.Hapi.SQLMethods.Methods.java-setCustomerDiscount.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2863/pattern-ver1-serial/app.src.main.java.alex.com.box2ddemo.gift2dview.Box2dSenserLogic.java-onSensorChanged.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/753/pattern-ver1-serial/src.main.java.cubicchunks.lighting.FirstLightProcessor.java-initializeSkylight.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
+dec=str.substring(decPos+1);
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
+dec=str.substring(decPos+1);
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+dec=str.substring(decPos+1);
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+dec=str.substring(decPos+1);
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
+dec=str.substring(decPos+1);
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+dec=str.substring(decPos+1);
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+dec=str.substring(decPos+1);
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+mant=str.substring(0,decPos);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
-}
 mant=str.substring(0,decPos);
+}
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+mant=str.substring(0,decPos);
 }else {
 dec=str.substring(decPos+1);
-}
 mant=str.substring(0,decPos);
+}
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 2, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
-if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+if(expPos>-1){
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+dec=str.substring(decPos+1,expPos);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+dec=str.substring(decPos+1,expPos);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
+dec=str.substring(decPos+1,expPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+dec=str.substring(decPos+1,expPos);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2665/pattern-ver1-serial/channel.src.main.java.com.github.dm.jrt.channel.ReplayChannel.java-onError.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+dec=str.substring(decPos+1,expPos);
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:41:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+dec=str.substring(decPos+1,expPos);
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+dec=str.substring(decPos+1,expPos);
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1,expPos);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+dec=str.substring(decPos+1,expPos);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+try{
 mant=str.substring(0,decPos);
+}finally{
+dec=str.substring(decPos+1,expPos);
+}
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 1, INS : 0, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
+if(numeric.contains("phpreturn")){
+numeric=numeric.replace("php","php\n");
+}
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V39/2350/pattern-ver1-serial/src.main.java.ru.andyskvo.main.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+dec=str.substring(decPos+1);
 }else {
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 2, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6358/pattern-ver1-serial/src.main.java.com.builtbroken.icbm.content.ams.TileAMSClient.java-onPlayerRightClick.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+exp=str.substring(expPos+1,str.length());
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
+exp=str.substring(expPos+1,str.length());
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
+exp=str.substring(expPos+1,str.length());
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
+exp=str.substring(expPos+1,str.length());
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+exp=str.substring(expPos+1,str.length());
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+exp=str.substring(expPos+1,str.length());
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
+exp=str.substring(expPos+1,str.length());
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V20/6349/pattern-ver1-serial/src.com.example.smartphone.SelectECActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+if(expPos>-1&&expPos<str.length()-1){
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+exp=str.substring(expPos+1,str.length());
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(decPos<0){
+return 0;
+}
+if(decPos>=expPos){
+return expPos-1;
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(expPos<0){
+return 0;
+}
+if(expPos>=decPos){
+return decPos-1;
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
+exp=str.substring(expPos+1,str.length());
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
+exp=str.substring(expPos+1,str.length());
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:42:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
+exp=str.substring(expPos+1,str.length());
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(-1!=0&&f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=0&&expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5825/pattern-ver1-serial/app.src.main.java.com.companyname.hearts.ai.HAL9000.java-computer1MakesMove.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=0&&expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(-1!=0&&f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5825/pattern-ver1-serial/app.src.main.java.com.companyname.hearts.ai.HAL9000.java-computer1MakesMove.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(-1!=0&&d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos!=0&&expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5825/pattern-ver1-serial/app.src.main.java.com.companyname.hearts.ai.HAL9000.java-computer1MakesMove.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+exp=str.substring(expPos+1,str.length());
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+exp=str.substring(expPos+1,str.length());
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
+exp=str.substring(expPos+1,str.length());
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
+exp=str.substring(expPos+1,str.length());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
+exp=str.substring(expPos+1,str.length());
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/156/pattern-ver1-serial/ControlCenter.src.main.java.org.votingsystem.web.controlcenter.filter.FilterVS.java-doFilter.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+exp=str.substring(expPos+1,str.length());
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))&&numeric.trim().charAt('-')!=';'||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V11/7874/pattern-ver1-serial/HSPC_SubmissionsProgram.src.hspc.submissionsprogram.ConfigReader.java-ConfigReader.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+if(str.endsWith("/")==false){
+str=str+"/";
+}
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&((numeric.charAt(0)=='-'&&isDigits(numeric.substring(1)))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/4601/pattern-ver1-serial/core.src.by.matveev.rorty.entities.Robot.java-updateControlState.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+dec=str.substring(decPos+1,expPos);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+dec=str.substring(decPos+1,expPos);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 2, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&("Chrome".equals(numeric.charAt(0)=='-')||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<0L||(expPos>-1&&expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<0L||(expPos>-1&&expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V8/110/pattern-ver1-serial/src.com.firebirdberlin.nightdream.ui.NightDreamUI.java-updateWeatherData.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!allZeros){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/3312/pattern-ver1-serial/WWIDesigner.src.main.com.wwidesigner.note.view.FingeringPatternPanel.java-getData.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(f.floatValue()==0.0&&!allZeros){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/3312/pattern-ver1-serial/WWIDesigner.src.main.com.wwidesigner.note.view.FingeringPatternPanel.java-getData.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(f.isInfinite()||(f.floatValue()==0.0&&!allZeros)){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/2841/pattern-ver1-serial/vtn-renderer.src.main.java.org.opendaylight.nic.vtn.renderer.VTNRenderer.java-intentParser.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if((f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/2841/pattern-ver1-serial/vtn-renderer.src.main.java.org.opendaylight.nic.vtn.renderer.VTNRenderer.java-intentParser.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if((f.floatValue()==0.0&&!allZeros)){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V32/2841/pattern-ver1-serial/vtn-renderer.src.main.java.org.opendaylight.nic.vtn.renderer.VTNRenderer.java-intentParser.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(true){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:43:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(true){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(true){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))&&allZeros){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/2749/pattern-ver1-serial/Stuyablo.java-combat.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))==false){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))==false){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))==false){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(allZeros){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(allZeros){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(allZeros){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(allZeros){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/750/pattern-ver1-serial/src.pic.simulator.pins.Rb7_4.java-clearExternally.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(f.isInfinite()){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V30/947/pattern-ver1-serial/advinst-server.src.main.java.jetbrains.buildServer.advinst.server.AdvinstRunTypePropertiesProcessor.java-process.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
+}else {
+if(null==str||str.equals("")){
+mant="null";
 }else {
 mant=str;
+}
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V29/3929/pattern-ver1-serial/modules.andes-core.broker.src.main.java.org.wso2.andes.kernel.disruptor.inbound.QueueInfo.java-QueueInfo.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/1971/pattern-ver1-serial/src.main.java.gregtech.api.gui.GT_GUIContainerMetaTile_Machine.java-drawGuiContainerBackgroundLayer.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V42/1971/pattern-ver1-serial/src.main.java.gregtech.api.gui.GT_GUIContainerMetaTile_Machine.java-drawGuiContainerBackgroundLayer.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(d.isInfinite()||(d.floatValue()==0.0&&!allZeros)){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/2706/pattern-ver1-serial/src.main.java.de.cismet.cismap.commons.gui.piccolo.eventlistener.PrintingFrameListener.java-init.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))==true){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))==true){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))==true){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<str.length()-1==true){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!f.isInfinite()||(f.floatValue()==0.0&&!allZeros)){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V35/7408/pattern-ver1-serial/src.main.java.com.joshuasnider.workspace.InternetIO.XKCDDebugger.java-printMissing.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+exp=str.substring(expPos+1,str.length()-1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+exp=str.substring(expPos+1,str.length()-1);
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/293/pattern-ver1-serial/common.ganymedes01.aobd.recipes.RecipesHandler.java-craftingRecipes.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:44:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
+exp=str.substring(expPos+1,str.length()-1);
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
+exp=str.substring(expPos+1,str.length()-1);
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if((dec==null)&&(exp==null)&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if((dec==null)&&(exp==null)){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||((f.floatValue()==0.0)&&(!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||((f.floatValue()==0.0)&&(!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+exp=str.substring(expPos+1,str.length()-1);
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
-}else {
 exp=null;
+}else {
+exp=str.substring(expPos+1,str.length());
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
-if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+if(expPos>-1){
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&dec.equals(exp)){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5953/pattern-ver1-serial/src.main.java.org.corfudb.runtime.TXRuntime.java-readsSomethingWrittenBy.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
+if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+return d;
+}
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&!(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6688/pattern-ver1-serial/src.MineralOre.java-update.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+boolean allZeros=(isAllZeros(mant))&&(isAllZeros(exp));
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 13, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
-}
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+long startTime=System.currentTimeMillis();
 dec=str.substring(decPos+1);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
+long startTime=System.currentTimeMillis();
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+long startTime=System.currentTimeMillis();
 exp=str.substring(expPos+1,str.length());
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
+long startTime=System.currentTimeMillis();
 exp=null;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
+long startTime=System.currentTimeMillis();
 exp=str.substring(expPos+1,str.length()-1);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
-}else {
 exp=null;
+}else {
+exp=str.substring(expPos+1,str.length()-1);
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 14, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
-if(str.startsWith("0x")||str.startsWith("-0x")){
+if((str.startsWith("0x"))||(str.startsWith("-0x"))){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:45:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null&&exp==null&&lastChar!='.'){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if((expPos<decPos)||(expPos>str.length())){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 16, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
-}
-mant=str.substring(0,expPos);
-}else {
 mant=str;
+}else {
+mant=str.substring(0,expPos);
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.floatValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!((d.isInfinite())||((d.doubleValue()==0.0&&!allZeros)))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-if(dec==null&&exp==null){
+if(dec==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))&&exp==null){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1)&&(expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1)&&(expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!((f.isInfinite())||((f.floatValue()==0.0&&!allZeros)))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))&&lastChar!='.'){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))&&lastChar!='.'){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))&&lastChar!='.'){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))&&lastChar!='.'){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V21/4076/pattern-ver1-serial/moho-impl.src.main.java.com.voxeo.moho.sip.DirectAI2NOJoinDelegate.java-doInviteResponse.pattern
MATCHLEVEL : ALL
ALL : 19, UPD : 19, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1)&&(expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
-if(expPos>-1&&expPos<str.length()-1){
+if((expPos>-1)&&(expPos<str.length()-1)){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2011/V2/1860/pattern-ver1-serial/structr.structr-core.src.main.java.org.structr.core.entity.AbstractNode.java-collectRelatedNodes.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 20, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V15/1014/pattern-ver1-serial/src.main.java.HxCKDMS.HxCEnchants.Handlers.EnchantHandlers.java-handleBootEnchant.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 21, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))==true){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 21, UPD : 21, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(expPos>-1){
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+mant=str.substring(0,expPos);
+}else {
+mant=str;
+}
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
-}else {
-if(expPos>-1){
-if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
-}
-mant=str.substring(0,expPos);
 }else {
-mant=str;
-}
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 0, INS : 1, DEL : 21
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
+}else {
+exp=null;
+}
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 24, UPD : 0, INS : 1, DEL : 23
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
+}else {
+exp=null;
+}
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
-}
-dec=str.substring(decPos+1,expPos);
-}else {
 dec=str.substring(decPos+1);
+}else {
+dec=str.substring(decPos+1,expPos);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 27, UPD : 27, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1);
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 0, INS : 1, DEL : 31
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
+if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
+dec=str.substring(decPos+1);
+}
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 0, INS : 1, DEL : 31
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
+dec=str.substring(decPos+1);
+}
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 0, INS : 1, DEL : 31
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
+dec=str.substring(decPos+1);
+}
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 0, INS : 1, DEL : 31
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
+if(expPos>-1){
 if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
+dec=str.substring(decPos+1);
+}
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 0, INS : 1, DEL : 31
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:47:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
+throw new NumberFormatException(str+" is not a valid number.");
+}
+}else {
+if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1);
+}
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 0, INS : 1, DEL : 31
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:47:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
-if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+if(decPos>-1){
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 0, INS : 1, DEL : 31
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:47:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+mant=str.substring(0,expPos);
 }else {
-dec=str.substring(decPos+1);
+mant=str;
 }
-mant=str.substring(0,decPos);
+dec=null;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
-dec=null;
+dec=str.substring(decPos+1);
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 40, UPD : 40, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:47:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+mant=str.substring(0,expPos);
 }else {
-dec=str.substring(decPos+1);
+mant=str;
 }
-mant=str.substring(0,decPos);
+dec=null;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
-dec=null;
+dec=str.substring(decPos+1,expPos);
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 40, UPD : 40, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:47:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
+mant=str.substring(0,expPos);
 }else {
-dec=str.substring(decPos+1);
+mant=str;
 }
-mant=str.substring(0,decPos);
+dec=null;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 String numeric=str.substring(0,str.length()-1);
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
 Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
 Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 43, UPD : 43, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:47:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[418,594]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
 if(str.startsWith("--")){
 return null;
 }
 if(str.startsWith("0x")||str.startsWith("-0x")){
 return createInteger(str);
 }
 char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
 int decPos=str.indexOf('.');
 int expPos=str.indexOf('e')+str.indexOf('E')+1;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
-String numeric=str.substring(0,str.length()-1);
-boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
-switch (lastChar){
-case 'l' :
-
-case 'L' :
-
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null){
 try{
-return createLong(numeric);
+return createInteger(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+try{
+return createLong(str);
+}catch(NumberFormatException nfe){
 }
-throw new NumberFormatException(str+" is not a valid number.");
-case 'f' :
-
-case 'F' :
-
+return createBigInteger(str);
+}else {
+boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
-Float f=NumberUtils.createFloat(numeric);
+Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
-case 'd' :
-
-case 'D' :
-
 try{
-Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+Double d=createDouble(str);
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
-}
-try{
-return createBigDecimal(numeric);
-}catch(NumberFormatException e){
 }
-default :
-
-throw new NumberFormatException(str+" is not a valid number.");
+return createBigDecimal(str);
 }
 }else {
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }else {
 boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }
 }
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 128, UPD : 128, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:47:16 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.math.NumberUtils.isAllZeros:[605, 608, 609, 610]#0.5773502691896258
Compute Candidate : 2019.09.05 AD at 15:47:31 CDT - 2019.09.05 AD at 15:55:09 CDT , PNumber : 11325, CandNumber : 139 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+continue;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
+import java.util.Collections;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
-return false;
+return true;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+return false;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str!=null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
+import java.util.Collection;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,myUid;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,DEFAULT_TIMEOUT2;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i>0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4108/pattern-ver1-serial/src.main.java.org.roaringbitmap.buffer.MappeableArrayContainer.java-inot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,MAX_SERVICE_NODES;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,MAX_ZK_WAIT_RETRY_TIMES;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+break;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)=='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6722/pattern-ver1-serial/collections.queue.IntArrayQueue.java-peek.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-2;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,localLevel;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)<'0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/1616/pattern-ver1-serial/src.PileRPL.java-sub.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)>'0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/3765/pattern-ver1-serial/app.src.main.java.com.xlythe.sms.MessageActivity.java-onGlobalLayout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i>=0;i--,new ArrayList<KeyBinding>()){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i>=0.0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/3703/pattern-ver1-serial/Muehle_Master.src.de.dhbw.muehle.model.theme.Sound.java-fade.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i<=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/4156/pattern-ver1-serial/src.eduapp.level.quest.GroupingQuest.java-setResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i>=0;i++){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/12/pattern-ver1-serial/src.main.java.com.quadcoder.coinpet.page.signup.SignupFormFragment.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,_afterComposeMethodCache;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
+import java.util.List;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,mActions;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:55:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,mRelationId;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
-return true;
+return false;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+i++;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+i--;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+isAllZeros(str);
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
+isAllZeros(str);
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
-return true;
+return false;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
-return false;
+return true;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,continentName,countryCode;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
-return false;
+return (boolean)(false);
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
+while(true){
+
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1,userEmail;i>=0;i--,i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i>=0;i--,Charset.forName("UTF-8")){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str.equals(null)){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str.isEmpty()){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.isEmpty()){
+return true;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str.isEmpty()){
+return true;
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+str=str;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str!=null){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4155/pattern-ver1-serial/Calendar.src.edu.wpi.cs.wpisuitetng.modules.calendar.view.AddEventPanel.java-populateEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.isEmpty()){
+return false;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str.isEmpty()){
+return false;
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(i==4){
+continue;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(true){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
+int a=0;
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:56:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+int a=0;
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
+int a=0;
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+int a=0;
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
+String OUTSTRING="";
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+String OUTSTRING="";
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+String OUTSTRING="";
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
+String OUTSTRING="";
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+int indexSelection=0;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(i!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.equals("sounds")){
+continue;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
+int a=1;
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+int a=1;
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
+int a=1;
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+int a=1;
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()/2-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V10/384/pattern-ver1-serial/src.com.gmail.zhou1992228.building.BuildingEntity.java-getMidPos.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
+boolean b=true;
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+boolean b=true;
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
+boolean b=true;
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+boolean b=true;
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str==null){
+continue;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
-for(int i=str.length()-1;i>=0;i--){
+for(int i=str.length()-1;i>=0;Math.abs(i--)){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(Math.abs(i))!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:57:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
+return false;
+}
+if(str==null){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
+}
+if(str==null){
+return false;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str==null||str.isEmpty()){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str==null){
+return false;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+assert (str!=null);
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+assert (str!=null);
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+assert (!str.isEmpty());
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
+assert (!str.isEmpty());
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
+}
+if(str.contains(str)){
+return false;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str.contains(str)){
+return false;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.startsWith("-")){
+return false;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str.startsWith("-")){
+return false;
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str!=null){
+if(str.charAt(i)!='0'){
+return false;
+}
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str!=null){
+if(str==null){
+return true;
+}
+for(int i=str.length()-1;i>=0;i--){
+if(str.charAt(i)!='0'){
+return false;
+}
+}
+return str.length()>0;
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+assert (str!=null);
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
+assert (str!=null);
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.matches("[0-9]*")){
+return false;
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str.matches("[0-9]*")){
+return false;
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str!=null){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1221/pattern-ver1-serial/CransJavaAI.trunk.src.com.springrts.ai.crans.DGunControllerHandler.java-update.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'||"查看红包".equals(str.charAt(i))){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'||str.charAt(i)==3){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.isEmpty()){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7675/pattern-ver1-serial/libsrc.ffdec_lib.src.com.jpexs.decompiler.flash.action.swf4.ActionGotoFrame2.java-execute.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str!=null&&str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:58:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
-return true;
+return str.length()>0;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
-return str.length()>0;
+return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
-return str.length()>0;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
-return false;
+return str.length()>0;
 }
 }
-return str.length()>0;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
+if(str.isEmpty()){
+str=null;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
+}
+if(str.isEmpty()){
+str=null;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str==null||str==""){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)<0||str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(true){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'==false){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'||str.charAt(i)==Long.MIN_VALUE){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.matches("/+[\\w\\.\\d/]+.*")){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5089/pattern-ver1-serial/exportLibraries.cimadapter.src.main.java.com.emc.storageos.cimadapter.processors.CimIndicationSet.java-processProperty.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'&&false){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'||str.charAt(i)==0){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'||str.charAt(i)>9){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'&&str.charAt(i)<4000000){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str==null||str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(Double.isNaN(str.charAt(i))){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.contains(".")){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2868/pattern-ver1-serial/src.main.java.play.templates.GroovyTemplate.java-invokeTag.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'==true){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str.charAt(i)!='0'&&str.charAt(i)!=9999){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if('0'>0&&str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 15:59:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
-if(str.charAt(i)!='0'){
+if(str==null||str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1012/pattern-ver1-serial/common.buildcraft.robotics.StationIndex.java-equals.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str.isEmpty()){
+str=null;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
+}
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
+}
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
+if(str.getClass().getSimpleName().startsWith("SystemException")){
+return true;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str.getClass().getSimpleName().startsWith("SystemException")){
+return true;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
-if(str==null){
+if(str==null&&!str.equals("")){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
+if(str.startsWith("/")){
+str=str.substring(1);
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+if(i==3){
+System.out.println("debug");
+}
 if(str.charAt(i)!='0'){
 return false;
+}
+if(i==3){
+System.out.println("debug");
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
 }
+if(str.endsWith("/")==false){
+str=str+"/";
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
 if(str.charAt(i)!='0'){
 return false;
+}
+if(str.endsWith("/")==false){
+str=str+"/";
 }
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[596,614]
------------Candidate---------------
 private static boolean isAllZeros(String str){
 if(str==null){
 return true;
 }
 for(int i=str.length()-1;i>=0;i--){
+long startTime=System.currentTimeMillis();
 if(str.charAt(i)!='0'){
 return false;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return str.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:00:52 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.math.NumberUtils.createFloat:[627, 630]#0.5773502691896258
Compute Candidate : 2019.09.05 AD at 16:01:07 CDT - 2019.09.05 AD at 16:05:20 CDT , PNumber : 11332, CandNumber : 50 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
-if(str==null){
+if(str!=null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Float createFloat(String str){
 if(str==null){
 return null;
 }
-return Float.valueOf(str);
+return Float.valueOf(str.trim());
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
 }
-return Float.valueOf(str);
+return Float.valueOf((str).toLowerCase());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
 }
-return Float.valueOf(str);
+return Float.valueOf((str).toUpperCase());
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
 }
-return Float.valueOf(str);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
-if(str==null){
+if(str.equals(null)){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
-if(str==null){
+if(str.isEmpty()){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
-if(str==null){
+if(true){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
 }
-return Float.valueOf(str);
+return new Float(Float.valueOf(str));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
 }
-return Float.valueOf(str);
+return (Float)Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
+int a=0;
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
+int a=0;
 if(str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
 }
-return Float.valueOf(str);
+return -Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
+String OUTSTRING="";
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
+String OUTSTRING="";
 if(str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
+if(str.isEmpty()){
+return 0f;
+}
 if(str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:05:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
 }
-return Float.valueOf(str);
+return (Float)(Float.valueOf(str));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+return 0f;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
+int a=1;
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
+int a=1;
 if(str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
+boolean b=true;
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
+boolean b=true;
 if(str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
+if(str==null){
+return null;
+}
 if(str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
-if(str==null){
+if(str==null||str.isEmpty()){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
+if(str==null){
+return 0f;
+}
 if(str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
+}
+if(str==null){
+return 0f;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
+return null;
+}
+if("&null".equals(str)){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
+assert (str!=null);
 if(str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
 }
+assert (!str.isEmpty());
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
+if(str!=null){
+if(str==null){
+return null;
+}
+return Float.valueOf(str);
+}
 if(str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
 }
+assert (str!=null);
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
+}
+if((Thread.currentThread().interrupted())){
+return 0f;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+str=null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
-if(str==null){
+if(str==null||str==""){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
-if(str==null){
+if(str==null||str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
+import java.util.LinkedList;
+
 public static Float createFloat(String str){
+Float pcb=new Float(str);
 if(str==null){
 return null;
 }
-return Float.valueOf(str);
+return pcb.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7301/pattern-ver1-serial/src.simulator.FCFSKernel.java-loadProgram.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
 }
-return Float.valueOf(str);
+return str==null?null:Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4622/pattern-ver1-serial/src.soot.shimple.ShimpleMethodSource.java-getBody.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:06:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:07:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:07:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:07:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
 if(str==null){
 return null;
+}
+if(str==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:07:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
-if(str==null){
+if(str==null&&!str.equals("")){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[617,631]
------------Candidate---------------
 public static Float createFloat(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(str==null){
 return null;
 }
 return Float.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:07:18 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.math.NumberUtils.createDouble:[643, 646]#0.5773502691896258
Compute Candidate : 2019.09.05 AD at 16:07:33 CDT - 2019.09.05 AD at 16:11:52 CDT , PNumber : 11332, CandNumber : 50 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
-if(str==null){
+if(str!=null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:11:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Double createDouble(String str){
 if(str==null){
 return null;
 }
-return Double.valueOf(str);
+return Double.valueOf(str.trim());
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:11:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
 }
-return Double.valueOf(str);
+return Double.valueOf((str).toLowerCase());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:11:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
 }
-return Double.valueOf(str);
+return Double.valueOf((str).toUpperCase());
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
 }
-return Double.valueOf(str);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
-if(str==null){
+if(str.equals(null)){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
-if(str==null){
+if(str.isEmpty()){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
-if(str==null){
+if(true){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
 }
-return Double.valueOf(str);
+return new Double(Double.valueOf(str));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
 }
-return Double.valueOf(str);
+return (Double)Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
+int a=0;
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
+int a=0;
 if(str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
 }
-return Double.valueOf(str);
+return -Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
+String OUTSTRING="";
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
+String OUTSTRING="";
 if(str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
+if(str.isEmpty()){
+return 0d;
+}
 if(str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
 }
-return Double.valueOf(str);
+return (Double)(Double.valueOf(str));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+return 0d;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
+int a=1;
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
+int a=1;
 if(str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
+boolean b=true;
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
+boolean b=true;
 if(str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
+if(str==null){
+return null;
+}
 if(str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:12:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
-if(str==null){
+if(str==null||str.isEmpty()){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
+if(str==null){
+return 0d;
+}
 if(str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
+}
+if(str==null){
+return 0d;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
+return null;
+}
+if("&null".equals(str)){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
+assert (str!=null);
 if(str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
 }
+assert (!str.isEmpty());
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
+if(str!=null){
+if(str==null){
+return null;
+}
+return Double.valueOf(str);
+}
 if(str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
 }
+assert (str!=null);
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
+}
+if((Thread.currentThread().interrupted())){
+return 0d;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+str=null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
-if(str==null){
+if(str==null||str==""){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
-if(str==null){
+if(str==null||str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
+import java.util.LinkedList;
+
 public static Double createDouble(String str){
+Double pcb=new Double(str);
 if(str==null){
 return null;
 }
-return Double.valueOf(str);
+return pcb.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7301/pattern-ver1-serial/src.simulator.FCFSKernel.java-loadProgram.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
 }
-return Double.valueOf(str);
+return str==null?null:Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4622/pattern-ver1-serial/src.soot.shimple.ShimpleMethodSource.java-getBody.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
 if(str==null){
 return null;
+}
+if(str==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
-if(str==null){
+if(str==null&&!str.equals("")){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[633,647]
------------Candidate---------------
 public static Double createDouble(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(str==null){
 return null;
 }
 return Double.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:13:55 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.math.NumberUtils.createInteger:[660, 664]#0.5773502691896258
Compute Candidate : 2019.09.05 AD at 16:14:10 CDT - 2019.09.05 AD at 16:18:18 CDT , PNumber : 11326, CandNumber : 56 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str!=null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return Integer.decode(str.trim());
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return Integer.decode((str).toLowerCase());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return Integer.decode((str).toUpperCase());
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str.equals(null)){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str.isEmpty()){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return Integer.decode(str)&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(true){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return new Integer(Integer.decode(str));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return (Integer)Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return 0;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return -1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/5579/pattern-ver1-serial/src.utils.Controls.java-getCommand.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+int a=0;
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+int a=0;
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return -Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+String OUTSTRING="";
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:18:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+String OUTSTRING="";
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str.isEmpty()){
+return 0;
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+Integer Integer=8;
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return (Integer)(Integer.decode(str));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+return 0;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+int a=1;
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+int a=1;
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+boolean b=true;
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+boolean b=true;
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str==null){
+return null;
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str==null||str.isEmpty()){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str==null){
+return 0;
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
+}
+if(str==null){
+return 0;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+if("index".equals(str)){
+return 0;
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+return null;
+}
+if("&null".equals(str)){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+assert (str!=null);
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
+assert (!str.isEmpty());
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str!=null){
+if(str==null){
+return null;
+}
+return Integer.decode(str);
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
+assert (str!=null);
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
+}
+if((Thread.currentThread().interrupted())){
+return 0;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+str=null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:19:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str==null||str==""){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:20:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str==null||str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:20:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:20:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
+import java.util.LinkedList;
+
 public static Integer createInteger(String str){
+Integer pcb=new Integer(str);
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return pcb.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7301/pattern-ver1-serial/src.simulator.FCFSKernel.java-loadProgram.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:20:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return str==null?null:Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4622/pattern-ver1-serial/src.soot.shimple.ShimpleMethodSource.java-getBody.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:20:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:20:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:20:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:20:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:20:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:20:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
+}
+if(str==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:20:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str==null&&!str.equals("")){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:20:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[649,665]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:20:30 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.StringUtils.isEmpty:[183]#0.5
Compute Candidate : 2019.09.05 AD at 16:20:45 CDT - 2019.09.05 AD at 16:25:12 CDT , PNumber : 11391, CandNumber : 24 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return cs!=null||cs.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return cs==null&&cs.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V7/7763/pattern-ver1-serial/app.src.main.java.cheaphone.gui.Offerta.java-setOffert.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return cs==null||cs.length()<=0;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return cs==null||cs.length()>=0;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return cs==null||cs.length()!=0;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return cs==null||cs.length()>0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return cs!=null&&cs.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V10/7445/pattern-ver1-serial/bungeecord.src.main.java.com.vexsoftware.votifier.bungee.forwarding.OnlineForwardPluginMessagingForwardingSource.java-forward.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
+int a=0;
 return cs==null||cs.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
+String OUTSTRING="";
 return cs==null||cs.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return "Chrome".equals(cs)||cs.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
+int a=1;
 return cs==null||cs.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
+boolean b=true;
 return cs==null||cs.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return cs==null||cs==null;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1221/pattern-ver1-serial/CransJavaAI.trunk.src.com.springrts.ai.crans.DGunControllerHandler.java-update.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return cs==null||cs.length()==0-1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2784/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.server.rest.v1.TopicV1Factory.java-syncDBEntityWithRESTEntitySecondPass.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
+assert (cs!=null);
 return cs==null||cs.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
+if(cs!=null){
+return cs==null||cs.length()==0;
+}
 return cs==null||cs.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
+assert (cs!=null):"Appointments day is not allowed to be null!";
 return cs==null||cs.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:25:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
+if(cs==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 return cs==null||cs.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:26:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return cs==null;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/4706/pattern-ver1-serial/titan-core.src.main.java.com.thinkaurelius.titan.graphdb.query.vertex.AbstractVertexCentricQueryBuilder.java-isPartitionedVertex.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:26:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2886/pattern-ver1-serial/src.freenet.node.CHKInsertSender.java-shouldTimeout.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:26:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
+import java.util.Collections;
+
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:26:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return cs.length()==0;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/6229/pattern-ver1-serial/Mage.Sets.src.mage.sets.betrayersofkamigawa.TomorrowAzamisFamiliar.java-applies.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:26:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return cs==null||cs.length()==0||cs.length()==';';
 }

PATTERN : /home/jiajun/GithubData/2015/V9/2929/pattern-ver1-serial/src.main.java.com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck.java-isCharacterValidAfterGenericEnd.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:26:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[163,184]
------------Candidate---------------
 public static boolean isEmpty(CharSequence cs){
-return cs==null||cs.length()==0;
+return (boolean)(cs==null||cs.length()==0);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:26:17 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.StringUtils.isBlank:[223, 226, 227, 228]#0.5
Compute Candidate : 2019.09.05 AD at 16:26:32 CDT - 2019.09.05 AD at 16:41:11 CDT , PNumber : 11399, CandNumber : 134 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+continue;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
+import java.util.Collections;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
-return false;
+return true;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+return false;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs!=null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;strLen<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<=strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
+import java.util.Collection;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,myUid;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i>strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,MAX_SERVICE_NODES;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+break;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())<=0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;i--){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())>=0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())!=0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,localLevel;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:41:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())>0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;i++,new ArrayList<KeyBinding>()){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;strLen++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if((Character.isWhitespace(cs.charAt(i))!=false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,_afterComposeMethodCache;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
+import java.util.List;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,mActions;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;i++,new ArrayList<>()){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,mRelationId;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=1)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=-1)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=0)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
-return true;
+return false;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
-return true;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
-return false;
+return true;
 }
 }
-return true;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+i++;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+strLen++;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
+strLen++;
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+i--;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+strLen--;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
+strLen--;
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=2)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+isBlank(cs);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:42:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
+isBlank(cs);
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
-return true;
+return false;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
-return false;
+return true;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,continentName,countryCode;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
-return false;
+return (boolean)(false);
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;strLen<i;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/3724/pattern-ver1-serial/Fanorona.java-isPossibleCapturingMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
+}
+while(true){
+
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,userEmail;i<strLen;i++,i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
+i++;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+i++;
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=10)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;i++,Charset.forName("UTF-8")){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+cs=cs;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
+cs=cs;
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(i==4){
+continue;
+}
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
+strLen=1000;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if((Character.isWhitespace(cs.charAt(i)-1)==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
+int a=0;
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+int a=0;
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
+int a=0;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+int a=0;
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
+String OUTSTRING="";
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+String OUTSTRING="";
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+String OUTSTRING="";
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
+String OUTSTRING="";
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if((Character.isWhitespace(cs.charAt(i)*1000)==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;){
+i++;
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:43:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+int indexSelection=0;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
+int indexSelection=0;
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(cs.equals("sounds")){
+continue;
+}
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if("Chrome".equals(cs)||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
+int a=1;
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+int a=1;
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
+int a=1;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+int a=1;
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+boolean Character=true;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
+boolean b=true;
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+boolean b=true;
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
+boolean b=true;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+boolean b=true;
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length()+1)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(cs==null){
+continue;
+}
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;Math.abs(i++)){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if((Character.isWhitespace(cs.charAt(Math.abs(i)))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if((Character.isWhitespace(Math.abs(cs.charAt(i)))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())==0-1){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2784/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.server.rest.v1.TopicV1Factory.java-syncDBEntityWithRESTEntitySecondPass.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
+return false;
+}
+if(cs==null){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
+if(cs==null){
+return false;
+}
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
+}
+if(cs==null){
+return false;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:44:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())+strLen==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if((Character.isWhitespace(cs.charAt(i)*-1)==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+assert (cs!=null);
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+assert (cs!=null);
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+if(cs!=null){
+int strLen;
+if(cs==null||(strLen=cs.length())==0){
+return true;
+}
+for(int i=0;i<strLen;i++){
+if((Character.isWhitespace(cs.charAt(i))==false)){
+return false;
+}
+}
+return true;
+}
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(cs!=null){
+if((Character.isWhitespace(cs.charAt(i))==false)){
+return false;
+}
+}
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
+}
+if(strLen==0){
+return false;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=-1)==0){
 return true;
 }
+strLen++;
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=-1)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+strLen++;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+assert (cs!=null);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
+assert (cs!=null);
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if((Character.isWhitespace(cs==null?null:cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if((Character.isWhitespace(cs!=null?cs.charAt(i):null)==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+assert (cs!=null):"Appointments day is not allowed to be null!";
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+assert (cs!=null):"Appointments day is not allowed to be null!";
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
+if(cs==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(cs==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
+}
+if(cs==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:45:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
+}
+if(strLen<0){
+strLen=0;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
+}
+if(strLen<=0){
+strLen=1;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
+}
+if(cs.getClass().getSimpleName().startsWith("SystemException")){
+return true;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
+return true;
+}
+if(cs.getClass().getSimpleName().startsWith("SystemException")){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if(!(Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if(true){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if((Character.isWhitespace(cs.charAt(i))==false)==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if((Character.isWhitespace(cs.charAt(i))==false)&&false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if((Character.isWhitespace(cs.charAt(i))==false)==true){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if(!Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/7408/pattern-ver1-serial/src.main.java.com.joshuasnider.workspace.InternetIO.XKCDDebugger.java-printMissing.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if(!Character.isWhitespace(cs.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/7408/pattern-ver1-serial/src.main.java.com.joshuasnider.workspace.InternetIO.XKCDDebugger.java-printMissing.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if(!false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/7408/pattern-ver1-serial/src.main.java.com.joshuasnider.workspace.InternetIO.XKCDDebugger.java-printMissing.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())==0||"查看红包".equals(cs==null)){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())==0||(strLen=cs.length())=='%'){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(i==3){
+System.out.println("debug");
+}
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
+}
+if(i==3){
+System.out.println("debug");
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(strLen==3){
+System.out.println("debug");
+}
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
+}
+if(strLen==3){
+System.out.println("debug");
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(true){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())==0==false){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if((strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/293/pattern-ver1-serial/src.snpsvm.app.CommandLineApp.java-main.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())==0&&false){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())==0==true){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
+boolean haveBreadCrumbs=false;
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if((Character.isWhitespace(cs.charAt(i))==false)&&haveBreadCrumbs){
 return false;
 }
+haveBreadCrumbs=true;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 7, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:46:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+long startTime=System.currentTimeMillis();
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:47:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+long startTime=System.currentTimeMillis();
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if((Character.isWhitespace(cs.charAt(i))==false)){
 return false;
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:47:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[205,232]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if((cs==null)||((strLen=cs.length())==0)){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if((Character.isWhitespace(cs.charAt(i))==false)){
+if(((Character.isWhitespace(cs.charAt(i)))==(false))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:47:08 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.math.NumberUtils.createLong:[677, 680]#0.5
Compute Candidate : 2019.09.05 AD at 16:47:24 CDT - 2019.09.05 AD at 16:51:53 CDT , PNumber : 11331, CandNumber : 55 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str!=null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:51:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf(str,0);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:51:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.parseLong(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/1910/pattern-ver1-serial/components.apimgt.org.wso2.carbon.apimgt.keymgt.src.main.java.org.wso2.carbon.apimgt.keymgt.handlers.ExtendedClientCredentialsGrantHandler.java-authorizeAccessDelegation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf(str,2);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf(str.trim());
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf((str).toLowerCase());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf((str).toUpperCase());
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str.equals(null)){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str.isEmpty()){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf(str)&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(true){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return new Long(Long.valueOf(str));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return (Long)Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+int a=0;
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
+int a=0;
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return -Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+String OUTSTRING="";
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
+String OUTSTRING="";
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
+if(str.isEmpty()){
+return 0l;
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return (Long)(Long.valueOf(str));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+return 0l;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+int a=1;
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
+int a=1;
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:52:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+boolean b=true;
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
+boolean b=true;
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
+if(str==null){
+return null;
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str==null||str.isEmpty()){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
+if(str==null){
+return 0l;
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
+}
+if(str==null){
+return 0l;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+return null;
+}
+if("&null".equals(str)){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
+assert (str!=null);
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
+assert (!str.isEmpty());
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
+if(str!=null){
+if(str==null){
+return null;
+}
+return Long.valueOf(str);
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
+assert (str!=null);
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
+}
+if((Thread.currentThread().interrupted())){
+return 0l;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+str=null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str==null||str==""){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return Long.valueOf(str)==null?0:Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2889/pattern-ver1-serial/dbclient.src.main.java.com.emc.storageos.db.client.model.VirtualPool.java-getRpRpoValue.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str==null||str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
+import java.util.LinkedList;
+
 public static Long createLong(String str){
+Long pcb=new Long(str);
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return pcb.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7301/pattern-ver1-serial/src.simulator.FCFSKernel.java-loadProgram.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
 }
-return Long.valueOf(str);
+return str==null?null:Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4622/pattern-ver1-serial/src.soot.shimple.ShimpleMethodSource.java-getBody.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
 if(str==null){
 return null;
+}
+if(str==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:53:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
-if(str==null){
+if(str==null&&!str.equals("")){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:54:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[667,681]
------------Candidate---------------
 public static Long createLong(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(str==null){
 return null;
 }
 return Long.valueOf(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 16:54:04 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.math.NumberUtils.isDigits:[1287, 1290, 1291, 1295]#0.5
Compute Candidate : 2019.09.05 AD at 16:54:20 CDT - 2019.09.05 AD at 17:02:23 CDT , PNumber : 11294, CandNumber : 122 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+continue;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
-return true;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/2886/pattern-ver1-serial/src.freenet.node.CHKInsertSender.java-shouldTimeout.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+return false;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i<=str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
+import java.util.Collection;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,myUid;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i>str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,MAX_SERVICE_NODES;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+break;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+return true;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V45/3473/pattern-ver1-serial/src.main.java.com.fabegabe.cmd.CCCommand.java-onCommand.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i<str.length();i--){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,localLevel;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i<str.length();i++,new ArrayList<KeyBinding>()){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:02:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isNotEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/4562/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.database.dao.MetadataDao.java-storeMovieCredit.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:03:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,_afterComposeMethodCache;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:03:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
+import java.util.List;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,mActions;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:03:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,mRelationId;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isEmpty(str.trim())){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:03:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
-return false;
+return true;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
-return true;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:03:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
-return false;
+return true;
 }
 }
-return true;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:03:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+i++;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:03:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+i--;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:05:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+isDigits(str);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:05:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
+isDigits(str);
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:05:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isEmpty((str).toLowerCase())){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:05:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,continentName,countryCode;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:05:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
-return true;
+return (boolean)(true);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:05:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
+while(true){
+
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:07:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0,userEmail;i<str.length();i++,i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:07:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
+i++;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+i++;
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:07:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isEmpty((str).toUpperCase())){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:07:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i<str.length();i++,Charset.forName("UTF-8")){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:07:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(!StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:07:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.isEmpty()){
+return true;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str.isEmpty()){
+return true;
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/3286/pattern-ver1-serial/DatabaseMSCore.src.DatabaseMSCore.dbTypeInteger.java-canBeInitializedWith.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:07:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+str=str;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:07:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.isEmpty()){
+return false;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str.isEmpty()){
+return false;
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4707/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.contentspec.processor.ContentSpecProcessor.java-processExistingTopicTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:07:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(i==4){
+continue;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:07:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(true){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isEmpty(str)==false){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str!=null){
 if(StringUtils.isEmpty(str)){
 return false;
+}
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(i)-1)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
+int a=0;
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+int a=0;
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
+int a=0;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+int a=0;
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(str!=null){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/691/pattern-ver1-serial/us.textrade.models.MatchesQueue.java-addTradeToQueue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
+String OUTSTRING="";
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+String OUTSTRING="";
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+String OUTSTRING="";
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
+String OUTSTRING="";
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(i)*1000)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i<str.length();){
+i++;
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+int Character=5;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isEmpty(str)==true){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+int indexSelection=0;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.equals("sounds")){
+continue;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
+int a=1;
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+int a=1;
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
+int a=1;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+int a=1;
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
+if(str!=null){
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/7646/pattern-ver1-serial/src.java.com.smi.travel.datalayer.dao.impl.TourOperationImpl.java-updateTourOperation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:08:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+boolean Character=true;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
+boolean b=true;
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+boolean b=true;
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+boolean b=true;
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
+boolean b=true;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str==null){
+continue;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
-for(int i=0;i<str.length();i++){
+for(int i=0;i<str.length();Math.abs(i++)){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(Math.abs(i)))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(Math.abs(str.charAt(i)))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
+return false;
+}
+if(str==null){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
+return false;
+}
+if(str==null){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(i)*-1)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+assert (str!=null);
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+assert (str!=null);
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+assert (!str.isEmpty());
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
+assert (!str.isEmpty());
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
+return false;
+}
+if(str.contains(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.startsWith("-")){
+return false;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str.startsWith("-")){
+return false;
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3084/pattern-ver1-serial/src.cdio.shared.FieldVerifier.java-isValidRbId.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str!=null){
+if(StringUtils.isEmpty(str)){
+return false;
+}
+for(int i=0;i<str.length();i++){
+if(!Character.isDigit(str.charAt(i))){
+return false;
+}
+}
+return true;
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str!=null){
+if(!Character.isDigit(str.charAt(i))){
+return false;
+}
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+assert (str!=null);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
+assert (str!=null);
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.matches("[0-9]*")){
+return false;
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str.matches("[0-9]*")){
+return false;
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5036/pattern-ver1-serial/src.engine.PrinterServerTask1After.java-checkIfInputMatchStored.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
+if(str.isEmpty()){
+str=null;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
+}
+if(str.isEmpty()){
+str=null;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:09:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str==null?null:str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str!=null?str.charAt(i):null)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
 }
+if(str.isEmpty()){
+str=null;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
+}
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
+}
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(true){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(i))&&false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
+if(str.getClass().getSimpleName().startsWith("SystemException")){
+return true;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
 }
+if(str.getClass().getSimpleName().startsWith("SystemException")){
+return true;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
-if(!Character.isDigit(str.charAt(i))){
+if(!Character.isDigit(str.charAt(i))==true){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
-if(StringUtils.isEmpty(str)){
+if(StringUtils.isEmpty(str)&&!str.equals("全部")){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/6475/pattern-ver1-serial/src.main.java.com.morningsidevc.service.impl.FeedInfoServiceImpl.java-findFeeds.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
+if(str.startsWith("/")){
+str=str.substring(1);
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+if(i==3){
+System.out.println("debug");
+}
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
+if(i==3){
+System.out.println("debug");
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
 }
+if(str.endsWith("/")==false){
+str=str+"/";
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:11:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
 if(!Character.isDigit(str.charAt(i))){
 return false;
+}
+if(str.endsWith("/")==false){
+str=str+"/";
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:11:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_16_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[1276,1296]
------------Candidate---------------
 public static boolean isDigits(String str){
 if(StringUtils.isEmpty(str)){
 return false;
 }
 for(int i=0;i<str.length();i++){
+long startTime=System.currentTimeMillis();
 if(!Character.isDigit(str.charAt(i))){
 return false;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber]
---------START : 2019.09.05 AD at 12:49:27 CDT
---------TIME : 2019.09.05 AD at 17:11:05 CDT
--------------- END -----------------
Finish : lang-16 > patch : 0 | Start : Thu Sep 05 12:49:27 CDT 2019 | End : 2019.09.05 AD at 17:11:05 CDT
