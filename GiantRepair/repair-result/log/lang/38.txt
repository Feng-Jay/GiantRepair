Repair : lang_38
Current failed test : org.apache.commons.lang3.time.FastDateFormatTest::testLang538 | 2019.09.06 AD at 20:39:21 CDT
Location : org.apache.commons.lang3.time.FastDateFormat.parsePattern:[642, 643, 639, 640, 633, 634, 636, 637, 621, 627, 628, 620, 618, 610, 609, 616, 683, 684, 685, 578, 579, 581, 582, 583, 584, 585, 586, 588, 589, 591, 592, 593, 594, 596, 597, 602, 604, 694, 697]#1.0
Compute Candidate : 2019.09.06 AD at 20:39:47 CDT - 2019.09.07 AD at 00:03:27 CDT , PNumber : 11365, CandNumber : 969 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+continue;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+continue;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+continue;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+continue;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+continue;
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+continue;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+continue;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
+continue;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+continue;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+continue;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/5856/pattern-ver1-serial/internalLibraries.backup.src.main.java.com.emc.storageos.management.backup.DbBackupHandler.java-dumpBackup.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
-DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+ final DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/4583/pattern-ver1-serial/api.src.main.java.org.ednovo.gooru.domain.service.userManagement.UserManagementServiceImpl.java-deleteGrade.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
+ String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
-String[] shortMonths=symbols.getShortMonths();
+ String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:03:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
-String[] shortWeekdays=symbols.getShortWeekdays();
+ String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:04:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:04:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
-String[] AmPmStrings=symbols.getAmPmStrings();
+ String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:04:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
-int length=mPattern.length();
+ int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:04:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
-int tokenLen=token.length();
+ int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:04:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
-char c=token.charAt(0);
+ char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:04:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ final List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/7125/pattern-ver1-serial/src.fr.visian.vip.gateway.waspmote.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:04:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==0){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:04:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen==0){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:04:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen==0){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/4568/pattern-ver1-serial/src.client.game.GameFrame.java-received.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:04:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=1;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+return null;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+return null;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+return null;
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+return null;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+return null;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+return null;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+return null;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+return null;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
+return null;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+return null;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;indexRef[0]<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
-return rules;
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
-int length=mPattern.length();
+long length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:06:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=0;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:08:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;i<=length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:08:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+List<Rule> rules=new ArrayList<Rule>(null);
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/104/pattern-ver1-serial/cps.hu.bme.mit.inf.cps.patterns.src-gen.hu.bme.mit.inf.cps.patterns.AllApplicationInstanceIsRunningMatch.java-newEmptyMatch.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:08:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Collection;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0,myUid;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:08:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
-rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
+rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<=4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/1247/pattern-ver1-serial/src.connect4.HumanPlayer.java-drop.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen>=2){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V39/6961/pattern-ver1-serial/src.Actions.FailedGuessAction.java-FailedGuessAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen>=2){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V39/6961/pattern-ver1-serial/src.Actions.FailedGuessAction.java-FailedGuessAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+String sub=token.substring(1,0);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+init();
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4063/pattern-ver1-serial/layout.StickerSheetBuilder.java-get.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+init();
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4063/pattern-ver1-serial/layout.StickerSheetBuilder.java-get.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+init();
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4063/pattern-ver1-serial/layout.StickerSheetBuilder.java-get.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+init();
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4063/pattern-ver1-serial/layout.StickerSheetBuilder.java-get.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+init();
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4063/pattern-ver1-serial/layout.StickerSheetBuilder.java-get.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
+init();
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4063/pattern-ver1-serial/layout.StickerSheetBuilder.java-get.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+init();
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4063/pattern-ver1-serial/layout.StickerSheetBuilder.java-get.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
+init();
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4063/pattern-ver1-serial/layout.StickerSheetBuilder.java-get.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+init();
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4063/pattern-ver1-serial/layout.StickerSheetBuilder.java-get.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
+init();
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4063/pattern-ver1-serial/layout.StickerSheetBuilder.java-get.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;i>length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+init();
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1285/pattern-ver1-serial/app.src.main.java.com.xw.exemple.dashboardviewdemo.DashboardView.java-setRealTimeValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+init();
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1285/pattern-ver1-serial/app.src.main.java.com.xw.exemple.dashboardviewdemo.DashboardView.java-setRealTimeValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+init();
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1285/pattern-ver1-serial/app.src.main.java.com.xw.exemple.dashboardviewdemo.DashboardView.java-setRealTimeValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
+init();
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1285/pattern-ver1-serial/app.src.main.java.com.xw.exemple.dashboardviewdemo.DashboardView.java-setRealTimeValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+init();
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1285/pattern-ver1-serial/app.src.main.java.com.xw.exemple.dashboardviewdemo.DashboardView.java-setRealTimeValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+init();
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1285/pattern-ver1-serial/app.src.main.java.com.xw.exemple.dashboardviewdemo.DashboardView.java-setRealTimeValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+init();
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1285/pattern-ver1-serial/app.src.main.java.com.xw.exemple.dashboardviewdemo.DashboardView.java-setRealTimeValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:09:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+init();
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1285/pattern-ver1-serial/app.src.main.java.com.xw.exemple.dashboardviewdemo.DashboardView.java-setRealTimeValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+init();
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/1285/pattern-ver1-serial/app.src.main.java.com.xw.exemple.dashboardviewdemo.DashboardView.java-setRealTimeValue.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen>4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4108/pattern-ver1-serial/src.main.java.org.roaringbitmap.buffer.MappeableArrayContainer.java-inot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen>4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4108/pattern-ver1-serial/src.main.java.org.roaringbitmap.buffer.MappeableArrayContainer.java-inot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
-if(tokenLen>=4){
+if(tokenLen>4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/4108/pattern-ver1-serial/src.main.java.org.roaringbitmap.buffer.MappeableArrayContainer.java-inot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0,MAX_SERVICE_NODES;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+break;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+break;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+break;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+break;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+break;
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+break;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+break;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+break;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
+break;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+break;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+init();
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4189/pattern-ver1-serial/core.src.main.java.de.fuberlin.winfo.project.algorithm.impl.sven.vns.NeighborhoodStructure.java-search.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:10:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=2;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:12:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen<=0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:12:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()<=1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:12:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen<=2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:12:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen<=3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:12:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
-int length=mPattern.length();
+float length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=3;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:14:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;i<length;i--){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:16:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+List<Rule> rules=new ArrayList<Rule>(1);
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V29/3262/pattern-ver1-serial/app.src.main.java.com.playing.lokasee.activites.MainActivity.java-onClose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+symbols);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+rules);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+ERAs);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+AmPmStrings);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+months);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+shortMonths);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+weekdays);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+shortWeekdays);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+length);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen>=5){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1455/pattern-ver1-serial/NumbersFlow.src.com.braingames.sdk.numbersflow.ScoreDatabase.java-getFirstFiveScores.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen>=5){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1455/pattern-ver1-serial/NumbersFlow.src.com.braingames.sdk.numbersflow.ScoreDatabase.java-getFirstFiveScores.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;i<4;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/1764/pattern-ver1-serial/src.main.java.ua.com.ecotep.debtprevention.MainController.java-handleArchiveAction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen>=2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen>=3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen>=0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()>=1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[1]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=indexRef[1];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6103/pattern-ver1-serial/src.br.unicamp.ic.recod.gpsi.applications.gpsiJGAPEvolver.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()!=1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen!=2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen!=3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen!=0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
-int length=mPattern.length();
+Integer length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
-int tokenLen=token.length();
+Integer tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+String sub=token.substring(1,1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:17:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
+rules.add(1,rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/6767/pattern-ver1-serial/src.main.java.org.gedcom4j.writer.GedcomWriter.java-emitRepositories.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:18:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;i<3;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/3819/pattern-ver1-serial/BootPrepWeb.src.controllers.UserController.java-validInputs.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:18:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+}
 }
+if(tokenLen==2){
+rule=TwoDigitMonthField.INSTANCE;
+}else {
+rule=UnpaddedMonthField.INSTANCE;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1324/pattern-ver1-serial/cspi-schema.src.main.java.org.collectionspace.chain.csp.schema.Record.java-getServicesTenantDoctype.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:18:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[i]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/625/pattern-ver1-serial/src.controllers.multiPlayer.sampleMCTS.SingleTreeNode.java-rollOut.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:18:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0,localLevel;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:18:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+String sub=token.substring(c,1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2664/pattern-ver1-serial/NightgamesMod.nightgames.skills.Unstrip.java-resolve.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:18:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
+rules.add(c,rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2664/pattern-ver1-serial/NightgamesMod.nightgames.skills.Unstrip.java-resolve.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:18:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=10;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[2]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=indexRef[2];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/963/pattern-ver1-serial/src.com.ict.apps.bobb.battle.BattleUtil.java-getJudgeResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen>0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()>1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen>2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen>3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==4){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen==4){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen==4){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen==4){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/5287/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.SubredditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
+rules.remove(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/3908/pattern-ver1-serial/src.main.java.me.ferrybig.javacoding.minecraft.minigame.listener.CombinedListener.java-removeListener.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;i<length;i++,new ArrayList<KeyBinding>()){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=100;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen>=0.0){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/3703/pattern-ver1-serial/Muehle_Master.src.de.dhbw.muehle.model.theme.Sound.java-fade.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen>=0.0){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/3703/pattern-ver1-serial/Muehle_Master.src.de.dhbw.muehle.model.theme.Sound.java-fade.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;i<5;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/7269/pattern-ver1-serial/src.infovis.piechart.Data.java-Data.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen<=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/4156/pattern-ver1-serial/src.eduapp.level.quest.GroupingQuest.java-setResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen<=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/4156/pattern-ver1-serial/src.eduapp.level.quest.GroupingQuest.java-setResult.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==5){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen==5){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen==5){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:21:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen==5){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/2942/pattern-ver1-serial/app.src.main.java.me.ccrama.redditslide.Activities.MainActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:21:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
-int[] indexRef=new int[1];
+int[] indexRef=new int[(1)];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/4580/pattern-ver1-serial/src.sort.MergeTask.java-call.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:21:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
-rule=TwoDigitMonthField.INSTANCE;
+rule=null;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:21:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+String sub=token.substring(1,2);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:21:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=4;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:23:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=5;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:25:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
+case 401 :
+
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1693/pattern-ver1-serial/src.main.java.uk.ac.ic.wlgitbridge.snapshot.getdoc.GetDocResult.java-fromJSON.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:25:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;i<length;length++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
-if(tokenLen==1){
+if(tokenLen>=1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2968/pattern-ver1-serial/src.project4.Critter.java-wrapX.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+List<Rule> rules=new ArrayList<Rule>(2);
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5794/pattern-ver1-serial/app.src.main.java.io.github.louistsaitszho.erg2.gui.HistoryAdapter.java-startDateTimeToString.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
+
+case 4 :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2088/pattern-ver1-serial/core.src.com.finalstand.game.Screens.PlayScreen.java-findCreepStartingPos.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0,_afterComposeMethodCache;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen==2){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/1084/pattern-ver1-serial/app.src.main.java.com.example.jimmyle.pacmanandroid.InteractiveView.java-move.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==2){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/1084/pattern-ver1-serial/app.src.main.java.com.example.jimmyle.pacmanandroid.InteractiveView.java-move.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen==2){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/1084/pattern-ver1-serial/app.src.main.java.com.example.jimmyle.pacmanandroid.InteractiveView.java-move.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
+i++;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/6189/pattern-ver1-serial/src.Connection.java-discoverIP.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0,mActions;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+indexRef);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V20/6925/pattern-ver1-serial/src.MovieList.java-addMovie.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=400;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.NecrolyteDeathPulse.java-NecrolyteDeathPulse.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;i<length;i++,new ArrayList<>()){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0,mRelationId;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Iterator;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
+case 5 :
+
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V13/1378/pattern-ver1-serial/src.haven.OptWnd.java-changed.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
-return rules;
+return this.parsePattern();
 }

PATTERN : /home/jiajun/GithubData/2016/V3/6962/pattern-ver1-serial/CodenameOne.src.com.codename1.ui.Toolbar.java-constructSideNavigationComponent.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
-int[] indexRef=new int[1];
+ final int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
-int[] indexRef=new int[1];
+ final int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ final String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:28:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ final Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:28:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ final List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:28:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
-DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+ final DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:28:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ final List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ final String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:28:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ final String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ final Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:28:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
-DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+ final DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ final String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:28:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:28:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=1;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:30:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=-1;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=-1;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ final String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ final String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
+ final String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
-String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] shortMonths=symbols.getShortMonths();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
-String[] shortWeekdays=symbols.getShortWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
+ final String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.examples.ResourceListExample.java-printRecordings.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
+ final String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ final String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ final Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ final Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5265/pattern-ver1-serial/src.main.java.org.lemming.modules.StoreLoader.java-addMetadata.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
+ String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
-String[] shortMonths=symbols.getShortMonths();
+ String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
+ String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:32:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
-String[] shortMonths=symbols.getShortMonths();
+ String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:33:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:33:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:33:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
-int length=mPattern.length();
+ final int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4668/pattern-ver1-serial/src.main.java.accountService.AccountServiceImpl.java-updateUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
-int length=mPattern.length();
+ final int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ final String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:33:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ final String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
-int tokenLen=token.length();
+ final int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
-int length=mPattern.length();
+ final int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:33:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
-int length=mPattern.length();
+ final int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ final Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:33:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
-int tokenLen=token.length();
+ final int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:33:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
+ final String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
-int tokenLen=token.length();
+ final int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:33:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
-int length=mPattern.length();
+ final int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/6331/pattern-ver1-serial/src.java.growthcraft.api.fishtrap.FishTrapEntry.java-getFishable.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ final String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
-char c=token.charAt(0);
+ final char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/6749/pattern-ver1-serial/ml.src.main.java.com.spbsu.ml.data.tools.DynamicBinModelBuilder.java-DynamicBinModelBuilder.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:33:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=0;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:35:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.ArrayList;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
-return rules;
+return new ArrayList<>(rules);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/2266/pattern-ver1-serial/src.com.homework.parts.Sentence.java-getNumbers.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:35:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
+this.parsePattern();
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:35:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+this.parsePattern();
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:35:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
+this.parsePattern();
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:35:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+this.parsePattern();
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:35:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
+this.parsePattern();
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:35:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+this.parsePattern();
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:35:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+this.parsePattern();
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:35:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+this.parsePattern();
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:35:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+this.parsePattern();
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:35:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+this.parsePattern();
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/5018/pattern-ver1-serial/app.src.main.java.it.unimi.unimiplaces.presenters.BookmarksPresenter.java-init.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:36:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=2;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:38:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=3;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Iterator;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==-1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Iterator;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen==-1){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Iterator;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen==-1){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Iterator;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen==-1){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/7863/pattern-ver1-serial/src.main.java.util.ListTools.java-call.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+if(token.isEmpty()){
+continue;
+}
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6775/pattern-ver1-serial/Salvum.src.br.ufpe.cin.analyses.Main.java-run.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+tokenLen++;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+tokenLen++;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+tokenLen++;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
+length++;
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
+tokenLen++;
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+c++;
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+i++;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+i++;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
+i++;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+i++;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+i++;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+i++;
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+i++;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+tokenLen--;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+tokenLen--;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+tokenLen--;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
+tokenLen--;
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;i<=length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
-rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
+rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<=4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4679/pattern-ver1-serial/src.course.Grass.java-render.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:40:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+i--;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:41:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+i--;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+i--;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:41:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+i--;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:41:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+i--;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:43:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+i--;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:43:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+i--;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=10;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+return null;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+return null;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+return null;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+return null;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+return null;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+return null;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+return null;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+return null;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+return null;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+return null;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+return null;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+return null;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/4557/pattern-ver1-serial/src.de.rincewind.api.gui.elements.ElementCounter.java-setCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=100;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
-if(tokenLen==1){
+if(tokenLen!=0){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen!=0){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen!=0){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/5558/pattern-ver1-serial/app.src.main.java.in.attreya.dailylist.MainActivity.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
+synchronized(rules){
 rules.add(rule);
+}
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/90/pattern-ver1-serial/PolibudaRun.src.HorizontalMove.java-down.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+rules.clear();
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
+rules.clear();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/5987/pattern-ver1-serial/src.org.kjg.garderobe.ShiftDetailNumbersFragment.java-onCreateOptionsMenu.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+String sub=token.substring((int)(1));
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
-rule=new CharacterLiteral(sub.charAt(0));
+rule=new CharacterLiteral(sub.charAt((int)(0)));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
-char c=token.charAt(0);
+char c=token.charAt((int)(0));
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/6653/pattern-ver1-serial/Character.java-setCharstat.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+return null;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+return null;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/3053/pattern-ver1-serial/src.UI.ReservationUI.java-reserveTableOption.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+rules.clear();
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/400/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.PlanController.java-joinPlan.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rules.clear();
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/400/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.PlanController.java-joinPlan.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:45:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+rules.clear();
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/400/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.PlanController.java-joinPlan.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:46:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+rules.clear();
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/400/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.PlanController.java-joinPlan.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:46:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+rules.clear();
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/400/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.PlanController.java-joinPlan.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:46:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rules.clear();
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/400/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.PlanController.java-joinPlan.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:46:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+rules.clear();
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/400/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.PlanController.java-joinPlan.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:46:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+rules.clear();
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/400/pattern-ver1-serial/plan-comp.src.main.java.com.tissue.plan.web.spring.controllers.PlanController.java-joinPlan.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:46:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+rules.clear();
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/5250/pattern-ver1-serial/src.it.rate.view.WidgetUpdate.java-updateTopUrlsList.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:46:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=4;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/1083/pattern-ver1-serial/action-adventure.src.main.java.niellebeck.game.PlayerCharacter.java-PlayerCharacter.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:48:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=5;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V40/26/pattern-ver1-serial/src.android.com.terrydr.eyeScope.CameraActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen>4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen>4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/3972/pattern-ver1-serial/src.org.apache.batik.utils.SimpleImageTranscoder.java-updateImage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen>4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
-if(tokenLen>=4){
+if(tokenLen>4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/3972/pattern-ver1-serial/src.org.apache.batik.utils.SimpleImageTranscoder.java-updateImage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen>4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
-if(tokenLen>=4){
+if(tokenLen>4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/3972/pattern-ver1-serial/src.org.apache.batik.utils.SimpleImageTranscoder.java-updateImage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+return null;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+return null;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+return null;
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+return null;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+return null;
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+return null;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+return null;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+return null;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/1404/pattern-ver1-serial/src.controllers.AnimatedBorderPane.java-setRightAnimated.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+return null;
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+return null;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V2/4018/pattern-ver1-serial/src.client.net.Clientsocket.java-Sender.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
+synchronized(this){
 rules.add(rule);
+}
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+synchronized(this){
 rule=new StringLiteral(sub);
+}
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/6621/pattern-ver1-serial/src.com.qozix.tileview.tiles.TileCache.java-addBitmap.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0,continentName,countryCode;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+break;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+break;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+break;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+break;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+break;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+break;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+break;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+break;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+break;
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+break;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+break;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+break;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+break;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+break;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:50:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+break;
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+break;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/1550/pattern-ver1-serial/src.com.patr.radix.ActiveTimeActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:51:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
-return rules;
+return (List<Rule>)(rules);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:51:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
-if(tokenLen==1){
+if(tokenLen<0){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:51:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen<0){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:51:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen<0){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:51:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen<0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/6790/pattern-ver1-serial/Minigames.src.au.com.mineauz.minigames.menu.MenuItemList.java-updateDescription.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:51:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+return null;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+return null;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/144/pattern-ver1-serial/lettuce.src.main.java.com.lambdaworks.redis.Connections.java-close.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:51:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+}
 }
+while(true){
+
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:53:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+}
+while(true){
+
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:55:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+while(true){
+
+}
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:55:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+while(true){
+
+}
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:55:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+while(true){
+
+}
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:55:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+while(true){
+
+}
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:57:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+while(true){
+
+}
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:59:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
+while(true){
+
+}
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 00:59:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+while(true){
+
+}
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+while(true){
+
+}
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0,userEmail;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+String sub=token.substring(1,1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+break;
 }
+break;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+break;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+break;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+break;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+break;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+break;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+break;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+break;
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+break;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+break;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+break;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/1968/pattern-ver1-serial/src.main.java.com.ucmo.chat.controller.Controller.java-handleMessage.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=400;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.NecrolyteDeathPulse.java-NecrolyteDeathPulse.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()>0){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2696/pattern-ver1-serial/src.main.java.br.com.provaServer.infrastructure.deserialization.gson.GsonDeserialization.java-isWithoutRoot.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen>0){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2696/pattern-ver1-serial/src.main.java.br.com.provaServer.infrastructure.deserialization.gson.GsonDeserialization.java-isWithoutRoot.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen>0){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/2696/pattern-ver1-serial/src.main.java.br.com.provaServer.infrastructure.deserialization.gson.GsonDeserialization.java-isWithoutRoot.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+token.toString());
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V3/7313/pattern-ver1-serial/Core.astra.interpreter.src.astra.reasoner.util.ContentCodec.java-test_predicate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:01:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
+rules.clear();
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
+rules.clear();
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+rules.clear();
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+rules.clear();
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+rules.clear();
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
+rules.clear();
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+rules.clear();
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+rules.clear();
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+rules.clear();
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7642/pattern-ver1-serial/src.net.thecobix.openwsk.arena.WaterRemoveSystem.java-collectBlocks.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+i--;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/2847/pattern-ver1-serial/core.src.com.mygdx.game.GameScreen.java-updateBossBullet.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+synchronized(this){
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+}
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+synchronized(this){
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+}
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V7/3100/pattern-ver1-serial/src.de.uni_koblenz.jgralab.greql.evaluator.GreqlQueryImpl.java-evaluate.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;i<length;i++,Charset.forName("UTF-8")){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
+if(rules!=rule){
 rules.add(rule);
+}
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7075/pattern-ver1-serial/app.src.main.java.com.gustavoparreira.realtimetile.Player.java-run.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
+if(rule!=null){
 rules.add(rule);
+}
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/262/pattern-ver1-serial/src.internal.tree.WorldTree.java-getAllChildren.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
+if(rules!=null){
 rules.add(rule);
+}
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V17/5324/pattern-ver1-serial/src.main.java.de.cismet.cids.custom.objecteditors.wrrl_db_mv.HydrologRouteEditor.java-sldZoomStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
+synchronized(this){
 break;
+}
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+synchronized(this){
 rule=TwoDigitMonthField.INSTANCE;
+}
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ final Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ final Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
-int tokenLen=token.length();
+ final int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ final Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
-int length=mPattern.length();
+ final int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ final Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
-String[] shortMonths=symbols.getShortMonths();
+ final String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ final Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
-String[] shortWeekdays=symbols.getShortWeekdays();
+ final String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ final Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
+ final String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ final Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:02:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
-char c=token.charAt(0);
+ final Rule rule;
+ final char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ final String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ final Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1483/pattern-ver1-serial/core.src.de.homelab.madgaksha.lotsofbs.cutscenesystem.fancyscene.FancyZoom.java-readNextObject.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=selectNumberRule(30-(Calendar.MILLISECOND),tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=selectNumberRule(Calendar.MILLISECOND,30-(tokenLen));
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=selectNumberRule(30-(Calendar.SECOND),tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=selectNumberRule(Calendar.SECOND,30-(tokenLen));
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
-rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
+rule=selectNumberRule(30-(Calendar.HOUR_OF_DAY),tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
-rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
+rule=selectNumberRule(Calendar.HOUR_OF_DAY,30-(tokenLen));
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
-rule=selectNumberRule(Calendar.MINUTE,tokenLen);
+rule=selectNumberRule(30-(Calendar.MINUTE),tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/1792/pattern-ver1-serial/rangebar.src.com.appyvet.rangebar.RangeBar.java-onAnimationUpdate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
-String[] shortMonths=symbols.getShortMonths();
+ final String[] months=symbols.getMonths();
+ final String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
-String[] shortWeekdays=symbols.getShortWeekdays();
+ final String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] ERAs=symbols.getEras();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
-String[] AmPmStrings=symbols.getAmPmStrings();
+ final String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ final List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] ERAs=symbols.getEras();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
-String[] shortMonths=symbols.getShortMonths();
+ final String[] ERAs=symbols.getEras();
+ final String[] months=symbols.getMonths();
+ final String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] ERAs=symbols.getEras();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
-String[] shortWeekdays=symbols.getShortWeekdays();
+ final String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ final String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3285/pattern-ver1-serial/project.core.src.se.computerscience.kelde.model.entities.EntityBat.java-getHeading.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ final List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ final List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
-DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+ final DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
-DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+ final DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
-int tokenLen=token.length();
+ final int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
-int length=mPattern.length();
+ final int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:03:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
-int length=mPattern.length();
+ final int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6059/pattern-ver1-serial/src.main.java.com.bandwidth.sdk.model.Conference.java-getMembers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ @SuppressWarnings("UnusedAssignment") String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ @SuppressWarnings("UnusedAssignment") String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ @SuppressWarnings("UnusedAssignment") String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ @SuppressWarnings("UnusedAssignment") String[] ERAs=symbols.getEras();
+ @SuppressWarnings("UnusedAssignment") String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ @SuppressWarnings("UnusedAssignment") String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
-String[] shortMonths=symbols.getShortMonths();
+ @SuppressWarnings("UnusedAssignment") String[] months=symbols.getMonths();
+ @SuppressWarnings("UnusedAssignment") String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ @SuppressWarnings("UnusedAssignment") String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ @SuppressWarnings("UnusedAssignment") String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
-String[] shortWeekdays=symbols.getShortWeekdays();
+ @SuppressWarnings("UnusedAssignment") String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ @SuppressWarnings("UnusedAssignment") String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ @SuppressWarnings("UnusedAssignment") String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ @SuppressWarnings("UnusedAssignment") String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ @SuppressWarnings("UnusedAssignment") Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ @SuppressWarnings("UnusedAssignment") String[] ERAs=symbols.getEras();
+ @SuppressWarnings("UnusedAssignment") String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ @SuppressWarnings("UnusedAssignment") Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
-String[] shortMonths=symbols.getShortMonths();
+ @SuppressWarnings("UnusedAssignment") String[] months=symbols.getMonths();
+ @SuppressWarnings("UnusedAssignment") String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ @SuppressWarnings("UnusedAssignment") Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ @SuppressWarnings("UnusedAssignment") String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
-String[] shortWeekdays=symbols.getShortWeekdays();
+ @SuppressWarnings("UnusedAssignment") String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
+ @SuppressWarnings("UnusedAssignment") Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ @SuppressWarnings("UnusedAssignment") List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ @SuppressWarnings("UnusedAssignment") String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ @SuppressWarnings("UnusedAssignment") String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
-DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+ @SuppressWarnings("UnusedAssignment") DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ @SuppressWarnings("UnusedAssignment") String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ @SuppressWarnings("UnusedAssignment") String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Collections;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
-return rules;
+return Collections.unmodifiableList(rules);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6159/pattern-ver1-serial/src.main.java.cz.muni.fi.xml.pools.UserXmlPool.java-getUsers.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+tokenLen=tokenLen;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
-int[] indexRef=new int[1];
+ final int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
-int[] indexRef=new int[1];
+ final int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
-String[] shortMonths=symbols.getShortMonths();
+ final String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
-int[] indexRef=new int[1];
+ final int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
-String[] shortWeekdays=symbols.getShortWeekdays();
+ final String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
-int[] indexRef=new int[1];
+ final int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
+ final String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
-int[] indexRef=new int[1];
+ final int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
-int[] indexRef=new int[1];
+ final int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
-char c=token.charAt(0);
+ final char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
-String[] AmPmStrings=symbols.getAmPmStrings();
+ final String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
-int[] indexRef=new int[1];
+ final int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
-int[] indexRef=new int[1];
+ final int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
-int tokenLen=token.length();
+ final int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
-int length=mPattern.length();
-int[] indexRef=new int[1];
+ final int length=mPattern.length();
+ final int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
-int[] indexRef=new int[1];
+ final int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
-String token=parseToken(mPattern,indexRef);
+ final String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+ final String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V18/5586/pattern-ver1-serial/querqy-core.src.main.java.querqy.CompoundCharSequence.java-subSequence.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+if(i==4){
+continue;
+}
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:04:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+if(token.isEmpty()){
+return null;
+}
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/2729/pattern-ver1-serial/davinci.src.main.java.cn.hadcn.davinci.image.DiskLruImageCache.java-getBitmap.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
+tokenLen=1000;
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(true){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(true){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(true){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(true){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(true){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Arrays;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
+Arrays.sort(ERAs);
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/405/pattern-ver1-serial/twitter-topic-strand-core.src.main.java.twittertopicstrand.util.FileOperations.java-getFiles.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Arrays;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
+Arrays.sort(shortMonths);
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/405/pattern-ver1-serial/twitter-topic-strand-core.src.main.java.twittertopicstrand.util.FileOperations.java-getFiles.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Arrays;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
+Arrays.sort(shortWeekdays);
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/405/pattern-ver1-serial/twitter-topic-strand-core.src.main.java.twittertopicstrand.util.FileOperations.java-getFiles.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
-DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ final DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+ final List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
+ final String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
-DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ final DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+ final List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
-String[] weekdays=symbols.getWeekdays();
+ final String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
-DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ final DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+ final List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
-String[] shortMonths=symbols.getShortMonths();
+ final String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
-DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ final DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+ final List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
-String[] shortWeekdays=symbols.getShortWeekdays();
+ final String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
-DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
-String[] ERAs=symbols.getEras();
+ final DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+ final List<Rule> rules=new ArrayList<Rule>();
+ final String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
-DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
-List<Rule> rules=new ArrayList<Rule>();
+ final DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+ final List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
-String[] AmPmStrings=symbols.getAmPmStrings();
+ final String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V37/6206/pattern-ver1-serial/ColFusionServerBLL.src.main.java.edu.pitt.sis.exp.colfusion.bll.BasicTableBL.java-getAttachmentList.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=0xEfffffff&(i);
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=0xEfffffff&(indexRef[0]);
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
+Rule rule;
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
-Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+int a=0;
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+int a=0;
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+int a=0;
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+int a=0;
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+int a=0;
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
+int a=0;
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+int a=0;
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
+int a=0;
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:05:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+int a=0;
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+int a=0;
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+if(tokenLen==0.0){
+continue;
+}
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4118/pattern-ver1-serial/src.behavior.irl.TabularIRL.java-getBehaviorLogProbabilityHelper.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+String OUTSTRING="";
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+String OUTSTRING="";
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+String OUTSTRING="";
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+String OUTSTRING="";
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
+String OUTSTRING="";
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+String OUTSTRING="";
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+String OUTSTRING="";
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+String OUTSTRING="";
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
+String OUTSTRING="";
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+String OUTSTRING="";
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
-rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rule=this.selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/3729/pattern-ver1-serial/src.main.java.org.opentosca.csarrepo.service.CreateOpenToscaServerService.java-CreateOpenToscaServerService.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
-rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
+rule=new TwelveHourField(this.selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/3729/pattern-ver1-serial/src.main.java.org.opentosca.csarrepo.service.CreateOpenToscaServerService.java-CreateOpenToscaServerService.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
-rule=selectNumberRule(Calendar.HOUR,tokenLen);
+rule=this.selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/3729/pattern-ver1-serial/src.main.java.org.opentosca.csarrepo.service.CreateOpenToscaServerService.java-CreateOpenToscaServerService.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
-rule=selectNumberRule(Calendar.MINUTE,tokenLen);
+rule=this.selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/3729/pattern-ver1-serial/src.main.java.org.opentosca.csarrepo.service.CreateOpenToscaServerService.java-CreateOpenToscaServerService.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
-rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
+rule=this.selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/3729/pattern-ver1-serial/src.main.java.org.opentosca.csarrepo.service.CreateOpenToscaServerService.java-CreateOpenToscaServerService.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
-rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
+rule=this.selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/3729/pattern-ver1-serial/src.main.java.org.opentosca.csarrepo.service.CreateOpenToscaServerService.java-CreateOpenToscaServerService.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
-rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
+rule=new TwentyFourHourField(this.selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/3729/pattern-ver1-serial/src.main.java.org.opentosca.csarrepo.service.CreateOpenToscaServerService.java-CreateOpenToscaServerService.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
-rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
+rule=this.selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/3729/pattern-ver1-serial/src.main.java.org.opentosca.csarrepo.service.CreateOpenToscaServerService.java-CreateOpenToscaServerService.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
-rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
+rule=this.selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/3729/pattern-ver1-serial/src.main.java.org.opentosca.csarrepo.service.CreateOpenToscaServerService.java-CreateOpenToscaServerService.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=this.selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
-rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
+rule=this.selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/3729/pattern-ver1-serial/src.main.java.org.opentosca.csarrepo.service.CreateOpenToscaServerService.java-CreateOpenToscaServerService.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+if(rules.isEmpty()){
+return null;
+}
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+if(sub.isEmpty()){
+return null;
+}
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;i<length;){
+i++;
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:06:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+int TwoDigitMonthField=5;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+int INSTANCE=5;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+int Calendar=5;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/7018/pattern-ver1-serial/app.src.main.java.com.priteshjain.popularmovies.util.EndlessRecyclerOnScrollListener.java-onScrolled.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=selectNumberRule(Math.round(Calendar.MILLISECOND),tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=selectNumberRule(Calendar.MILLISECOND,Math.round(tokenLen));
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=selectNumberRule(Math.round(Calendar.SECOND),tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=selectNumberRule(Calendar.SECOND,Math.round(tokenLen));
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
-rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
+rule=selectNumberRule(Math.round(Calendar.HOUR_OF_DAY),tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
-rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
+rule=selectNumberRule(Calendar.HOUR_OF_DAY,Math.round(tokenLen));
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
-rule=selectNumberRule(Calendar.MINUTE,tokenLen);
+rule=selectNumberRule(Math.round(Calendar.MINUTE),tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/7706/pattern-ver1-serial/pixi.src.main.java.org.openpixi.pixi.diagnostics.methods.ProjectedEnergyDensity.java-initialize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(Math.abs(tokenLen)>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/5309/pattern-ver1-serial/IHMCJavaToolkit.src.us.ihmc.tools.FormattingTools.java-getFormattedToSignificantFigures.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(Math.abs(tokenLen)>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/5309/pattern-ver1-serial/IHMCJavaToolkit.src.us.ihmc.tools.FormattingTools.java-getFormattedToSignificantFigures.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
-if(tokenLen>=4){
+if(Math.abs(tokenLen)>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/5309/pattern-ver1-serial/IHMCJavaToolkit.src.us.ihmc.tools.FormattingTools.java-getFormattedToSignificantFigures.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=null;
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=null;
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
-rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
+rule=null;
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
-rule=selectNumberRule(Calendar.MINUTE,tokenLen);
+rule=null;
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
-rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
+rule=null;
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
-rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rule=null;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(Double.isNaN(tokenLen)){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(Double.isNaN(tokenLen)){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(Double.isNaN(tokenLen)){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(Double.isNaN(tokenLen)){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(Double.isNaN(tokenLen)){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:07:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
-for(int i=0;i<length;i++){
+for(int i=0;i<length;Math.abs(i++)){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
-String sub=token.substring(1);
+String sub=token.substring(Math.abs(1));
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
-rule=new CharacterLiteral(sub.charAt(0));
+rule=new CharacterLiteral(sub.charAt(Math.abs(0)));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
-char c=token.charAt(0);
+char c=token.charAt(Math.abs(0));
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1979/pattern-ver1-serial/h2o-algos.src.main.java.hex.tree.gbm.GBM.java-map.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+if(equals(tokenLen)){
+return null;
+}
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+if(equals(tokenLen)){
+return null;
+}
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/2535/pattern-ver1-serial/src.main.java.se.intem.web.taglib.combined.node.ResourceNode.java-addEdge.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+int indexSelection=0;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+int indexSelection=0;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+int indexSelection=0;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+int indexSelection=0;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+int indexSelection=0;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
+int indexSelection=0;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+int indexSelection=0;
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
+int indexSelection=0;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+int indexSelection=0;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:08:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+int indexSelection=0;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=selectNumberRule(Math.max(Calendar.MILLISECOND,tokenLen),tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
-rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+rule=selectNumberRule(Calendar.MILLISECOND,Math.max(Calendar.MILLISECOND,tokenLen));
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=selectNumberRule(Math.max(Calendar.SECOND,tokenLen),tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
-rule=selectNumberRule(Calendar.SECOND,tokenLen);
+rule=selectNumberRule(Calendar.SECOND,Math.max(Calendar.SECOND,tokenLen));
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
-rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
+rule=selectNumberRule(Math.max(Calendar.HOUR_OF_DAY,tokenLen),tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
-rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
+rule=selectNumberRule(Calendar.HOUR_OF_DAY,Math.max(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
-rule=selectNumberRule(Calendar.MINUTE,tokenLen);
+rule=selectNumberRule(Math.max(Calendar.MINUTE,tokenLen),tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4531/pattern-ver1-serial/rsen.src.main.java.com.rsen.github.common.L.java-i.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Arrays;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0-1]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Arrays;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=indexRef[0-1];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/7420/pattern-ver1-serial/src.webradio.Show.java-convertArrToString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+if(sub.equals("sounds")){
+continue;
+}
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+if(shortMonths.equals("sounds")){
+continue;
+}
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+if(shortMonths.equals("sounds")){
+continue;
+}
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=i+indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+int a=1;
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+int a=1;
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+int a=1;
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+int a=1;
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+int a=1;
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
+int a=1;
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+int a=1;
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
+int a=1;
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
+int a=1;
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+int a=1;
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:09:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+String INSTANCE="%#.&f";
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+String MONTH="%#.&f";
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/4517/pattern-ver1-serial/src.com.amadeus.cmath.MatrixPrinter.java-printMatrix.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
+boolean MILLISECOND=true;
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
+boolean Calendar=true;
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
+boolean SECOND=true;
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
+boolean HOUR_OF_DAY=true;
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
+boolean MINUTE=true;
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+boolean b=true;
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+boolean b=true;
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+boolean b=true;
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+boolean b=true;
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
+boolean b=true;
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+boolean b=true;
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
+boolean b=true;
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+boolean b=true;
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+boolean b=true;
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+boolean b=true;
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+if(token.startsWith("ldaps")){
+}
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/7118/pattern-ver1-serial/gateway.engine.policies.src.main.java.io.apiman.gateway.engine.policies.auth.LDAPIdentityValidator.java-validate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+if(shortMonths==null){
+continue;
+}
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+if(shortMonths==null){
+continue;
+}
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+if(sub==null){
+continue;
+}
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+if(months==null){
+continue;
+}
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+if(sub==null){
+continue;
+}
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+if(rules==null){
+continue;
+}
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:10:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+if(ERAs==null){
+continue;
+}
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+if(shortMonths==null){
+return null;
+}
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+if(shortMonths==null){
+return null;
+}
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+if(months==null){
+return null;
+}
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+if(sub==null){
+return null;
+}
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+if(sub==null){
+return null;
+}
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+if(rules==null){
+return null;
+}
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
+if(rules==null){
+return null;
+}
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+if(symbols==null){
+return null;
+}
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+if(ERAs==null){
+return null;
+}
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+if(token==null){
+return null;
+}
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/2822/pattern-ver1-serial/grib.src.main.java.ucar.nc2.grib.grib1.tables.NcepHtmlScraper.java-parseTable2.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.isEmpty()){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7675/pattern-ver1-serial/libsrc.ffdec_lib.src.com.jpexs.decompiler.flash.action.swf4.ActionGotoFrame2.java-execute.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
+if(token==null){
+return null;
+}
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+if("&null".equals(rules)){
+return null;
+}
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+if("&null".equals(ERAs)){
+return null;
+}
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+}
 }
+if("&null".equals(shortMonths)){
+return null;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+}
 }
+if("&null".equals(tokenLen)){
+return null;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+}
+if("&null".equals(tokenLen)){
+return null;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+if("&null".equals(AmPmStrings)){
+return null;
+}
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+if("&null".equals(shortMonths)){
+return null;
+}
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+if("&null".equals(months)){
+return null;
+}
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+if("&null".equals(shortMonths)){
+return null;
+}
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+rules.add(rule);
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:11:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+rules.add(rule);
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4414/pattern-ver1-serial/crawler.src.crawler.Crawler.java-onStatus.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rules.add(rule);
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+rule=TwoDigitMonthField.INSTANCE;
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+rule=TwoDigitMonthField.INSTANCE;
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
-rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+rule=TwoDigitMonthField.INSTANCE;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
-rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+rule=TwoDigitMonthField.INSTANCE;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rules.add(rule);
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V27/2451/pattern-ver1-serial/ShopNow.src.shopnow.Customer_Account.java-get_phone_number.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+rule=TwoDigitMonthField.INSTANCE;
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+rule=TwoDigitMonthField.INSTANCE;
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+rule=TwoDigitMonthField.INSTANCE;
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+rule=TwoDigitMonthField.INSTANCE;
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
+rule=TwoDigitMonthField.INSTANCE;
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+rule=TwoDigitMonthField.INSTANCE;
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+rule=TwoDigitMonthField.INSTANCE;
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
+rule=UnpaddedMonthField.INSTANCE;
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+rule=UnpaddedMonthField.INSTANCE;
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+rule=UnpaddedMonthField.INSTANCE;
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/2749/pattern-ver1-serial/src.org.opencms.importexport.CmsImportVersion7.java-addAccessControlEntry.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
+if(rules.size()>0){
 rules.add(rule);
+}
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/506/pattern-ver1-serial/app.src.main.java.com.jessie.guessnumber.MainActivity.java-delete.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+rule=TwoDigitMonthField.INSTANCE;
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
-rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+if(tokenLen==2){
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+rule=UnpaddedMonthField.INSTANCE;
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
-rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+rule=UnpaddedMonthField.INSTANCE;
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
-rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+rule=TwoDigitMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+rule=TwoDigitMonthField.INSTANCE;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rule=TwoDigitMonthField.INSTANCE;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/6753/pattern-ver1-serial/app.src.main.java.com.tbd.memory_game.GameActivity.java-onPause.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:12:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
+if(!rules.contains(rule)){
 rules.add(rule);
+}
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7288/pattern-ver1-serial/Horizon.app.src.main.java.com.example.hesolutions.horizon.DataManager.java-datagetvalue.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(true){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
+if(!rule.equals("")){
 rules.add(rule);
+}
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/60/pattern-ver1-serial/app.src.main.java.com.holygon.dishcuss.Fragments.AccountPhotosFragment.java-SetImageURL.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1==false){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+if(tokenLen<0){
+return null;
+}
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+if(tokenLen<0){
+return null;
+}
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/1167/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.router.Publishers.java-receivedData.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen==2||tokenLen==Long.MIN_VALUE){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen==3||tokenLen==Long.MIN_VALUE){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen==0||tokenLen==Long.MIN_VALUE){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen>=4||tokenLen==Long.MIN_VALUE){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen>=4||tokenLen==Long.MIN_VALUE){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1||sub.length()==Long.MIN_VALUE){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.matches("/+[\\w\\.\\d/]+.*")){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5089/pattern-ver1-serial/exportLibraries.cimadapter.src.main.java.com.emc.storageos.cimadapter.processors.CimIndicationSet.java-processProperty.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+rule=UnpaddedMonthField.INSTANCE;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/6301/pattern-ver1-serial/app.src.main.java.client.example.sj.pulltoscaleheaderlayout.PullToScaleHeaderLayout.java-computeScroll.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+rules.add(rule);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+rules.add(rule);
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+token.replaceAll("[^\\w\\s]",""));
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/547/pattern-ver1-serial/src.main.java.com.driver.locator.pageobject.PageObjectGenerator.java-formatWebElement.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+token.replace("Illegal pattern component: ",""));
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2038/pattern-ver1-serial/LabPal.app.src.main.java.danandzach.labpal.LabCalculations.java-setErrorDisplay.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
-rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rule=TwoDigitMonthField.INSTANCE;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
-rule=UnpaddedMonthField.INSTANCE;
 }
 }
+rule=UnpaddedMonthField.INSTANCE;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
-rule=UnpaddedMonthField.INSTANCE;
 }
+rule=UnpaddedMonthField.INSTANCE;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1875/pattern-ver1-serial/TherapistApp.src.application.Main.java-handle.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+rules.add(rule);
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+DateFormat INSTANCE=new SimpleDateFormat("yyyyMMdd_HHmm");
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/4864/pattern-ver1-serial/VotingSystemAPI.src.main.java.org.votingsystem.util.DateUtils.java-getURLTimePeriod.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
+if(symbols==null){
+return null;
+}
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4925/pattern-ver1-serial/statemachine-persistence.src.main.java.de.teck.statemachine.persistence.model.TransitionGraph.java-addTransition.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:13:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+rules.add(rule);
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+rules.add(rule);
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+rules.add(rule);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+rules.add(rule);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V23/3266/pattern-ver1-serial/src.lejosserver.TouchSensor.java-TouchSensor.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+assert (rules!=null);
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
+assert (rules!=null);
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+assert (symbols!=null);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+assert (ERAs!=null);
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
+assert (ERAs!=null);
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+assert (shortMonths!=null);
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+assert (AmPmStrings!=null);
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
+assert (AmPmStrings!=null);
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+assert (!sub.isEmpty());
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+assert (!sub.isEmpty());
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
-rule=new CharacterLiteral(sub.charAt(0));
+rule=null;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/2637/pattern-ver1-serial/de.bund.bfr.knime.openkrise.views.src.de.bund.bfr.knime.openkrise.views.gisgraphview.GraphSettings.java-GraphSettings.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(Double.isNaN(sub.length())){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.contains(".")){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V9/2868/pattern-ver1-serial/src.main.java.play.templates.GroovyTemplate.java-invokeTag.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
+}
+if(rules.contains(rule)){
+return null;
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/5787/pattern-ver1-serial/modules.web.web-impl.src.main.java.com.enonic.xp.web.impl.WebHandlerRegistry.java-add.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1==true){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+if(sub!=null){
+rule=new CharacterLiteral(sub.charAt(0));
+}
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+assert (!rules.isEmpty());
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
+assert (tokenLen!=token.length());
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+assert (c!=token.charAt(0));
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+assert (token!=parseToken(mPattern,indexRef));
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:14:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+assert (shortMonths!=null);
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:15:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+assert (sub!=null);
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:15:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+assert (months!=null);
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:15:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+assert (sub!=null);
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:15:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=-1;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+i++;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:17:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=-1;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+i++;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=-1;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+indexRef[0]++;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:19:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=-1;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+indexRef[0]++;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:19:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=-1;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+i++;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:21:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=-1;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+i++;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:23:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=-1;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+i++;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=-1;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+indexRef[0]++;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=-1;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+indexRef[0]++;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=-1;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+indexRef[0]++;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
+if(months==null){
+return null;
+}
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/4697/pattern-ver1-serial/src.main.java.chbachman.armour.items.armour.logic.LPUpgradeLogic.java-damageArmour.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
+if(ERAs==null){
+return null;
+}
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/4697/pattern-ver1-serial/src.main.java.chbachman.armour.items.armour.logic.LPUpgradeLogic.java-damageArmour.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
+if(weekdays==null){
+return null;
+}
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/4697/pattern-ver1-serial/src.main.java.chbachman.armour.items.armour.logic.LPUpgradeLogic.java-damageArmour.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
+if(shortMonths==null){
+return null;
+}
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/4697/pattern-ver1-serial/src.main.java.chbachman.armour.items.armour.logic.LPUpgradeLogic.java-damageArmour.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
+if(shortWeekdays==null){
+return null;
+}
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/4697/pattern-ver1-serial/src.main.java.chbachman.armour.items.armour.logic.LPUpgradeLogic.java-damageArmour.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
+if(AmPmStrings==null){
+return null;
+}
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/4697/pattern-ver1-serial/src.main.java.chbachman.armour.items.armour.logic.LPUpgradeLogic.java-damageArmour.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
-rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
+rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1092/pattern-ver1-serial/org.eclipse.debug.ui.ui.org.eclipse.debug.ui.DebugPopup.java-open.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
-rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
+rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1092/pattern-ver1-serial/org.eclipse.debug.ui.ui.org.eclipse.debug.ui.DebugPopup.java-open.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+assert (shortMonths!=null);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+assert (months!=null);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+assert (sub!=null);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:25:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+assert (sub!=null);
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+assert (shortMonths!=null);
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+assert (rules!=null);
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+assert (ERAs!=null);
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rules.add(rule);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5672/pattern-ver1-serial/core.src.com.overwatch2d.game.GameScreen.java-beginContact.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
+rules.add(rule);
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V32/5672/pattern-ver1-serial/core.src.com.overwatch2d.game.GameScreen.java-beginContact.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen==0||"查看红包".equals(tokenLen)){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen==2||"查看红包".equals(tokenLen)){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen==3||"查看红包".equals(tokenLen)){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen>=4||"查看红包".equals(tokenLen)){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen>=4||"查看红包".equals(tokenLen)){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1||"查看红包".equals(sub.length())){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen==2||tokenLen==3){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1||sub.length()==3){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen==3||tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen>=4||tokenLen==3){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen>=4||tokenLen==3){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen==0||tokenLen==3){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+synchronized(this){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+}
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+synchronized(this){
 rule=new TextField(Calendar.MONTH,shortMonths);
+}
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+synchronized(this){
 rule=new TextField(Calendar.MONTH,months);
+}
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub!=null&&sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V15/6389/pattern-ver1-serial/src.org.ohmage.conditionevaluator.comparator.SingleChoiceDataPointComparator.java-lessThan.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+if(rules.isEmpty()){
+rules=null;
+}
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
+if(rules.isEmpty()){
+rules=null;
+}
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+if(sub.isEmpty()){
+sub=null;
+}
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:26:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen<0||tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()<0||sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen<0||tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen<0||tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen<0||tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen<0||tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen==2||tokenLen==0){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen==3||tokenLen==0){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen>=4||tokenLen==0){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen>=4||tokenLen==0){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen==0||tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1||sub.length()==0){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen==0||tokenLen>9){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen==2||tokenLen>9){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen==3||tokenLen>9){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen>=4||tokenLen>9){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen>=4||tokenLen>9){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1||sub.length()>9){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+token+" -u "+symbols);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+token+" -u "+rules);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+token+" -u "+ERAs);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+token+" -u "+AmPmStrings);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+token+" -u "+months);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:27:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+token+" -u "+shortMonths);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+token+" -u "+weekdays);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+token+" -u "+shortWeekdays);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+token+" -u "+length);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1&&sub.length()<4000000){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen==0&&tokenLen<4000000){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen==3&&tokenLen<4000000){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen==2&&tokenLen<4000000){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen>=4&&tokenLen<4000000){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen>=4&&tokenLen<4000000){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
-rule=new CharacterLiteral(sub.charAt(0));
+rule=new CharacterLiteral(sub==null?null:sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
-String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+String[] shortMonths=symbols.getShortMonths();
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/730/pattern-ver1-serial/src.main.java.edu.diary.repository.jdbc.JdbcModuleRepositoryImpl.java-getAll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
-String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+String[] shortMonths=symbols.getShortMonths();
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/730/pattern-ver1-serial/src.main.java.edu.diary.repository.jdbc.JdbcModuleRepositoryImpl.java-getAll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
-String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+String[] months=symbols.getMonths();
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/730/pattern-ver1-serial/src.main.java.edu.diary.repository.jdbc.JdbcModuleRepositoryImpl.java-getAll.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:28:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+indexRef[0]=i;
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
+indexRef[0]=i;
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+indexRef[0]=i;
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+indexRef[0]=i;
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+indexRef[0]=i;
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+indexRef[0]=i;
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+indexRef[0]=i;
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
+indexRef[0]=i;
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+indexRef[0]=i;
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+indexRef[0]=i;
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/7028/pattern-ver1-serial/src.main.java.lc.server.StargateConnection.java-thinkSpinUp.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen==3&&tokenLen!=9999){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen==2&&tokenLen!=9999){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(tokenLen>=4&&tokenLen!=9999){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen>=4&&tokenLen!=9999){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(tokenLen==0&&tokenLen!=9999){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1&&sub.length()!=9999){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(1>0&&sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(3>0&&tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(2>0&&tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(4>0&&tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
-if(tokenLen>=4){
+if(4>0&&tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
+if(0>0&&tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
-rule=new CharacterLiteral(sub.charAt(0));
+rule=new CharacterLiteral(sub!=null?sub.charAt(0):null);
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:29:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+rule=TwoDigitMonthField.INSTANCE;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rule=TwoDigitMonthField.INSTANCE;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+rule=TwoDigitMonthField.INSTANCE;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+rule=TwoDigitMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+rule=TwoDigitMonthField.INSTANCE;
 }else {
 if(tokenLen==2){
+rule=TwoDigitMonthField.INSTANCE;
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+rule=TwoDigitMonthField.INSTANCE;
 }
+rule=TwoDigitMonthField.INSTANCE;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+rule=TwoDigitMonthField.INSTANCE;
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rule=TwoDigitMonthField.INSTANCE;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+rule=UnpaddedMonthField.INSTANCE;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rule=UnpaddedMonthField.INSTANCE;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 2, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub==null||sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1012/pattern-ver1-serial/common.buildcraft.robotics.StationIndex.java-equals.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+assert (sub!=null):"Appointments day is not allowed to be null!";
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+assert (shortMonths!=null):"Appointments day is not allowed to be null!";
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+assert (sub!=null):"Appointments day is not allowed to be null!";
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+assert (months!=null):"Appointments day is not allowed to be null!";
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+assert (shortMonths!=null):"Appointments day is not allowed to be null!";
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+assert (rules!=null):"Appointments day is not allowed to be null!";
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
+assert (rules!=null):"Appointments day is not allowed to be null!";
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
+assert (symbols!=null):"Appointments day is not allowed to be null!";
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+assert (ERAs!=null):"Appointments day is not allowed to be null!";
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
+assert (ERAs!=null):"Appointments day is not allowed to be null!";
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+if(sub.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:30:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Collections;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
+Collections.sort(rules,Collections.reverseOrder());
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/4441/pattern-ver1-serial/recruiting-core.src.main.java.it.f2informatica.core.model.builder.ConsultantModelBuilder.java-withExperiencesIn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.Collections;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+Collections.sort(rules,Collections.reverseOrder());
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/4441/pattern-ver1-serial/recruiting-core.src.main.java.it.f2informatica.core.model.builder.ConsultantModelBuilder.java-withExperiencesIn.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+synchronized(this){
 rule=new CharacterLiteral(sub.charAt(0));
+}
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/4122/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.impl.DefaultRecord.java-invalidateValueCache.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+if(tokenLen>7){
+throw new RuntimeException("Sorry, it is impossible to determine what number it is in canonical form if base is larger than 7. \n Use rational fraction or sequence representation.");
+}
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4557/pattern-ver1-serial/p-adic.src.main.java.vvk.numbers.PAdic.java-PAdic.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+rule=selectNumberRule(Calendar.SECOND,tokenLen);
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+rule=selectNumberRule(Calendar.SECOND,tokenLen);
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/6394/pattern-ver1-serial/src.com.withiter.frame.MainFrame.java-loadDatas.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V22/5555/pattern-ver1-serial/src.main.java.TeamRoots.Goetia.client.gui.GuiFocus.java-mouseReleased.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rule=selectNumberRule(Calendar.SECOND,tokenLen);
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V23/6741/pattern-ver1-serial/core.src.main.java.org.jahia.modules.external.ExternalSessionImpl.java-move.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:31:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+rule=new TextField(Calendar.MONTH,shortMonths);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+rule=new TextField(Calendar.MONTH,shortMonths);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
-rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
-rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+rule=new TextField(Calendar.MONTH,shortMonths);
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+rule=new TextField(Calendar.MONTH,months);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
-rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/1794/pattern-ver1-serial/src.com.olympicat.scheduleupdates.DataFactory.java-loadData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+if(token.equals("")){
+token="Manchester United FC";
+}
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V11/4958/pattern-ver1-serial/FootballScores.app.src.main.java.barqsoft.footballscores.widget.ScoresWidgetIntentService.java-onHandleIntent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+if(tokenLen==3){
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/5647/pattern-ver1-serial/src.worms.model.statements.Print.java-executeStatement.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/2664/pattern-ver1-serial/src.main.java.micdoodle8.mods.galacticraft.planets.asteroids.entities.EntityGrapple.java-EntityGrapple.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+rule=selectNumberRule(Calendar.SECOND,tokenLen);
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/1266/pattern-ver1-serial/catroid.src.org.catrobat.catroid.livewallpaper.LiveWallpaper.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+if(tokenLen<=0){
+tokenLen=1;
+}
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rule=selectNumberRule(Calendar.SECOND,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+rule=selectNumberRule(Calendar.SECOND,tokenLen);
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+rule=selectNumberRule(Calendar.SECOND,tokenLen);
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:32:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/4215/pattern-ver1-serial/Mage.Server.src.main.java.mage.server.TableController.java-joinTournament.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+rule=selectNumberRule(Calendar.SECOND,tokenLen);
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+rule=selectNumberRule(Calendar.SECOND,tokenLen);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.io.File;
+
+import java.util.HashSet;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/3878/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.jobs.backupscheduler.UploadExecutor.java-doUpload.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3904/pattern-ver1-serial/src.heartbeat.TachySyringe.java-Use.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException("Illegal pattern component: "+"\""+token+"\"");
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4748/pattern-ver1-serial/exportLibraries.vnxe.src.main.java.com.emc.storageos.vnxe.requests.FileSystemListRequest.java-getByFSName.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/3822/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.activities.ProfileActivity.java-SetupNewUserProfile.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
+indexRef[0]=i*2;
 String token=parseToken(mPattern,indexRef);
-i=indexRef[0];
+i=indexRef[0]*2;
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
+try{
 rules.add(rule);
+}finally{
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
+}
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5562/pattern-ver1-serial/httplite.src.main.java.alexclin.httplite.impl.ProgressRequestBody.java-writeTo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 1, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+rule=new TextField(Calendar.MONTH,shortMonths);
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+rule=selectNumberRule(Calendar.YEAR,tokenLen);
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+rule=selectNumberRule(Calendar.HOUR,tokenLen);
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3545/pattern-ver1-serial/components.device-mgt.org.wso2.carbon.device.mgt.core.src.main.java.org.wso2.carbon.device.mgt.core.operation.mgt.dao.impl.CommandOperationDAOImpl.java-deleteOperation.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+String loc="Illegal pattern component: "+token;
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
-throw new IllegalArgumentException("Illegal pattern component: "+token);
+throw new IllegalArgumentException(loc);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:33:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
-rule=TwoDigitMonthField.INSTANCE;
-}else {
 rule=UnpaddedMonthField.INSTANCE;
+}else {
+rule=TwoDigitMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen==2){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen==3){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5972/pattern-ver1-serial/core.src.com.ru.tgra.assignment2.CannonGame.java-touchUp.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen==2){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
+if(tokenLen>=4){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5972/pattern-ver1-serial/core.src.com.ru.tgra.assignment2.CannonGame.java-touchUp.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
-if(tokenLen>=4){
+if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
+if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/5972/pattern-ver1-serial/core.src.com.ru.tgra.assignment2.CannonGame.java-touchUp.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
-rule=selectNumberRule(Calendar.MINUTE,tokenLen);
+rule=selectNumberRule(Calendar.MINUTE-1,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
-rule=selectNumberRule(Calendar.MINUTE,tokenLen);
+rule=selectNumberRule(Calendar.MINUTE,tokenLen-1);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
-rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
+rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH-1,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
-rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rule=selectNumberRule(Calendar.YEAR-1,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
-rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rule=selectNumberRule(Calendar.YEAR,tokenLen-1);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
-rule=new TextField(Calendar.MONTH,months);
+rule=new TextField(Calendar.MONTH-1,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
-rule=new TextField(Calendar.ERA,ERAs);
+rule=new TextField(Calendar.ERA-1,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/7554/pattern-ver1-serial/src.rush.hour.Board.java-getGoalTiles.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+rule=new TextField(Calendar.MONTH,shortMonths);
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
+List<Rule> t=rules;
+rules=null;
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
-return rules;
+return t;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/5100/pattern-ver1-serial/CityGenJava.src.gameObjects.player.Player.java-drop.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 1, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
+import java.util.LinkedList;
+
+import java.util.List;
+
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+rule=new TextField(Calendar.MONTH,shortMonths);
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+rule=new TextField(Calendar.MONTH,shortMonths);
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/5/pattern-ver1-serial/week04.src.UCodeGeneratorListener.java-exitIf_stmt.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 2, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+rule=new CharacterLiteral(sub.charAt(0));
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+rule=new CharacterLiteral(sub.charAt(0));
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+ERAs[i]+="_"+Integer.toString(i);
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6433/pattern-ver1-serial/src.main.java.com.outbrain.NLP_processor.java-create_important_words_array.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+AmPmStrings[i]+="_"+Integer.toString(i);
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6433/pattern-ver1-serial/src.main.java.com.outbrain.NLP_processor.java-create_important_words_array.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+months[i]+="_"+Integer.toString(i);
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V36/6433/pattern-ver1-serial/src.main.java.com.outbrain.NLP_processor.java-create_important_words_array.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
+if(rule!=selectNumberRule(Calendar.MILLISECOND,tokenLen)){
 rules.add(rule);
+}
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/878/pattern-ver1-serial/rdt.org.eclipse.ptp.rdt.sync.ui.src.org.eclipse.ptp.rdt.sync.ui.properties.EnvManagerPropertiesPage.java-cfgChanged.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 3, INS : 0, DEL : 5
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+if(sub.startsWith("\r\n")){
+sub=sub.substring(2);
+}
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+if(sub.startsWith("\r\n")){
+sub=sub.substring(2);
+}
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
-rule=selectNumberRule(Calendar.YEAR,tokenLen);
-}else {
 rule=TwoDigitYearField.INSTANCE;
+}else {
+rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
-rule=new TextField(Calendar.MONTH,shortMonths);
+if(tokenLen==2){
+rule=TwoDigitMonthField.INSTANCE;
+}else {
+rule=UnpaddedMonthField.INSTANCE;
+}
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:34:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
-rule=new TextField(Calendar.MONTH,months);
+if(tokenLen==3){
+rule=new TextField(Calendar.MONTH,shortMonths);
+}else {
+if(tokenLen==2){
+rule=TwoDigitMonthField.INSTANCE;
+}else {
+rule=UnpaddedMonthField.INSTANCE;
+}
+}
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/5622/pattern-ver1-serial/src.main.java.com.github.randoapp.adapter.RandoPairsAdapter.java-initData.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 8, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+if(token.startsWith("+")){
+token=token.substring(1);
+}
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/820/pattern-ver1-serial/src.com.iotracks.iofabric.utils.configuration.Configuration.java-setConfig.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
-}else {
-if(tokenLen==2){
-rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
-}
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
-}else {
-rule=UnpaddedMonthField.INSTANCE;
-}
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
+}
+if(rules==null||rule==null){
+throw new NullPointerException();
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
+if(weekdays==null||shortWeekdays==null){
+throw new NullPointerException();
+}
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
+if(shortWeekdays==null||weekdays==null){
+throw new NullPointerException();
+}
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+if(weekdays==null||shortWeekdays==null){
+throw new NullPointerException();
+}
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+if(shortWeekdays==null||weekdays==null){
+throw new NullPointerException();
+}
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+if(token.contains("phpreturn")){
+token=token.replace("php","php\n");
+}
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V39/2350/pattern-ver1-serial/src.main.java.ru.andyskvo.main.Main.java-main.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+boolean succeeded=false;
 i=indexRef[0];
 int tokenLen=token.length();
+if(!succeeded){
+return null;
+}
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+succeeded=true;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+boolean succeeded=false;
 i=indexRef[0];
 int tokenLen=token.length();
+if(!succeeded){
+return null;
+}
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+succeeded=true;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+boolean succeeded=false;
 i=indexRef[0];
 int tokenLen=token.length();
+if(!succeeded){
+return null;
+}
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+succeeded=true;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+boolean succeeded=false;
 i=indexRef[0];
 int tokenLen=token.length();
+if(!succeeded){
+return null;
+}
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
+succeeded=true;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
-}else {
-if(tokenLen==3){
-rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+if(tokenLen==3){
+rule=new TextField(Calendar.MONTH,shortMonths);
+}else {
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/4240/pattern-ver1-serial/app.src.main.java.com.extenprise.mapp.service.activity.AppointmentDetailsActivity.java-gotResponse.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
-rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rule=new TextField(Calendar.MONTH,months);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
-rule=new TextField(Calendar.MONTH,months);
+rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+boolean haveBreadCrumbs=false;
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+haveBreadCrumbs=true;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1&&haveBreadCrumbs){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+boolean haveBreadCrumbs=false;
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+haveBreadCrumbs=true;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1&&haveBreadCrumbs){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+boolean haveBreadCrumbs=false;
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+haveBreadCrumbs=true;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1&&haveBreadCrumbs){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+boolean haveBreadCrumbs=false;
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
+haveBreadCrumbs=true;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1&&haveBreadCrumbs){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+boolean haveBreadCrumbs=false;
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+haveBreadCrumbs=true;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1&&haveBreadCrumbs){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+boolean haveBreadCrumbs=false;
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+haveBreadCrumbs=true;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1&&haveBreadCrumbs){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+boolean haveBreadCrumbs=false;
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+haveBreadCrumbs=true;
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1&&haveBreadCrumbs){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:35:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+boolean haveBreadCrumbs=false;
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1&&haveBreadCrumbs){
 rule=new CharacterLiteral(sub.charAt(0));
+haveBreadCrumbs=true;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+boolean haveBreadCrumbs=false;
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
+haveBreadCrumbs=true;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
-if(sub.length()==1){
+if(sub.length()==1&&haveBreadCrumbs){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 4, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+if(tokenLen==2){
+rule=TwoDigitMonthField.INSTANCE;
+}else {
+rule=UnpaddedMonthField.INSTANCE;
+}
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
-rule=new CharacterLiteral(sub.charAt(0));
-}else {
 rule=new StringLiteral(sub);
+}else {
+rule=new CharacterLiteral(sub.charAt(0));
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V38/3134/pattern-ver1-serial/app.src.main.java.ru.vif2ne.ui.MainActivity.java-refreshBottomMenu.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
+if(tokenLen<0){
+tokenLen--;
+}
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+if(c<0){
+c--;
+}
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2288/pattern-ver1-serial/src.fr.jules_cesar.Loto.main.java-onEnable.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
-rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/4615/pattern-ver1-serial/org.smartsnip.src.org.smartsnip.client.TagArea.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
-rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 8, INS : 0, DEL : 3
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+if(months[i]==null){
+throw new IllegalArgumentException("Failed to get an icon for "+rules.getClass().getName());
+}
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/995/pattern-ver1-serial/libtech.RenderLightmap.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+if(weekdays[i]==null){
+throw new IllegalArgumentException("Failed to get an icon for "+rules.getClass().getName());
+}
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V38/995/pattern-ver1-serial/libtech.RenderLightmap.java-renderWorldBlock.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 0, INS : 11, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
+if(symbols==null||rules==null||ERAs==null){
+return null;
+}
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
+if(ERAs==null||rules==null||symbols==null){
+return null;
+}
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
+if(symbols==null||rules==null||AmPmStrings==null){
+return null;
+}
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
+if(ERAs==null||rules==null||AmPmStrings==null){
+return null;
+}
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
+if(ERAs==null||rules==null||AmPmStrings==null){
+return null;
+}
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
+if(symbols==null||rules==null||months==null){
+return null;
+}
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
+if(symbols==null||rules==null||shortMonths==null){
+return null;
+}
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/1000/pattern-ver1-serial/common.crazypants.enderio.machine.crusher.CrusherRecipeManager.java-addRecipe.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
+}else {
+if(tokenLen>=4){
+rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
+rule=TwoDigitYearField.INSTANCE;
+}
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+}else {
+if(tokenLen>=4){
+rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
+rule=TwoDigitYearField.INSTANCE;
+}
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
-rule=selectNumberRule(Calendar.YEAR,tokenLen);
+rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
-rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
+rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
-rule=new TextField(Calendar.MONTH,months);
+rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
-rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
+rule=new TextField(Calendar.MONTH,months);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/3709/pattern-ver1-serial/src.main.java.jfxtras.labs.scene.layout.GridPane.java-apply.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
+if(tokenLen<3){
+tokenLen=3;
+}
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+if(c<3){
+c=3;
+}
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/5504/pattern-ver1-serial/components.insight.SRC.org.openmicroscopy.shoola.util.image.geom.Factory.java-magnifyImage.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:36:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
-indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/5667/pattern-ver1-serial/src.AccessorBean.java-onPageLoaded.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 8, INS : 0, DEL : 4
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:38:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+}
+if(tokenLen>=4){
+rule=selectNumberRule(Calendar.YEAR,tokenLen);
+}else {
+rule=TwoDigitYearField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:38:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+}
 }
+if(tokenLen>=4){
+rule=selectNumberRule(Calendar.YEAR,tokenLen);
+}else {
+rule=TwoDigitYearField.INSTANCE;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
+long startTime=System.currentTimeMillis();
 rule=new StringLiteral(sub);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:38:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
+long startTime=System.currentTimeMillis();
 rule=new CharacterLiteral(sub.charAt(0));
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
+long startTime=System.currentTimeMillis();
 rule=new TextField(Calendar.MONTH,shortMonths);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
+long startTime=System.currentTimeMillis();
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
+long startTime=System.currentTimeMillis();
 rule=new TextField(Calendar.MONTH,months);
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
+long startTime=System.currentTimeMillis();
 rule=UnpaddedMonthField.INSTANCE;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
+long startTime=System.currentTimeMillis();
 rule=TwoDigitMonthField.INSTANCE;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
+long startTime=System.currentTimeMillis();
 rule=TwoDigitYearField.INSTANCE;
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
+long startTime=System.currentTimeMillis();
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
+long startTime=System.currentTimeMillis();
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
+if(AmPmStrings==null){
+AmPmStrings=new String[0];
+}
+if(ERAs==null){
+ERAs=new String[0];
+}
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2884/pattern-ver1-serial/components.user-mgt.org.wso2.carbon.user.mgt.workflow.src.main.java.org.wso2.carbon.user.mgt.workflow.userstore.UpdateRoleUsersWFRequestHandler.java-startUpdateRoleUsersFlow.pattern
MATCHLEVEL : ALL
ALL : 14, UPD : 0, INS : 14, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
+if(sub.length()==1){
+rule=new CharacterLiteral(sub.charAt(0));
+}else {
+rule=new StringLiteral(sub);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
+}
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/2878/pattern-ver1-serial/src.main.java.de.webfilesys.FileLinkSelector.java-selectFiles.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 0, INS : 1, DEL : 14
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
-}else {
-if(tokenLen==3){
-rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
-}
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
-}else {
-if(tokenLen==3){
-rule=new TextField(Calendar.MONTH,shortMonths);
-}else {
-if(tokenLen==2){
-rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
-}
-}
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V54/1742/pattern-ver1-serial/obdalib-protege41.src.main.java.it.unibz.krdb.obda.protege4.gui.action.R2RMLImportAction.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
-}else {
-if(tokenLen==3){
-rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
-if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
-}else {
-rule=UnpaddedMonthField.INSTANCE;
-}
-}
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
-if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
-}else {
-if(tokenLen==2){
-rule=TwoDigitMonthField.INSTANCE;
-}else {
-rule=UnpaddedMonthField.INSTANCE;
-}
-}
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/2602/pattern-ver1-serial/src.com.github.norbo11.game.poker.PokerPlayer.java-bet.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 17, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
+indexRef[28]=(byte)0x88;
+indexRef[29]=0x58;
+indexRef[30]=0x01;
+indexRef[31]=0x00;
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V16/2015/pattern-ver1-serial/src.info.dreamingfish123.wavetransdemo.MainActivity.java-writeWaveFile.pattern
MATCHLEVEL : ALL
ALL : 17, UPD : 0, INS : 17, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+if(tokenLen==3){
+rule=new TextField(Calendar.MONTH,shortMonths);
+}else {
+if(tokenLen==2){
+rule=TwoDigitMonthField.INSTANCE;
+}else {
+rule=UnpaddedMonthField.INSTANCE;
+}
+}
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 1, DEL : 17
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+}else {
+if(tokenLen==3){
+rule=new TextField(Calendar.MONTH,shortMonths);
+}else {
+if(tokenLen==2){
+rule=TwoDigitMonthField.INSTANCE;
 }else {
+rule=UnpaddedMonthField.INSTANCE;
+}
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+}
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 1, DEL : 17
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
+}else {
+if(tokenLen==3){
+rule=new TextField(Calendar.MONTH,shortMonths);
+}else {
+if(tokenLen==2){
+rule=TwoDigitMonthField.INSTANCE;
 }else {
+rule=UnpaddedMonthField.INSTANCE;
+}
+}
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 1, DEL : 17
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
+if(token.substring(11,19).equals("00:00:00")){
+token=token.substring(0,11)+"23:59:59"+token.substring(19);
+}
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2015/V27/2005/pattern-ver1-serial/dspace-oai.src.main.java.org.dspace.xoai.filter.DateUntilFilter.java-buildSolrQuery.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 18, DEL : 0
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
+if(tokenLen==3){
+rule=new TextField(Calendar.MONTH,shortMonths);
+}else {
+if(tokenLen==2){
+rule=TwoDigitMonthField.INSTANCE;
+}else {
+rule=UnpaddedMonthField.INSTANCE;
+}
+}
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
-}else {
-if(tokenLen==3){
-rule=new TextField(Calendar.MONTH,shortMonths);
-}else {
-if(tokenLen==2){
-rule=TwoDigitMonthField.INSTANCE;
 }else {
-rule=UnpaddedMonthField.INSTANCE;
-}
-}
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1562/pattern-ver1-serial/assignment6.src.assignment6.TicketClient.java-run.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 0, INS : 1, DEL : 17
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
+if(tokenLen>=4){
+rule=new TextField(Calendar.MONTH,months);
+}else {
+if(tokenLen==3){
+rule=new TextField(Calendar.MONTH,shortMonths);
+}else {
+if(tokenLen==2){
+rule=TwoDigitMonthField.INSTANCE;
+}else {
+rule=UnpaddedMonthField.INSTANCE;
+}
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
+}
+}
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
 if(tokenLen==0){
 break;
 }
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
+if(tokenLen>=4){
+rule=new TextField(Calendar.MONTH,months);
+}else {
+if(tokenLen==3){
+rule=new TextField(Calendar.MONTH,shortMonths);
+}else {
+if(tokenLen==2){
+rule=TwoDigitMonthField.INSTANCE;
+}else {
+rule=UnpaddedMonthField.INSTANCE;
+}
+}
+}
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 26, UPD : 0, INS : 1, DEL : 25
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_38_buggy/src/java/org/apache/commons/lang3/time/FastDateFormat.java[571,698]
------------Candidate---------------
 protected List<Rule> parsePattern(){
 DateFormatSymbols symbols=new DateFormatSymbols(mLocale);
 List<Rule> rules=new ArrayList<Rule>();
 String[] ERAs=symbols.getEras();
 String[] months=symbols.getMonths();
 String[] shortMonths=symbols.getShortMonths();
 String[] weekdays=symbols.getWeekdays();
 String[] shortWeekdays=symbols.getShortWeekdays();
 String[] AmPmStrings=symbols.getAmPmStrings();
 int length=mPattern.length();
 int[] indexRef=new int[1];
 for(int i=0;i<length;i++){
 indexRef[0]=i;
 String token=parseToken(mPattern,indexRef);
 i=indexRef[0];
 int tokenLen=token.length();
-if(tokenLen==0){
-break;
-}
 Rule rule;
 char c=token.charAt(0);
 switch (c){
 case 'G' :
 
 rule=new TextField(Calendar.ERA,ERAs);
 break;
 case 'y' :
 
 if(tokenLen>=4){
 rule=selectNumberRule(Calendar.YEAR,tokenLen);
 }else {
 rule=TwoDigitYearField.INSTANCE;
 }
 break;
 case 'M' :
 
 if(tokenLen>=4){
 rule=new TextField(Calendar.MONTH,months);
 }else {
 if(tokenLen==3){
 rule=new TextField(Calendar.MONTH,shortMonths);
 }else {
 if(tokenLen==2){
 rule=TwoDigitMonthField.INSTANCE;
 }else {
 rule=UnpaddedMonthField.INSTANCE;
 }
 }
 }
 break;
 case 'd' :
 
 rule=selectNumberRule(Calendar.DAY_OF_MONTH,tokenLen);
 break;
 case 'h' :
 
 rule=new TwelveHourField(selectNumberRule(Calendar.HOUR,tokenLen));
 break;
 case 'H' :
 
 rule=selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen);
 break;
 case 'm' :
 
 rule=selectNumberRule(Calendar.MINUTE,tokenLen);
 break;
 case 's' :
 
 rule=selectNumberRule(Calendar.SECOND,tokenLen);
 break;
 case 'S' :
 
 rule=selectNumberRule(Calendar.MILLISECOND,tokenLen);
 break;
 case 'E' :
 
 rule=new TextField(Calendar.DAY_OF_WEEK,tokenLen<4?shortWeekdays:weekdays);
 break;
 case 'D' :
 
 rule=selectNumberRule(Calendar.DAY_OF_YEAR,tokenLen);
 break;
 case 'F' :
 
 rule=selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH,tokenLen);
 break;
 case 'w' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_YEAR,tokenLen);
 break;
 case 'W' :
 
 rule=selectNumberRule(Calendar.WEEK_OF_MONTH,tokenLen);
 break;
 case 'a' :
 
 rule=new TextField(Calendar.AM_PM,AmPmStrings);
 break;
 case 'k' :
 
 rule=new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY,tokenLen));
 break;
 case 'K' :
 
 rule=selectNumberRule(Calendar.HOUR,tokenLen);
 break;
 case 'z' :
 
 if(tokenLen>=4){
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.LONG);
 }else {
 rule=new TimeZoneNameRule(mTimeZone,mTimeZoneForced,mLocale,TimeZone.SHORT);
 }
 break;
 case 'Z' :
 
 if(tokenLen==1){
 rule=TimeZoneNumberRule.INSTANCE_NO_COLON;
 }else {
 rule=TimeZoneNumberRule.INSTANCE_COLON;
 }
 break;
 case '\'' :
 
 String sub=token.substring(1);
 if(sub.length()==1){
 rule=new CharacterLiteral(sub.charAt(0));
 }else {
 rule=new StringLiteral(sub);
 }
 break;
 default :
 
 throw new IllegalArgumentException("Illegal pattern component: "+token);
 }
 rules.add(rule);
 }
 return rules;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/1030/pattern-ver1-serial/components.scifio.src.loci.formats.in.AVIReader.java-readChunk.pattern
MATCHLEVEL : ALL
ALL : 33, UPD : 5, INS : 0, DEL : 28
Failing Tests:[org.apache.commons.lang3.time.FastDateFormatTest::testLang538, org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple]
---------START : 2019.09.06 AD at 20:39:21 CDT
---------TIME : 2019.09.07 AD at 01:39:21 CDT
--------------- END -----------------
Current failed test : org.apache.commons.lang3.time.StopWatchTest::testStopWatchSimple | 2019.09.07 AD at 01:39:21 CDT
Finish : lang-38 > patch : 0 | Start : Fri Sep 06 20:39:21 CDT 2019 | End : 2019.09.07 AD at 01:39:35 CDT
