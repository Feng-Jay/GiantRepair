Repair : lang_1
Current failed test : org.apache.commons.lang3.math.NumberUtilsTest::TestLang747 | 2019.09.04 AD at 09:18:01 CDT
Location : org.apache.commons.lang3.math.NumberUtils.createNumber:[462, 463, 467, 468, 471, 474, 451, 454, 458, 459, 460, 461, 466]#0.5
Compute Candidate : 2019.09.04 AD at 09:18:44 CDT - 2019.09.04 AD at 13:07:42 CDT , PNumber : 11390, CandNumber : 551 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+continue;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:07:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:07:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
-int pfxLen=0;
+ int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:07:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
- final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
+ String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V15/2219/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.client.impl.MemberImpl.java-getBooleanAttribute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:07:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>1){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:07:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>1){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:07:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>1){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5133/pattern-ver1-serial/app.src.main.java.com.bignerdranch.android.photogallery.PhotoGalleryFragment.java-onPostExecute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:07:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>=0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>=16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>=8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/3225/pattern-ver1-serial/src.org.peg4d.ParserContext.java-beginPeformStat.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+return null;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str!=null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&pfxLen<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ final long hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/3496/pattern-ver1-serial/teavm-classlib.src.main.java.org.teavm.classlib.java.lang.TAbstractStringBuilder.java-append.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.startsWith(pfx,0)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3557/pattern-ver1-serial/src.main.java.com.jetbrains.jetpad.vclang.term.expr.sort.Level.java-prettyPrint.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+break;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ final float hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/6860/pattern-ver1-serial/hazelcast.src.main.java.com.hazelcast.map.impl.eviction.MaxSizeChecker.java-isEvictablePerPartition.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=str.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/79/pattern-ver1-serial/src.main.java.com.brxt.service.impl.ReportManagerImpl.java-getFinanceCheckList.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+str);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+hex_prefixes);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+pfxLen);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/174/pattern-ver1-serial/src.main.java.fr.novia.zaproxyplugin.ZAProxy.java-setUpAuthenticationMethod.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits<16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits<8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen<0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3672/pattern-ver1-serial/src.edu.miamioh.cse283.htw.Room.java-shoot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits!=16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits!=8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen!=0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/71/pattern-ver1-serial/src.edu.stanford.nlp.mt.decoder.feat.base.TranslationModelFeaturizer.java-ruleFeaturize.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+return 0;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2131/pattern-ver1-serial/src.nl.dobots.bluenet.extended.structs.BleDeviceList.java-compare.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ final Integer hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
-int pfxLen=0;
+Integer pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7237/pattern-ver1-serial/Project.src.main.java.util.AdjacencyList.java-kruskal.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ final int hexDigits=str.length()-2;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/1120/pattern-ver1-serial/src.main.java.com.pratilipi.data.util.PratilipiDataUtil.java-updatePratilipiStats.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.startsWith(pfx,pfxLen)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:08:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
- final int decPos=str.indexOf('.');
+ final int decPos=str.indexOf('.',pfxLen);
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
- final int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e',pfxLen)+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
- final int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+str.indexOf('E',pfxLen)+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V16/6746/pattern-ver1-serial/controllersvc.src.main.java.com.emc.storageos.vplexcontroller.VPlexDeviceController.java-deleteStorageView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(pfxLen)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V56/5031/pattern-ver1-serial/demos.src.main.java.com.datatorrent.demos.adsdimension.GenericApplication.java-populateDAG.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>3){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>3){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>3){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5511/pattern-ver1-serial/core.src.com.trumandeyoung.sprouts.GameRenderer.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.contains(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-performFiltering.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.startsWith(pfx,2)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2170/pattern-ver1-serial/tool.jtag.src.main.java.nl.lxtreme.ols.tool.jtag.JTAGDataSet.java-reportJTAGTdiData.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return pfxLen;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
+return pfxLen;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
+return pfxLen;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
-return d;
+return pfxLen;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/6794/pattern-ver1-serial/java.src.main.java.net.auxesia.Population.java-getPopulation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(!Character.isDigit(lastChar)&&pfxLen!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/5499/pattern-ver1-serial/src.dao.PublicationDAO.java-listComents.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<mant.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2288/pattern-ver1-serial/src.view.GamePanel.java-GamePanel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,mant.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2288/pattern-ver1-serial/src.view.GamePanel.java-GamePanel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
- final String numeric=str.substring(0,str.length()-1);
+ final String numeric=str.substring(0,mant.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2288/pattern-ver1-serial/src.view.GamePanel.java-GamePanel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&expPos<mant.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V21/2288/pattern-ver1-serial/src.view.GamePanel.java-GamePanel.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>7){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/5728/pattern-ver1-serial/bundles.binding.org.openhab.binding.insteonhub.src.java.org.openhab.binding.insteonhub.internal.hardware.api.serial.InsteonHubSerialTransport.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>7){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/5728/pattern-ver1-serial/bundles.binding.org.openhab.binding.insteonhub.src.java.org.openhab.binding.insteonhub.internal.hardware.api.serial.InsteonHubSerialTransport.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>7){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/5728/pattern-ver1-serial/bundles.binding.org.openhab.binding.insteonhub.src.java.org.openhab.binding.insteonhub.internal.hardware.api.serial.InsteonHubSerialTransport.java-run.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
-String mant;
+ final String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ final String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ final String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/7209/pattern-ver1-serial/bundles.org.eclipse.emf.emfstore.client.ui.src.org.eclipse.emf.emfstore.internal.client.ui.views.historybrowserview.graph.PlotCommitProvider.java-getColorsForBranch.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=1;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:09:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=-1;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
- final Float f=createFloat(str);
+ Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
- final Double d=createDouble(str);
+ Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
-String mant;
+ String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
-String dec;
+ String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
-String exp;
+ String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
-int pfxLen=0;
+ int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
-int numDecimals=0;
+ int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
- final int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
- final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+ boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2615/pattern-ver1-serial/Android.src.org.droidplanner.android.proxy.mission.MissionProxy.java-getFirstWaypoint.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return null;
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=0;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V64/1097/pattern-ver1-serial/plugins.de.ovgu.featureide.core.mpl.src.de.ovgu.featureide.core.mpl.signature.javadoc.AJavaDocCommentMerger.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str.trim())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.startsWith(pfx.trim())){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=2;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V14/4298/pattern-ver1-serial/anglewyrm.src.BlockHouse.java-addBlockToTown.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=3;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V4/3200/pattern-ver1-serial/app.src.main.java.com.example.jarvus.tummybuddy.DisplayMenuActivity.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str.trim();
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/7448/pattern-ver1-serial/DODO.src.Parser.Parser.java-setAddAttributes.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(pfxLen==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5778/pattern-ver1-serial/src.main.java.cn.momia.mapi.api.AbstractIndexApi.java-getBanners.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
+pfxLen++;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+pfxLen++;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
+numDecimals++;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/297/pattern-ver1-serial/app.src.main.java.org.team2635.scoutnetclient.fragments.StrategyInfoFragment.java-getData.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
+pfxLen++;
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/6147/pattern-ver1-serial/src.system.ResultPathCompare.java-main.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:10:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
+pfxLen++;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+pfxLen++;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+pfxLen++;
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+pfxLen++;
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
+pfxLen--;
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+pfxLen--;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
+numDecimals--;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/5173/pattern-ver1-serial/ejb_modules.EJB-timetable.src.main.java.be.vubrooster.ejb.managers.EHBActivityManager.java-loadActivitiesForClassRooms.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
+pfxLen--;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+pfxLen--;
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return (Number)createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return 0;
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str.toLowerCase()+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/2848/pattern-ver1-serial/src.main.java.fraglab.school.typeahead.TypeAheadDaoImpl.java-findMatchingStreetNames.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=10;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkDarkPact.java-SlarkDarkPact.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return -1;
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/5579/pattern-ver1-serial/src.utils.Controls.java-getCommand.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return -createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=100;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.TemplarAssassinRefraction.java-TemplarAssassinRefraction.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>=16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>=16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>=8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>=8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>=str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:11:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>=16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>=8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>=0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>=16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>=0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>=8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V41/6622/pattern-ver1-serial/src.cpsc599.assets.Level.java-collide.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str.toUpperCase();
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V7/4456/pattern-ver1-serial/src.main.java.com.codegen.model.ColumnDefinition.java-setDbColumnIdentifier.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=0.0;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/4063/pattern-ver1-serial/playgrounds.agarwalamit.src.main.java.playground.agarwalamit.mixedTraffic.plots.LinkPersonInfoContainer.java-updateAvailableLinkSpace.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return pfxLen;
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
-return createLong(str);
+return pfxLen;
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
-return createLong(numeric);
+return pfxLen;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return pfxLen;
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return pfxLen;
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
-return createBigInteger(str);
+return pfxLen;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(numeric);
+return pfxLen;
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
-return createBigDecimal(numeric);
+return pfxLen;
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(str);
+return pfxLen;
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
-return createBigDecimal(str);
+return pfxLen;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6187/pattern-ver1-serial/device-manager.core.src.main.java.org.dc.bco.manager.device.core.AbstractDeviceFactory.java-newInstance.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite(pfxLen++)||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/2359/pattern-ver1-serial/rocketmq-store.src.main.java.com.alibaba.rocketmq.store.ha.HAService.java-doWaitTransfer.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger((str).toLowerCase());
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank((str).toLowerCase())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.startsWith((pfx).toLowerCase())){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return 1;
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(pfxLen==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/4897/pattern-ver1-serial/src.main.java.de.axxepta.oxygen.utils.WorkspaceUtils.java-newResourceOrOverwrite.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(pfxLen==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/4897/pattern-ver1-serial/src.main.java.de.axxepta.oxygen.utils.WorkspaceUtils.java-newResourceOrOverwrite.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
-if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+if(!(d.isInfinite()||(pfxLen==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/4897/pattern-ver1-serial/src.main.java.de.axxepta.oxygen.utils.WorkspaceUtils.java-newResourceOrOverwrite.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:12:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(pfxLen<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1&&pfxLen<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V2/4567/pattern-ver1-serial/18-Map.LunchList.src.apt.tutorial.RestaurantHelper.java-onUpgrade.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
-int pfxLen=0;
+float pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ final float hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/7403/pattern-ver1-serial/src.structures.CountryCompetition.java-searchUsableComp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ final float hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
-int numDecimals=0;
+float numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/7403/pattern-ver1-serial/src.structures.CountryCompetition.java-searchUsableComp.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=700;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.ability.SlarkPounce.java-SlarkPounce.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return (Number)(createInteger(str));
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
+while(true){
+
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=800;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/6884/pattern-ver1-serial/src.main.java.us.sharknet.dota.model.item.RecipeManta.java-RecipeManta.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str.equals(null)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(!StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(!str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("\n"+str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7482/pattern-ver1-serial/src.com.perl5.lang.perl.idea.editor.PerlEnterHandlerDelegate.java-preprocessEnter.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+if(pfx.length()!=0){
 pfxLen+=pfx.length();
+}
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7542/pattern-ver1-serial/gde-backend.src.main.java.com.nagarro.gde.persistence.model.UserSpecialization.java-populateAreaOfSpecialization.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str.isEmpty()){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ @SuppressWarnings("UnusedAssignment") int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
- final Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
- final Double d=createDouble(str);
+ @SuppressWarnings("UnusedAssignment") Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ @SuppressWarnings("UnusedAssignment") int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
- final int decPos=str.indexOf('.');
+ @SuppressWarnings("UnusedAssignment") int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
- final Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ @SuppressWarnings("UnusedAssignment") int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
- final int decPos=str.indexOf('.');
+ @SuppressWarnings("UnusedAssignment") int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
- final Double d=createDouble(str);
+ @SuppressWarnings("UnusedAssignment") Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ @SuppressWarnings("UnusedAssignment") int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
- final Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
- final Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:13:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ @SuppressWarnings("UnusedAssignment") int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
- final Double d=NumberUtils.createDouble(numeric);
+ @SuppressWarnings("UnusedAssignment") Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
- final Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ @SuppressWarnings("UnusedAssignment") int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
- final Float f=NumberUtils.createFloat(numeric);
+ @SuppressWarnings("UnusedAssignment") Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
- final Double d=createDouble(str);
+ @SuppressWarnings("UnusedAssignment") Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ @SuppressWarnings("UnusedAssignment") int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
- final Double d=NumberUtils.createDouble(numeric);
+ @SuppressWarnings("UnusedAssignment") Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
- final Double d=createDouble(str);
+ @SuppressWarnings("UnusedAssignment") Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ @SuppressWarnings("UnusedAssignment") int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
- final String numeric=str.substring(0,str.length()-1);
+ @SuppressWarnings("UnusedAssignment") String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
- final Float f=createFloat(str);
+ @SuppressWarnings("UnusedAssignment") Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ @SuppressWarnings("UnusedAssignment") int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
- final String numeric=str.substring(0,str.length()-1);
+ @SuppressWarnings("UnusedAssignment") String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
- final Double d=createDouble(str);
+ @SuppressWarnings("UnusedAssignment") Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/3416/pattern-ver1-serial/mobile.src.main.java.com.harlie.radiotheater.radiomysterytheater.data_helper.LoadRadioTheaterTablesAsyncTask.java-loadEpisodes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+if(hex_prefixes!=null){
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1943/pattern-ver1-serial/app.src.main.java.br.com.battista.myoffers.controller.OfferController.java-saveOfferInDatabase.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+if(!(f.isInfinite()||(f.floatValue()+pfxLen==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+if(!pfx.isEmpty()){
 pfxLen+=pfx.length();
+}
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/1755/pattern-ver1-serial/src.main.java.com.salesforce.phoenix.compile.StatementContext.java-StatementContext.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(str!=null){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/4672/pattern-ver1-serial/main.src.main.java.com.example.wduello.collectionmanager.ItemListFragment.java-onCreate.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str)&0xff;
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
+mant=str+": ";
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V59/1370/pattern-ver1-serial/src.main.java.net.jeebiss.spazz.Spazz.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+pfxLen=1000;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(true){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(true){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(true){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(true){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(true){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(true){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str)==false){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.startsWith(pfx)==false){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
+if(str!=null){
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
+}
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(pfx!=null){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V34/4078/pattern-ver1-serial/com.profidatagroup.e4.advancedlaunch.src.ch.parisi.e4.advancedlaunch.tabs.LaunchTab.java-editLaunchConfiguration.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=0xEfffffff&(pfx.length());
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/1711/pattern-ver1-serial/src.main.java.com.ociweb.pronghorn.ring.RingWriter.java-writeBytes.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:14:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16/2){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>8/2){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>0/2){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/7651/pattern-ver1-serial/src.net.vicp.lylab.utils.cache.CacheContainer.java-exec.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
+int a=0;
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
+int a=0;
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
+int a=0;
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+int a=0;
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+int a=0;
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+int a=0;
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+int a=0;
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+int a=0;
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(str!=null){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/691/pattern-ver1-serial/us.textrade.models.MatchesQueue.java-addTradeToQueue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(pfx!=null){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/691/pattern-ver1-serial/us.textrade.models.MatchesQueue.java-addTradeToQueue.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
+String OUTSTRING="";
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
+String OUTSTRING="";
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+String OUTSTRING="";
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+String OUTSTRING="";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
+String OUTSTRING="";
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+String OUTSTRING="";
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+String OUTSTRING="";
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+String OUTSTRING="";
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:15:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
+if(str.isEmpty()){
+return null;
+}
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
+if(str.isEmpty()){
+return null;
+}
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(pfx.isEmpty()){
+return null;
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(str.isEmpty()){
+return null;
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+if(str.isEmpty()){
+return null;
+}
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+if(pfx.isEmpty()){
+return null;
+}
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+if(str.isEmpty()){
+return null;
+}
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(Double.isNaN(hexDigits)){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(Double.isNaN(hexDigits)){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(Double.isNaN(pfxLen)){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/1622/pattern-ver1-serial/src.mckay.utilities.staticlibraries.StringMethods.java-getDoubleInScientificNotation.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str)==true){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.startsWith(pfx)==true){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+if(dec==null&&exp==null&&(pfxLen=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/4897/pattern-ver1-serial/src.main.java.de.axxepta.oxygen.utils.WorkspaceUtils.java-newResourceOrOverwrite.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
+int indexSelection=0;
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+int indexSelection=0;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
+int indexSelection=0;
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
+str="";
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V39/1830/pattern-ver1-serial/SR03.src.java.controler.ActionQuestion.java-doGet.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(pfx.equals("sounds")){
+continue;
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=pfxLen+pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2052/pattern-ver1-serial/cg.cg.GTSurferMove.java-drawFactor.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:16:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=(pfx.length()/1000);
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4121/pattern-ver1-serial/app.src.main.java.followmeapp.followme.Route.java-add_point.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
+int a=1;
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
+int a=1;
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+int a=1;
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
+int a=1;
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+int a=1;
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+int a=1;
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+int a=1;
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
+boolean pfx=true;
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
+boolean hexDigits=true;
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
+boolean StringUtils=true;
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
- final int expPos=str.indexOf('e')+str.indexOf('E')+1;
+ final int expPos=str.indexOf('e')+pfxLen+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/4130/pattern-ver1-serial/view.ProgramLoop.java-createNewUser.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
+ final int hexDigits=str.length()/2-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V10/384/pattern-ver1-serial/src.com.gmail.zhou1992228.building.BuildingEntity.java-getMidPos.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
+boolean b=true;
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
+boolean b=true;
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
+boolean b=true;
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+boolean b=true;
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+boolean b=true;
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+boolean b=true;
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+boolean b=true;
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=pfx.length()+1;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
+if(str.isEmpty()){
+return hexDigits;
+}
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:17:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
+if(str.isEmpty()){
+return d;
+}
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
+if(str.isEmpty()){
+return f;
+}
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/6812/pattern-ver1-serial/src.main.java.wslf.homemoviebase.logic.Worker.java-parseTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(pfx==null){
+continue;
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(str==null){
+continue;
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+if(pfx==null){
+continue;
+}
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
+if(str==null){
+return null;
+}
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
+if(str==null){
+return null;
+}
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(pfx==null){
+return null;
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(str==null){
+return null;
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
+if(str==null){
+return null;
+}
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+if(pfx==null){
+return null;
+}
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+if(str==null){
+return null;
+}
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
+if(str==null){
+return null;
+}
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
+if(str==null){
+return null;
+}
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
+if(str==null){
+return null;
+}
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+if(!allZeros){
+throw new NumberFormatException("マージ対象のファイルが一つも見つかりませんでした。");
+}
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/4688/pattern-ver1-serial/src.org.teachothers.fishwatchr.CommentList.java-merge.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str.isEmpty()){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
 }
+if(str==null){
+return null;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
+}
+if(str==null){
+return null;
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
+}
+if(str==null){
+return null;
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
+if(str==null){
+return null;
+}
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V45/2972/pattern-ver1-serial/app.src.main.java.com.nealyi.app.activity.UserProfileActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:18:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+}
+if(mant==null){
+return null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
+}
+if(mant==null){
+return null;
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/4291/pattern-ver1-serial/src.ar.edu.it.itba.pdc.Implementations.proxy.client.ProxyClientSelectorProtocol.java-handleWrite.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
+if("index".equals(str)){
+return 0;
+}
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
+if("index".equals(str)){
+return 0;
+}
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if("index".equals(pfx)){
+return 0;
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if("index".equals(str)){
+return 0;
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+if("index".equals(pfx)){
+return 0;
+}
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
+if("index".equals(str)){
+return 0;
+}
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
+if("index".equals(str)){
+return 0;
+}
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+if("index".equals(str)){
+return 0;
+}
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+if("index".equals(str)){
+return 0;
+}
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+return null;
+}
+if("&null".equals(str)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
+if("&null".equals(hex_prefixes)){
+return null;
+}
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+if("&null".equals(pfxLen)){
+return null;
+}
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
+if("&null".equals(lastChar)){
+return null;
+}
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(!(str==null)){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V20/5193/pattern-ver1-serial/IJC_UI.src.nl.detoren.ijc.ui.view.Hoofdscherm.java-updateUpdateStandButton.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16||hexDigits==Long.MIN_VALUE){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>8||hexDigits==Long.MIN_VALUE){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>0||pfxLen==Long.MIN_VALUE){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/7087/pattern-ver1-serial/BDEBase.src.main.java.gr.demokritos.iit.base.util.Utils.java-extractYearMonthDayLiteral.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+StringUtils vis=new StringUtils();
+if(vis.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/6385/pattern-ver1-serial/app.src.main.java.commdgriest.httpsgithub.wimk.Inventory.java-searchByName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
+NumberUtils vis=new NumberUtils();
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
- final Float f=NumberUtils.createFloat(numeric);
+ final Float f=vis.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V5/6385/pattern-ver1-serial/app.src.main.java.commdgriest.httpsgithub.wimk.Inventory.java-searchByName.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
+assert (str!=null);
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
+assert (str!=null);
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+assert (pfx!=null);
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:19:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+assert (str!=null);
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
+assert (str!=null);
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+assert (pfx!=null);
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+assert (str!=null);
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+assert (str!=null);
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
+assert (str!=null);
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
+assert (!str.isEmpty());
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+assert (!pfx.isEmpty());
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+assert (!str.isEmpty());
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
+assert (!str.isEmpty());
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(pfx.contains(pfx)){
+return null;
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+if(pfx.contains(pfx)){
+return null;
+}
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+if(str.contains(str)){
+return null;
+}
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V43/6402/pattern-ver1-serial/src.edu.calpoly.android.imfree.DataStore.java-trueAddParseFriend.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
 }
+mant=str;
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/1092/pattern-ver1-serial/app.src.main.java.dimitris.android.chessviews.Square.java-setPiece.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+if(pfx!=null){
+pfxLen+=pfx.length();
+break;
+}
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(pfx!=null){
+if(str.startsWith(pfx)){
+pfxLen+=pfx.length();
+break;
+}
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+if(str!=null){
+ final int hexDigits=str.length()-pfxLen;
+if(hexDigits>16){
+return createBigInteger(str);
+}
+if(hexDigits>8){
+return createLong(str);
+}
+return createInteger(str);
+}
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+if(str!=null){
+if(str==null){
+return null;
+}
+if(StringUtils.isBlank(str)){
+throw new NumberFormatException("A blank string is not a valid number");
+}
+ final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
+int pfxLen=0;
+for(String pfx : hex_prefixes){
+if(str.startsWith(pfx)){
+pfxLen+=pfx.length();
+break;
+}
+}
+if(pfxLen>0){
+ final int hexDigits=str.length()-pfxLen;
+if(hexDigits>16){
+return createBigInteger(str);
+}
+if(hexDigits>8){
+return createLong(str);
+}
+return createInteger(str);
+}
+ final char lastChar=str.charAt(str.length()-1);
+String mant;
+String dec;
+String exp;
+ final int decPos=str.indexOf('.');
+ final int expPos=str.indexOf('e')+str.indexOf('E')+1;
+int numDecimals=0;
+if(decPos>-1){
+if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
+dec=str.substring(decPos+1);
+}
+mant=str.substring(0,decPos);
+numDecimals=dec.length();
+}else {
+if(expPos>-1){
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+mant=str.substring(0,expPos);
+}else {
+mant=str;
+}
+dec=null;
+}
+if(!Character.isDigit(lastChar)&&lastChar!='.'){
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
+}else {
+exp=null;
+}
+ final String numeric=str.substring(0,str.length()-1);
+ final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+switch (lastChar){
+case 'l' :
+
+case 'L' :
+
+if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
+try{
+return createLong(numeric);
+}catch(NumberFormatException nfe){
+}
+return createBigInteger(numeric);
+}
+throw new NumberFormatException(str+" is not a valid number.");
+case 'f' :
+
+case 'F' :
+
+try{
+ final Float f=NumberUtils.createFloat(numeric);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
+}catch(NumberFormatException nfe){
+}
+case 'd' :
+
+case 'D' :
+
+try{
+ final Double d=NumberUtils.createDouble(numeric);
+if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
+return d;
+}
+}catch(NumberFormatException nfe){
+}
+try{
+return createBigDecimal(numeric);
+}catch(NumberFormatException e){
+}
+default :
+
+throw new NumberFormatException(str+" is not a valid number.");
+}
+}
+if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
+}else {
+exp=null;
+}
+if(dec==null&&exp==null){
+try{
+return createInteger(str);
+}catch(NumberFormatException nfe){
+}
+try{
+return createLong(str);
+}catch(NumberFormatException nfe){
+}
+return createBigInteger(str);
+}
+ final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
+try{
+if(numDecimals<=7){
+ final Float f=createFloat(str);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
+}
+}catch(NumberFormatException nfe){
+}
+try{
+if(numDecimals<=16){
+ final Double d=createDouble(str);
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+return d;
+}
+}
+}catch(NumberFormatException nfe){
+}
+return createBigDecimal(str);
+}
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(str!=null){
+if(str.startsWith(pfx)){
+pfxLen+=pfx.length();
+break;
+}
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
 }
+if(str.contains(str)){
+return null;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/6336/pattern-ver1-serial/app.src.main.java.com.example.martin.nextflight.managers.FileManager.java-addFlight.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
+if(pfxLen==0){
+return null;
+}
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
+if(pfxLen==0){
+return null;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
 }
+if(pfxLen==0){
+return null;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+}
+if(numDecimals==0){
+return null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:20:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
+assert (!pfx.isEmpty());
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getOptionalStringArrayParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+StringUtils utils=new StringUtils();
+if(utils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V26/5772/pattern-ver1-serial/RunQuery.src.retrieWin.PatternBuilder.Aju.java-runBootStrapforEntityAndNER.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
+NumberUtils utils=new NumberUtils();
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
- final Float f=NumberUtils.createFloat(numeric);
+ final Float f=utils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V26/5772/pattern-ver1-serial/RunQuery.src.retrieWin.PatternBuilder.Aju.java-runBootStrapforEntityAndNER.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
+NumberUtils utils=new NumberUtils();
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
- final Double d=NumberUtils.createDouble(numeric);
+ final Double d=utils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V26/5772/pattern-ver1-serial/RunQuery.src.retrieWin.PatternBuilder.Aju.java-runBootStrapforEntityAndNER.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 1, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str.trim())){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
-return createBigInteger(str);
+return createBigInteger(str.trim());
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
-return createLong(str);
+return createLong(str.trim());
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
-return createInteger(str);
+return createInteger(str.trim());
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
-return createLong(str);
+return createLong(str.trim());
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
-return createBigInteger(str);
+return createBigInteger(str.trim());
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
- final Float f=createFloat(str);
+ final Float f=createFloat(str.trim());
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
- final Double d=createDouble(str);
+ final Double d=createDouble(str.trim());
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
-return createInteger(str);
+return createInteger(str.trim());
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
-return createBigDecimal(str);
+return createBigDecimal(str.trim());
 }

PATTERN : /home/jiajun/GithubData/2015/V19/7016/pattern-ver1-serial/ClassApplication.src.main.java.com.exam.ViewExamAnsAction.java-performBaseAction.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
+assert (hexDigits!=str.length()-pfxLen);
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+assert (pfxLen!=0);
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
+assert (numDecimals!=0);
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/3232/pattern-ver1-serial/src.main.java.com.about.java.controllers.MainController.java-mainpage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
+mant=str;
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
-mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V23/4769/pattern-ver1-serial/android.src.main.java.com.baebae.reactnativecamera.cameralib.ui.CameraPreviewLayout.java-setFlash.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 1, DEL : 3
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
+assert (hex_prefixes!=null);
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V33/4564/pattern-ver1-serial/app.src.main.java.com.squirrel.justrread.api.RedditAPI.java-checkIfSubscribed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=-1;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+pfxLen++;
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=-1;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
+pfxLen++;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=-1;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+pfxLen++;
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=-1;
 break;
 }
+pfxLen++;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=-1;
+pfxLen++;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:21:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=-1;
 break;
 }
 }
+pfxLen++;
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
+import java.util.List;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
+if(hex_prefixes==null){
+return null;
+}
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/4697/pattern-ver1-serial/src.main.java.chbachman.armour.items.armour.logic.LPUpgradeLogic.java-damageArmour.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
+assert (pfx!=null);
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+assert (pfx!=null);
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+assert (str!=null);
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+assert (str!=null);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+assert (str!=null);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(pfx.isEmpty()){
+throw new NumberFormatException("Title must not be empty!");
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+if(str.isEmpty()){
+throw new NumberFormatException("Title must not be empty!");
+}
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
+if(str.isEmpty()){
+throw new NumberFormatException("Title must not be empty!");
+}
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
+if(str.isEmpty()){
+throw new NumberFormatException("Title must not be empty!");
+}
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
+}
+if(str.isEmpty()){
+throw new NumberFormatException("Title must not be empty!");
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
+}
+if(str.isEmpty()){
+throw new NumberFormatException("Title must not be empty!");
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
+import java.awt.List;
+
+import java.util.*;
+
+import java.awt.geom.Arc2D;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+}
+if(mant.equals(null)){
+return null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V40/2100/pattern-ver1-serial/ExpressionCalculator.ExpressionCalculator.java-recursiveReduce.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16||"查看红包".equals(hexDigits)){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>8||"查看红包".equals(hexDigits)){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>0||"查看红包".equals(pfxLen)){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16||hexDigits==3){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>8||hexDigits==3){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>0||pfxLen==3){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V30/1380/pattern-ver1-serial/Cluedo.src.control.Player.java-validMove.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(pfx==null){
+throw new NumberFormatException("player is not initialised, game might not be started");
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+if(str==null){
+throw new NumberFormatException("player is not initialised, game might not be started");
+}
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:22:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(str==null){
+throw new NumberFormatException("player is not initialised, game might not be started");
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str!=null&&str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5865/pattern-ver1-serial/gde-webapp.src.main.java.com.nagarro.gde.validator.UserInternaturValidator.java-validateRequiredData.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+pfxLen+=pfx.length();
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/2049/pattern-ver1-serial/src.railwaystation.infrastructure.Train.java-informAboutExternalDelay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
+if(pfx.isEmpty()){
+pfx=null;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
+if(str.isEmpty()){
+str=null;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+}
+if(str.isEmpty()){
+str=null;
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
+if(str.isEmpty()){
+str=null;
+}
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
+}
+if(str.isEmpty()){
+str=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
+}
 }
+if(str.isEmpty()){
+str=null;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
+}
 }
+if(str.isEmpty()){
+str=null;
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str==""){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits<0||hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits<0||hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen<0||pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V7/1602/pattern-ver1-serial/src.engine.network.server.ServerClient.java-knowMap.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
+dec=str;
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/1236/pattern-ver1-serial/providers.dynect.src.main.java.org.jclouds.dynect.v3.domain.Zone.java-Zone.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.startsWith(pfx)||str.startsWith("https://")){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/5632/pattern-ver1-serial/components.formats-common.src.loci.common.Location.java-getHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
+if(str.startsWith(pfx)){
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V2/3128/pattern-ver1-serial/src.cubicmadness.gamestates.GameStateManager.java-popCurrentState.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(pfx.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:23:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+if(pfx.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+if(str.trim().isEmpty()){
+throw new NumberFormatException("API username cannot be empty");
+}
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V9/216/pattern-ver1-serial/src.main.java.me.legrange.mikrotik.impl.ApiConnectionImpl.java-login.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.startsWith(pfx)||str.startsWith("$Proxy")){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V12/6211/pattern-ver1-serial/agent-parent.agent.src.main.java.org.glowroot.agent.weaving.WeavingClassFileTransformer.java-ignoreClass.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+numDecimals=dec.length();
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
+numDecimals=dec.length();
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+pfxLen+=pfx.length();
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V22/2622/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.ComputeImageService.java-updateComputeImage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 1, DEL : 4
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if((str!=null)&&(str.startsWith(pfx))){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/4845/pattern-ver1-serial/app.src.main.java.hu.bme.aut.szabolcs.szokol.countryinfo.ui.main.MainActivity.java-onBackPressed.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16||hexDigits==0){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>8||hexDigits==0){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>0||pfxLen==0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/1056/pattern-ver1-serial/lts-admin.src.main.java.com.github.ltsopensource.admin.web.api.SuspendJobQueueApi.java-suspendJobRecovery.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16||hexDigits>9){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>8||hexDigits>9){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>0||pfxLen>9){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/2964/pattern-ver1-serial/main.plugins.org.talend.dataquality.sampling.src.main.java.org.talend.dataquality.datamasking.FunctionApplier.java-generateDuplicate.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+" -u "+str);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+" -u "+hex_prefixes);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(str+" is not a valid number."+" -u "+pfxLen);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/5800/pattern-ver1-serial/tools.gsissh.src.main.java.org.apache.airavata.gsi.ssh.api.job.SlurmJobConfiguration.java-getJobIdMonitorCommand.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>0&&pfxLen<4000000){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16&&hexDigits<4000000){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>8&&hexDigits<4000000){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V28/46/pattern-ver1-serial/raw.master.registryKit.registryKit.registryKit.src.main.java.com.registryKit.survey.surveyManager.java-saveSurveyDocument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:24:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16&&hexDigits!=9999){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>8&&hexDigits!=9999){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>0&&pfxLen!=9999){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5798/pattern-ver1-serial/SONPlugin.src.org.workcraft.plugins.son.granularity.HourMins.java-getHour.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(16>0&&hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(8>0&&hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(0>0&&pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V30/553/pattern-ver1-serial/src.main.java.edu.berkeley.cs.nlp.ocular.main.TrainFont.java-run.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str==null||str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V23/443/pattern-ver1-serial/bundles.opaeum-compilation.org.opaeum.compilation.java.src.org.opaeum.javageneration.bpm.actions.AbstractProtectedNodeBuilder.java-implementCallbackOnComplete.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+if(pfx.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(pfx.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:45 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
 }
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
+}
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
+assert (str!=null):"Appointments day is not allowed to be null!";
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
+assert (str!=null):"Appointments day is not allowed to be null!";
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
+assert (str!=null):"Appointments day is not allowed to be null!";
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:25:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+assert (pfx!=null):"Appointments day is not allowed to be null!";
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+assert (str!=null):"Appointments day is not allowed to be null!";
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
+assert (str!=null):"Appointments day is not allowed to be null!";
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
+assert (str!=null):"Appointments day is not allowed to be null!";
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+assert (pfx!=null):"Appointments day is not allowed to be null!";
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
+assert (str!=null):"Appointments day is not allowed to be null!";
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
+if(pfx.isEmpty()){
+pfx=null;
+}
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
+import java.util.HashSet;
+
+import java.util.Collections;
+
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
+}
+if(str.isEmpty()){
+str=null;
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/6949/pattern-ver1-serial/app.src.main.java.com.peprally.jeremy.peprally.db_models.DBUserProfile.java-removeConversationId.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+if((pfx.length()-2)>=0){
 pfxLen+=pfx.length();
+}
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V14/677/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.VirtualNasServerDataTable.java-VirtualNasServerInfo.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
+if(pfxLen<0){
+pfxLen=0;
+}
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
+if(pfxLen<0){
+pfxLen=0;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
 }
+if(pfxLen<0){
+pfxLen=0;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
+}
+if(numDecimals<0){
+numDecimals=0;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
+if(hexDigits>8){
+return createLong(str);
+}
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
+if(hexDigits>16){
+return createBigInteger(str);
+}
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V11/5689/pattern-ver1-serial/minecraft.net.minecraft.src.BlockCocoaSapling.java-blockActivated.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 1, DEL : 5
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+ final String dropStatement=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+ final String dropStatement=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+ final String dropStatement=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+ final String dropStatement=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(dropStatement);
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V21/6019/pattern-ver1-serial/src.main.java.nz.co.gregs.dbvolution.internal.h2.MultiPoint2DFunctions.java-add.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
-pfxLen+=pfx.length();
+pfxLen+=pfx.length()*2;
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
-numDecimals=dec.length();
+numDecimals=dec.length()*2;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/1126/pattern-ver1-serial/src.game.renderer.Position.java-translate.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
+String loc=str+" is not a valid number.";
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
+String loc=str+" is not a valid number.";
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:26:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+String loc=str+" is not a valid number.";
+throw new NumberFormatException(loc);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+String loc=str+" is not a valid number.";
+throw new NumberFormatException(loc);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
+String loc=str+" is not a valid number.";
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
+String loc=str+" is not a valid number.";
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
+String loc=str+" is not a valid number.";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
+String loc=str+" is not a valid number.";
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+String loc=str+" is not a valid number.";
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException(loc);
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V8/5610/pattern-ver1-serial/app.src.main.java.com.toddburgessmedia.stackoverflowretrofit.MeetupActivity.java-onNext.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 3, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16-1){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
-if(expPos<decPos||expPos>str.length()){
+if(expPos<decPos||expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16-1){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
-if(expPos>str.length()){
+if(expPos>str.length()-1){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16-1){
 return createBigInteger(str);
 }
-if(hexDigits>8){
+if(hexDigits>8-1){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
-if(pfxLen>0){
+if(pfxLen>0-1){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16-1){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16-1){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
-if(decPos>-1){
+if(decPos>-1-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16-1){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
-if(expPos>-1){
+if(expPos>-1-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16-1){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
-if(expPos>-1){
+if(expPos>-1-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
+if(hexDigits>16-1){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
+if(expPos>-1-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V62/5164/pattern-ver1-serial/roguelikeengine-libgdx.src.com.game.libgdx.roguelikeengine.Bullet.java-update.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
-if(StringUtils.isBlank(str)){
+if(StringUtils.isBlank(str)&&!str.equals("全部")){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/6475/pattern-ver1-serial/src.main.java.com.morningsidevc.service.impl.FeedInfoServiceImpl.java-findFeeds.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.startsWith(pfx)&&!pfx.equals("全部")){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V29/6475/pattern-ver1-serial/src.main.java.com.morningsidevc.service.impl.FeedInfoServiceImpl.java-findFeeds.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
-throw new NumberFormatException(str+" is not a valid number.");
+throw new NumberFormatException("source/"+str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V48/6618/pattern-ver1-serial/template.source.Template.java-Template.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:27:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
-if(str==null){
+if(str==null&&!str.equals("")){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
+mant=str.substring(0,decPos);
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
-mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
+mant=str.substring(0,expPos);
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+mant=str.substring(0,decPos);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
+mant=str.substring(0,expPos);
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
+mant=str.substring(0,expPos);
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(str==null){
+return Double.NaN;
+}else {
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
+}
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3795/pattern-ver1-serial/opentripplanner-routing.src.main.java.org.opentripplanner.routing.edgetype.PlainStreetEdge.java-calculateSpeed.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
+mant=str.substring(0,expPos);
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5076/pattern-ver1-serial/src.main.java.org.jsweet.transpiler.StaticInitilializerAnalyzer.java-visitClassDef.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+ final int hexDigits=str.length()-pfxLen;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V28/1365/pattern-ver1-serial/src.main.java.nl.tue.win.vcp.virtualbreitenbergenvironment.model.Environment.java-draw.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 0, INS : 1, DEL : 6
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.startsWith(pfx)&&!StringUtils.equalsIgnoreCase(str,"vpool.rpCopiesJson")){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/29/pattern-ver1-serial/vipr-portal.portal.app.controllers.arrays.BlockVirtualPools.java-error.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(str.startsWith(pfx)){
+pfxLen+=pfx.length();
+break;
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/3655/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.placement.RecoverPointScheduler.java-scheduleStorageSourcePoolConstraint.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
+dec=str.substring(decPos+1);
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
+dec=str.substring(decPos+1);
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(pfx.startsWith("\r\n")){
+pfx=pfx.substring(2);
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:28:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
+if(pfx.startsWith("\r\n")){
+pfx=pfx.substring(2);
+}
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
+if(str.startsWith("/")){
+str=str.substring(1);
+}
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V47/2604/pattern-ver1-serial/components.data-services.org.wso2.carbon.dataservices.core.src.main.java.org.wso2.carbon.dataservices.core.DBDeployer.java-createAxisOperation.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+if(pfxLen<0){
+pfxLen=0;
+}
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
+if(numDecimals<0){
+numDecimals=0;
+}
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V3/5043/pattern-ver1-serial/src.Server.ServerWorld.java-updateObjects.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
-dec=str.substring(decPos+1);
 }
+dec=str.substring(decPos+1);
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/5994/pattern-ver1-serial/repository.src.org.pentaho.platform.repository2.unified.webservices.RepositoryFileTreeAdapter.java-RepositoryFileTreeAdapter.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
+if(str==null||hex_prefixes==null){
+throw new NumberFormatException();
+}
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V44/1218/pattern-ver1-serial/app.src.main.java.net.danielpalma.lineupshaker.DefaultSportDataListener.java-DefaultSportDataListener.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(str==null||pfx==null){
+throw new NumberFormatException();
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2177/pattern-ver1-serial/projects.core.src.main.java.org.quick.core.prop.DefaultExpressionContext.java-withFunction.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:13 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+dec=str.substring(decPos+1);
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
+dec=str.substring(decPos+1);
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
+dec=str.substring(decPos+1);
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/2625/pattern-ver1-serial/app.src.main.java.de.aw.cash.action.FragmentBuchungRegelm.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+dec=str.substring(decPos+1);
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V6/3316/pattern-ver1-serial/core.src.main.java.org.ehcache.spi.ServiceLocator.java-startAllServices.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 1, DEL : 7
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1,expPos);
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
+dec=str.substring(decPos+1,expPos);
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
+dec=str.substring(decPos+1,expPos);
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/6708/pattern-ver1-serial/src.next.i.view.widgets.XFlexTable.java-XFlexTable.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
+dec=str.substring(decPos+1,expPos);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/7429/pattern-ver1-serial/library.src.main.java.com.datatorrent.lib.appdata.qr.processor.AbstractWEQueryQueueManager.java-enqueueHelper.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
+dec=str.substring(decPos+1,expPos);
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/4610/pattern-ver1-serial/StashCache.app.src.main.java.com.geekeclectic.android.stashcache.StashOverviewActivity.java-onActivityResult.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+boolean haveBreadCrumbs=false;
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.startsWith(pfx)&&haveBreadCrumbs){
 pfxLen+=pfx.length();
 break;
 }
+haveBreadCrumbs=true;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+boolean haveBreadCrumbs=false;
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
-if(str.startsWith(pfx)){
+if(str.startsWith(pfx)&&haveBreadCrumbs){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+haveBreadCrumbs=true;
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 3, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+dec=str.substring(decPos+1,expPos);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V18/6417/pattern-ver1-serial/Code.DoubleAuctionWithNetworks.src.doubleAuction.Auction.java-executeSingleTransaction.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
+dec=str.substring(decPos+1,expPos);
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
-dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+dec=str.substring(decPos+1,expPos);
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V66/5994/pattern-ver1-serial/repository.src.org.pentaho.platform.repository2.unified.webservices.RepositoryFileTreeAdapter.java-RepositoryFileTreeAdapter.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 1, DEL : 8
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
-if(decPos>-1){
+if(decPos==-2){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/4193/pattern-ver1-serial/simple-comsumer.src.main.java.com.wxmimperio.simple.consumer.clients.SimpleConsumerAPI.java-init.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 9, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+boolean succeeded=false;
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+if(!succeeded){
+return null;
+}
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+succeeded=true;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+boolean succeeded=false;
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+if(!succeeded){
+return null;
+}
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
+succeeded=true;
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:29:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+boolean succeeded=false;
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+if(!succeeded){
+return null;
+}
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
+succeeded=true;
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
+boolean succeeded=false;
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
+if(!succeeded){
+return null;
+}
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
+succeeded=true;
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V58/1711/pattern-ver1-serial/code.mettle.app.org.mef.framework.utils.ResourceReader.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 9, UPD : 0, INS : 9, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
+exp=str.substring(expPos+1,str.length());
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V4/1884/pattern-ver1-serial/src.java.is.idega.idegaweb.pheidippides.presentation.ParticipantsReport.java-initializeComponent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
+if(hexDigits<0){
+return 0;
+}
+if(hexDigits>=pfxLen){
+return pfxLen-1;
+}
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+if(pfxLen<0){
+return 0;
+}
  final int hexDigits=str.length()-pfxLen;
+if(pfxLen>=hexDigits){
+return hexDigits-1;
+}
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/4307/pattern-ver1-serial/src.structures.MatrixUtilities.java-getColumnGroup.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V67/6439/pattern-ver1-serial/core.src.game.screen.battle.Battle.java-render.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
+ final String numeric=str.substring(0,str.length()-1);
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
- final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V36/2803/pattern-ver1-serial/core.src.main.java.com.orientechnologies.orient.core.index.hashindex.local.OHashTableDirectory.java-deleteWithoutOpen.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
+exp=str.substring(expPos+1,str.length());
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
+exp=str.substring(expPos+1,str.length());
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
+exp=str.substring(expPos+1,str.length());
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length());
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
+exp=str.substring(expPos+1,str.length());
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/1831/pattern-ver1-serial/bitrepository-audit-trail-service.src.main.java.org.bitrepository.audittrails.collector.IncrementalCollector.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
+}
+if(str.endsWith("/")==false){
+str=str+"/";
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V37/627/pattern-ver1-serial/src.main.java.com.thunder.util.Util.java-restMap.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
+ final String numeric=str.substring(0,str.length()-1);
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
- final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V5/1113/pattern-ver1-serial/src.main.java.org.encog.neural.neat.training.NEATTraining.java-crossover.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
+exp=str.substring(expPos+1,str.length());
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
+exp=str.substring(expPos+1,str.length());
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V13/198/pattern-ver1-serial/src.com.bekvon.bukkit.residence.listeners.ResidencePlayerListener.java-onPlayerMove.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
+exp=str.substring(expPos+1,str.length());
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V32/4888/pattern-ver1-serial/core.src.main.java.com.digitalpebble.storm.crawler.bolt.JSoupParserBolt.java-toOutlinks.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 1, DEL : 9
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
+}else {
+if(null==str||str.equals("")){
+mant="null";
 }else {
 mant=str;
+}
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V29/3929/pattern-ver1-serial/modules.andes-core.broker.src.main.java.org.wso2.andes.kernel.disruptor.inbound.QueueInfo.java-QueueInfo.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
+}else {
+if(str.contains("Selected")||str.contains("Deselected")){
+mant="";
 }else {
 mant=str;
+}
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/6027/pattern-ver1-serial/votebox.middle.view.widget.FocusableLabel.java-soundPath.pattern
MATCHLEVEL : ALL
ALL : 11, UPD : 11, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(str==null){
+str="20160101";
+}
+if(pfx==null){
+pfx="20200101";
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+if(pfx==null){
+pfx="20160101";
+}
+if(str==null){
+str="20200101";
+}
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5352/pattern-ver1-serial/GitlabMonitor.src.main.java.org.gitmining.monitor.service.StudentService.java-getStudentEventItem.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 12, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
+if(expPos>-1&&expPos<str.length()-1){
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V11/5250/pattern-ver1-serial/exportLibraries.vplex.src.main.java.com.emc.storageos.vplex.api.VPlexApiVirtualVolumeManager.java-updateVirtualVolumeInfoAfterExpansion.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:30:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
+exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V27/7577/pattern-ver1-serial/networkmonitor.src.main.java.ca.rmen.android.networkmonitor.app.prefs.PreferencesCompat.java-setupActionBar.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
+exp=str.substring(expPos+1,str.length()-1);
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V3/4301/pattern-ver1-serial/api.src.main.java.com.abiquo.api.services.cloud.VirtualMachineService.java-changeVirtualMachineState.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
+try{
+return createInteger(str);
+}catch(NumberFormatException nfe){
+}
+try{
+return createLong(str);
+}catch(NumberFormatException nfe){
+}
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
-try{
-return createInteger(str);
-}catch(NumberFormatException nfe){
-}
-try{
-return createLong(str);
-}catch(NumberFormatException nfe){
-}
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 12, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
+exp=str.substring(expPos+1,str.length()-1);
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/2211/pattern-ver1-serial/src.Model.PlayerModel.java-isAttacking.pattern
MATCHLEVEL : ALL
ALL : 12, UPD : 0, INS : 1, DEL : 11
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2701/pattern-ver1-serial/src.main.java.pers.gwyog.gtveinlocator.items.ItemEliteVeinLocator.java-onItemRightClick.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 1, DEL : 12
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
+long startTime=System.currentTimeMillis();
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
+long startTime=System.currentTimeMillis();
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
+if(hex_prefixes[0]==null){
+hex_prefixes[0]="";
+}
+if(hex_prefixes[1]==null){
+hex_prefixes[1]="";
+}
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/3211/pattern-ver1-serial/src.tk.blackwolf12333.grieflog.listeners.InventoryListener.java-difference.pattern
MATCHLEVEL : ALL
ALL : 16, UPD : 0, INS : 16, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
 return createBigInteger(str);
-}
-if(hexDigits>8){
-return createLong(str);
-}
-return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/5275/pattern-ver1-serial/src.wgutask4.LookupDialog.java-getStudentTypeEntered.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
- final int hexDigits=str.length()-pfxLen;
-if(hexDigits>16){
-return createBigInteger(str);
-}
-if(hexDigits>8){
 return createLong(str);
-}
-return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V25/5275/pattern-ver1-serial/src.wgutask4.LookupDialog.java-getStudentTypeEntered.pattern
MATCHLEVEL : ALL
ALL : 18, UPD : 18, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
+if(numDecimals<=16){
+ final Double d=createDouble(str);
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+return d;
+}
+}
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
+if(numDecimals<=7){
+ final Float f=createFloat(str);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
+}
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
+if(numDecimals<=16){
+ final Double d=createDouble(str);
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+return d;
+}
+}
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
+if(numDecimals<=16){
+ final Double d=createDouble(str);
+if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
+return d;
+}
+}
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
+if(numDecimals<=7){
+ final Float f=createFloat(str);
+if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
+return f;
+}
+}
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 20, UPD : 0, INS : 1, DEL : 19
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
+if(expPos>-1){
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+mant=str.substring(0,expPos);
+}else {
+mant=str;
+}
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
-}else {
-if(expPos>-1){
-if(expPos>str.length()){
-throw new NumberFormatException(str+" is not a valid number.");
-}
-mant=str.substring(0,expPos);
 }else {
-mant=str;
-}
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 0, INS : 1, DEL : 21
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
+}
+if(expPos>-1){
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+mant=str.substring(0,expPos);
+}else {
+mant=str;
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 0, INS : 1, DEL : 21
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
+}
+}
+if(expPos>-1){
+if(expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
 }
+mant=str.substring(0,expPos);
+}else {
+mant=str;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/5429/pattern-ver1-serial/src.com.github.dreamrec.edf.EdfWriter.java-onDataReceived.pattern
MATCHLEVEL : ALL
ALL : 22, UPD : 0, INS : 1, DEL : 21
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
+if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
+dec=str.substring(decPos+1);
+}
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 0, INS : 1, DEL : 31
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
+if(expPos>-1){
+if(expPos<decPos||expPos>str.length()){
+throw new NumberFormatException(str+" is not a valid number.");
+}
+dec=str.substring(decPos+1,expPos);
+}else {
+dec=str.substring(decPos+1);
+}
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V1/6937/pattern-ver1-serial/library.src.main.java.com.reginald.swiperefresh.CustomSwipeRefreshLayout.java-onLayout.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 0, INS : 1, DEL : 31
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
-int numDecimals=0;
-if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
+int numDecimals=0;
+if(decPos>-1){
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
 }
 if(!Character.isDigit(lastChar)&&lastChar!='.'){
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length()-1);
 }else {
 exp=null;
 }
  final String numeric=str.substring(0,str.length()-1);
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 switch (lastChar){
 case 'l' :
 
 case 'L' :
 
 if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
 try{
 return createLong(numeric);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(numeric);
 }
 throw new NumberFormatException(str+" is not a valid number.");
 case 'f' :
 
 case 'F' :
 
 try{
  final Float f=NumberUtils.createFloat(numeric);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }catch(NumberFormatException nfe){
 }
 case 'd' :
 
 case 'D' :
 
 try{
  final Double d=NumberUtils.createDouble(numeric);
 if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
 return d;
 }
 }catch(NumberFormatException nfe){
 }
 try{
 return createBigDecimal(numeric);
 }catch(NumberFormatException e){
 }
 default :
 
 throw new NumberFormatException(str+" is not a valid number.");
 }
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/926/pattern-ver1-serial/apisvc.src.main.java.com.emc.storageos.api.service.impl.resource.FileVirtualPoolService.java-prepareVirtualPool.pattern
MATCHLEVEL : ALL
ALL : 32, UPD : 0, INS : 1, DEL : 31
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:31:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[419,614]
------------Candidate---------------
 public static Number createNumber(String str) throws NumberFormatException{
 if(str==null){
 return null;
 }
 if(StringUtils.isBlank(str)){
 throw new NumberFormatException("A blank string is not a valid number");
 }
  final String[] hex_prefixes={"0x","0X","-0x","-0X","#","-#"};
 int pfxLen=0;
 for(String pfx : hex_prefixes){
 if(str.startsWith(pfx)){
 pfxLen+=pfx.length();
 break;
 }
 }
 if(pfxLen>0){
  final int hexDigits=str.length()-pfxLen;
 if(hexDigits>16){
 return createBigInteger(str);
 }
 if(hexDigits>8){
 return createLong(str);
 }
 return createInteger(str);
 }
  final char lastChar=str.charAt(str.length()-1);
 String mant;
 String dec;
 String exp;
  final int decPos=str.indexOf('.');
  final int expPos=str.indexOf('e')+str.indexOf('E')+1;
 int numDecimals=0;
 if(decPos>-1){
 if(expPos>-1){
 if(expPos<decPos||expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 dec=str.substring(decPos+1,expPos);
 }else {
 dec=str.substring(decPos+1);
 }
 mant=str.substring(0,decPos);
 numDecimals=dec.length();
 }else {
 if(expPos>-1){
 if(expPos>str.length()){
 throw new NumberFormatException(str+" is not a valid number.");
 }
 mant=str.substring(0,expPos);
 }else {
 mant=str;
 }
 dec=null;
-}
-if(!Character.isDigit(lastChar)&&lastChar!='.'){
-if(expPos>-1&&expPos<str.length()-1){
-exp=str.substring(expPos+1,str.length()-1);
-}else {
-exp=null;
-}
- final String numeric=str.substring(0,str.length()-1);
- final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
-switch (lastChar){
-case 'l' :
-
-case 'L' :
-
-if(dec==null&&exp==null&&(numeric.charAt(0)=='-'&&isDigits(numeric.substring(1))||isDigits(numeric))){
-try{
-return createLong(numeric);
-}catch(NumberFormatException nfe){
-}
-return createBigInteger(numeric);
-}
-throw new NumberFormatException(str+" is not a valid number.");
-case 'f' :
-
-case 'F' :
-
-try{
- final Float f=NumberUtils.createFloat(numeric);
-if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
-return f;
-}
-}catch(NumberFormatException nfe){
-}
-case 'd' :
-
-case 'D' :
-
-try{
- final Double d=NumberUtils.createDouble(numeric);
-if(!(d.isInfinite()||(d.floatValue()==0.0&&!allZeros))){
-return d;
-}
-}catch(NumberFormatException nfe){
-}
-try{
-return createBigDecimal(numeric);
-}catch(NumberFormatException e){
-}
-default :
-
-throw new NumberFormatException(str+" is not a valid number.");
-}
 }
 if(expPos>-1&&expPos<str.length()-1){
 exp=str.substring(expPos+1,str.length());
 }else {
 exp=null;
 }
 if(dec==null&&exp==null){
 try{
 return createInteger(str);
 }catch(NumberFormatException nfe){
 }
 try{
 return createLong(str);
 }catch(NumberFormatException nfe){
 }
 return createBigInteger(str);
 }
  final boolean allZeros=isAllZeros(mant)&&isAllZeros(exp);
 try{
 if(numDecimals<=7){
  final Float f=createFloat(str);
 if(!(f.isInfinite()||(f.floatValue()==0.0&&!allZeros))){
 return f;
 }
 }
 }catch(NumberFormatException nfe){
 }
 try{
 if(numDecimals<=16){
  final Double d=createDouble(str);
 if(!(d.isInfinite()||(d.doubleValue()==0.0&&!allZeros))){
 return d;
 }
 }
 }catch(NumberFormatException nfe){
 }
 return createBigDecimal(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V31/1697/pattern-ver1-serial/yamcs-core.src.main.java.org.yamcs.xtceproc.AlarmChecker.java-performAlarmCheckingEnumerated.pattern
MATCHLEVEL : ALL
ALL : 133, UPD : 0, INS : 0, DEL : 133
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:32:00 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.math.NumberUtils.createInteger:[680, 684]#0.4472135954999579
Compute Candidate : 2019.09.04 AD at 13:32:25 CDT - 2019.09.04 AD at 13:38:13 CDT , PNumber : 11326, CandNumber : 56 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str!=null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
+import java.util.regex.Matcher;
+
+import java.util.regex.Pattern;
+
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return Integer.decode(str.trim());
 }

PATTERN : /home/jiajun/GithubData/2016/V27/7877/pattern-ver1-serial/src.com.genomen.ui.cli.ArgumentProcessor.java-parseRequiredSamples.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:20 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return Integer.decode((str).toLowerCase());
 }

PATTERN : /home/jiajun/GithubData/2016/V31/2032/pattern-ver1-serial/src.main.ContaminationDialog.java-onOK.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return Integer.decode((str).toUpperCase());
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7401/pattern-ver1-serial/Model.src.main.java.config.SensorParams.java-SensorParams.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(StringUtils.isEmpty(str)){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V25/130/pattern-ver1-serial/yamj3-core.src.main.java.org.yamj.core.web.HTMLTools.java-replaceHtmlTags.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return null;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/2471/pattern-ver1-serial/src.com.widerwille.afterglow.AfterglowIconProvider.java-getIcon.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:32 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str.equals(null)){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V1/343/pattern-ver1-serial/src.gui.batches.ItemBatchView.java-selectProduct.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str.isEmpty()){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V1/7829/pattern-ver1-serial/app.src.main.java.de.tum.in.tumcampusapp.activities.TransportationDetailsActivity.java-onLoadInBackground.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return Integer.decode(str)&0xff;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/5603/pattern-ver1-serial/uk.ac.herts.SmartLab.XBee.Response.XBeeRx64Response.java-GetReceiveStatus.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(true){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return new Integer(Integer.decode(str));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/2421/pattern-ver1-serial/src.uk.co.quartzcraft.kingdoms.features.kingdom.Kingdom.java-getKing.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return (Integer)Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5127/pattern-ver1-serial/com.buglabs.common.com.buglabs.bug.sysfs.BMIDevice.java-apply.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return 0;
 }

PATTERN : /home/jiajun/GithubData/2016/V12/5321/pattern-ver1-serial/app.src.main.java.edu.gatech.johndoe.carecoordinator.community.UI.CommunityAdapter.java-compare.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return -1;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/5579/pattern-ver1-serial/src.utils.Controls.java-getCommand.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:38:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+int a=0;
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+int a=0;
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return -Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V39/501/pattern-ver1-serial/src.com.nutrons.recyclerush.OI.java-getOperatorJoystickY.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+String OUTSTRING="";
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+String OUTSTRING="";
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str.isEmpty()){
+return 0;
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V3/5856/pattern-ver1-serial/src.main.java.io.aif.associations.builder.ExperimentsConnectionsGraphReducer.java-normalize.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return 1;
 }

PATTERN : /home/jiajun/GithubData/2011/V4/7202/pattern-ver1-serial/client.SurvivalGuide.src.ch.ethz.inf.vs.android.g54.a4.ui.TouchImageView.java-getPointerCount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str.equalsIgnoreCase(null)){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V35/409/pattern-ver1-serial/src.com.wasteofplastic.askyblock.ASkyBlock.java-loadPluginConfig.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+Integer Integer=8;
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V32/2823/pattern-ver1-serial/app.src.main.java.com.scanner.cardreader.BradleyThreshold.java-getHalfOfFrame.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return (Integer)(Integer.decode(str));
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V38/7204/pattern-ver1-serial/src.main.java.sg.edu.nus.cs2103t.omnitask.logic.DataImpl.java-addTask.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+return 0;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V17/3182/pattern-ver1-serial/canal-client.src.main.java.com.tqmall.search.canal.handle.TableSectionHandle.java-runRowChangeAction.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+int a=1;
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+int a=1;
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+boolean b=true;
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+boolean b=true;
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str==null){
+return null;
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5906/pattern-ver1-serial/src.com.apocalyptech.minecraft.xray.MineCraftEnvironment.java-buildImageFromInput.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str==null||str.isEmpty()){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V40/354/pattern-ver1-serial/hapi-fhir-base.src.main.java.ca.uhn.fhir.parser.XmlParser.java-encodeCompositeElementChildrenToStreamWriter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str==null){
+return 0;
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:39:59 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
+}
+if(str==null){
+return 0;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V60/886/pattern-ver1-serial/src.com.inovex.zabbixmobile.activities.BaseSeverityFilterActivity.java-onSeveritySelected.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:02 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+if("index".equals(str)){
+return 0;
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V20/5660/pattern-ver1-serial/plugins.crawloverview-plugin.src.main.java.com.crawljax.plugins.crawloverview.StateWriter.java-getStateNumber.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+return null;
+}
+if("&null".equals(str)){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V14/1018/pattern-ver1-serial/skuldsku-prod.src.main.java.no.steria.skuldsku.recorder.java.serializer.ClassSerializer.java-myAsObject.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+assert (str!=null);
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
+assert (!str.isEmpty());
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V33/3866/pattern-ver1-serial/src.SigmaEC.util.Parameters.java-getBooleanParameter.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str!=null){
+if(str==null){
+return null;
+}
+return Integer.decode(str);
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
+assert (str!=null);
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
+}
+if((Thread.currentThread().interrupted())){
+return 0;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V16/2/pattern-ver1-serial/src.com.grishberg.data.api.MqServer.java-run.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str==null||"查看红包".equals(str)){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:29 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+str=null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V19/4117/pattern-ver1-serial/src.main.java.es.uvigo.esei.compi.gui.SwingDemo.java-compiExecution.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str==null||str==""){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V38/7341/pattern-ver1-serial/log210_webproject_BDD.src.RechercheLivre.java-RechercheLivre.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str==null||str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V35/4704/pattern-ver1-serial/src.main.java.com.alibaba.fastjson.parser.ParserConfig.java-createJavaBeanDeserializer.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str==null||str.trim().isEmpty()){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1097/pattern-ver1-serial/src.bakatxt.core.BakaProcessor.java-editEndTime.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
+import java.util.LinkedList;
+
 public static Integer createInteger(String str){
+Integer pcb=new Integer(str);
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return pcb.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7301/pattern-ver1-serial/src.simulator.FCFSKernel.java-loadProgram.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 1, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
 }
-return Integer.decode(str);
+return str==null?null:Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V57/4622/pattern-ver1-serial/src.soot.shimple.ShimpleMethodSource.java-getBody.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
+return null;
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:50 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
+return null;
+}
+if(str.isEmpty()){
+System.out.println("Team has to have a name");
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V5/1672/pattern-ver1-serial/cli.src.main.java.cz.muni.fi.pa165.fast.cli.TeamCreateCommand.java-argument.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+assert (str!=null):"Appointments day is not allowed to be null!";
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:40:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
+}
+if(str.isEmpty()){
+throw new IllegalArgumentException("Title must not be empty!");
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V55/1109/pattern-ver1-serial/eclipse.src.stoberry.dataManagement.Management.java-sendMessage.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:41:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
 if(str==null){
 return null;
+}
+if(str==null){
+throw new IllegalStateException("Cannot instantiate Page whitout String url constructor parameter or @PageURL class annotation");
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V50/4732/pattern-ver1-serial/src.main.java.com.mgiorda.page.AbstractPage.java-AbstractPage.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:41:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
-if(str==null){
+if(str==null&&!str.equals("")){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V51/6260/pattern-ver1-serial/Client.src.com.way.chat.activity.ChatActivity.java-onItemClick.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 6, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:41:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/math/NumberUtils.java[669,685]
------------Candidate---------------
 public static Integer createInteger(String str){
+if(str.startsWith("\r\n")){
+str=str.substring(2);
+}
 if(str==null){
 return null;
 }
 return Integer.decode(str);
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7437/pattern-ver1-serial/distributed.src.main.java.com.orientechnologies.orient.server.distributed.impl.task.OSyncDatabaseTask.java-onMessage.pattern
MATCHLEVEL : ALL
ALL : 8, UPD : 0, INS : 8, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 13:41:08 CDT
--------------- END -----------------
Location : org.apache.commons.lang3.StringUtils.isBlank:[257, 260, 261, 262]#0.30151134457776363
Compute Candidate : 2019.09.04 AD at 13:41:33 CDT - 2019.09.04 AD at 14:01:12 CDT , PNumber : 11399, CandNumber : 135 
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+continue;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/7570/pattern-ver1-serial/src.main.java.com.rayn.jflask.framework.mvc.MultipartHelper.java-parseMultipartParamList.pattern
MATCHLEVEL : ALL
ALL : 0, UPD : 0, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:01:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
+import java.util.Collections;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
-return false;
+return true;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V2/4457/pattern-ver1-serial/library.src.main.java.com.gh.bmd.jrt.core.DefaultResultChannel.java-isOutputChannelOpen.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:01:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+return false;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/2173/pattern-ver1-serial/hu.bme.mit.viatra.ttc.dse.src.hu.bme.mit.viatra.ttc.dse.DseSolverMain.java-main.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:01:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs!=null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4111/pattern-ver1-serial/tephra-core.src.main.java.co.cask.tephra.snapshot.SnapshotCodecV4.java-encodeInProgress.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:01:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;strLen<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/7268/pattern-ver1-serial/src.org.easypr.core.CharsSegment.java-SortRect.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:01:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<=strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V45/3857/pattern-ver1-serial/src.com.urverkspel.humancompanion.AttackData.java-roll.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:01:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
+import java.util.Collection;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,myUid;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/276/pattern-ver1-serial/actor-sdk.sdk-core.core.core-shared.src.main.java.im.actor.core.viewmodel.GroupVM.java-create.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:01:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,DEFAULT_TIMEOUT2;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V49/3872/pattern-ver1-serial/ui-common.src.main.java.org.exoplatform.selenium.platform.ManageAccount.java-addNewUserAccount.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:01:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i>strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V44/4500/pattern-ver1-serial/src.main.java.com.michael.e.liquislots.item.ItemLiquipack.java-addInformation.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:01:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,MAX_SERVICE_NODES;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V48/4395/pattern-ver1-serial/vipr-portal.com.emc.sa.common.src.java.com.emc.sa.zookeeper.ZkServiceDescriptors.java-start.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:01:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,MAX_ZK_WAIT_RETRY_TIMES;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/7180/pattern-ver1-serial/syssvc.src.main.java.com.emc.storageos.systemservices.impl.vdc.VdcOpHandler.java-waitForAllNodesAndReboot.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:01:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+break;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V38/3005/pattern-ver1-serial/LifeOnLine.src.lol.DateParser.java-getUserInputWithoutDueDate.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:01:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())<=0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V11/4307/pattern-ver1-serial/core.src.com.arkanoid.stm.gameStates.ArkanoidGdx.java-block.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:01:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;i--){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V7/4666/pattern-ver1-serial/src.main.java.com.deanveloper.playtimeplus.commands.playtime.subcommand.TopSubCmd.java-execute.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())>=0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V3/848/pattern-ver1-serial/src.com.mojang.ld22.entity.Slime.java-render.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())!=0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V46/565/pattern-ver1-serial/src.main.java.cloudservices.brokerage.policy.policycommons.model.entities.Policy.java-isValid.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,localLevel;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/1178/pattern-ver1-serial/wrapper.src.main.java.com.ankit.wrapper.Logger.java-w.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())>0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/5819/pattern-ver1-serial/FlawlessEssenceMiner.java-active.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
+import java.util.ArrayList;
+
+import com.sun.javafx.scene.control.behavior.KeyBinding;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;i++,new ArrayList<KeyBinding>()){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/314/pattern-ver1-serial/src.main.java.jfxtras.labs.internal.scene.control.behavior.SixteenSegmentBehavior.java-SixteenSegmentBehavior.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:16 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;strLen++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4470/pattern-ver1-serial/core.src.com.esbjon.inventories.Inventory.java-commandTransferTo.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs.charAt(i))!=false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V26/4543/pattern-ver1-serial/launcher.src.main.java.com.benny.openlauncher.widget.GridAppDrawer.java-readyForDrag.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 1, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,_afterComposeMethodCache;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V6/5922/pattern-ver1-serial/zkbind.src.org.zkoss.bind.BindComposer.java-doAfterCompose.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
+import java.util.List;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,mActions;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/428/pattern-ver1-serial/quickaction.src.main.java.com.imallan.quickaction.QuickActionOnTouchListener.java-onDown.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;i++,new ArrayList<>()){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V43/1043/pattern-ver1-serial/src.main.java.application.controllers.MainController.java-switchScene.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:31 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,mRelationId;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V16/910/pattern-ver1-serial/app.src.main.java.fr.sims.coachingproject.ui.fragment.RelationChatFragment.java-bindView.pattern
MATCHLEVEL : ALL
ALL : 1, UPD : 0, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:35 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=1)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V5/2320/pattern-ver1-serial/mp4.src.main.java.edu.illinois.cs.mapreduce.JobManager.java-updateJobStatus.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:38 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=-1)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V10/2043/pattern-ver1-serial/src.main.java.net.floodlightcontroller.firewall.FirewallRule.java-FirewallRule.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=0)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V32/6155/pattern-ver1-serial/SideScroller.src.net.masterzach32.sidescroller.entity.enemy.Boss.java-Boss.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
-return true;
+return false;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
-return true;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
-return false;
+return true;
 }
 }
-return true;
+return false;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/469/pattern-ver1-serial/src.ac.uk.susx.tag.filter.RegexFilter.java-matchAnnotation.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+i++;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:02:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+strLen++;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
+strLen++;
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V17/4356/pattern-ver1-serial/src.main.java.uk.ac.ebi.pride.spectracluster.cli.SpectraClusterCliMain.java-convertClusters.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+i--;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+strLen--;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
+strLen--;
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V12/965/pattern-ver1-serial/src.Game.java-loop.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=2)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/2316/pattern-ver1-serial/TaskScheduler.src.ApplicationWindow.java-actionPerformed.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+isBlank(cs);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
+isBlank(cs);
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V21/3252/pattern-ver1-serial/care-reporting.commcare-migration.src.main.java.org.motechproject.care.reporting.migration.task.MigrationTask.java-postToMotech.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
-return true;
+return false;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
-return false;
+return true;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/606/pattern-ver1-serial/aws-java-sdk-s3.src.main.java.com.amazonaws.services.s3.internal.BucketNameUtils.java-isValidV2BucketName.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,continentName,countryCode;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V9/6266/pattern-ver1-serial/app.src.main.java.com.hyperion.dashdroid.radio.RadioListFragment.java-refresh.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
-return false;
+return (boolean)(false);
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/1621/pattern-ver1-serial/src.lab4.FileService.FileService.java-readFile.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;strLen<i;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V32/3724/pattern-ver1-serial/Fanorona.java-isPossibleCapturingMove.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
+}
+while(true){
+
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/177/pattern-ver1-serial/flink-addons.flink-streaming.flink-streaming-core.src.main.java.org.apache.flink.streaming.api.streamvertex.StreamVertex.java-invoke.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0,userEmail;i<strLen;i++,i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V15/3912/pattern-ver1-serial/app.src.main.java.finalproject.ee461l.journey.JoinTrip.java-searchForUser.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 0, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
+i++;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:48 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+i++;
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V2/6609/pattern-ver1-serial/src.anonscanlations.downloader.chapter.NicoNicoChapter.java-download.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 1, INS : 1, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=10)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V42/386/pattern-ver1-serial/GlassApp.HackathonPerseusGlass.src.com.github.barcodeeye.scan.ResultsActivity.java-onDetected.pattern
MATCHLEVEL : ALL
ALL : 2, UPD : 2, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
+import java.nio.charset.Charset;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;i++,Charset.forName("UTF-8")){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/3733/pattern-ver1-serial/Code.Part1.src.core.Intraprocedural.java-callgraph.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:03:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+cs=cs;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V1/5893/pattern-ver1-serial/vipr-portal.portal.app.models.datatable.NfsACLDataTable.java-NfsAclInfo.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:00 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
+cs=cs;
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V31/432/pattern-ver1-serial/src.arcane_arcade_menus.MainMenuMenuCreator.java-MainMenuElement.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:03 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(i==4){
+continue;
+}
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V29/5508/pattern-ver1-serial/common.enhancedportals.item.ItemPortalModifierUpgrade.java-getSubItems.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:06 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
+strLen=1000;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V4/3726/pattern-ver1-serial/WeatherService.src.weatherservice.StatisticsCalculator.java-MinWindSpeed.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:09 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs.charAt(i)-1)==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V16/4594/pattern-ver1-serial/EzSignin.app.src.main.java.signin.ez.ezsignin.MainActivity.java-populateFieldsWithRecord.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
+int a=0;
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+int a=0;
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
+int a=0;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+int a=0;
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V24/5087/pattern-ver1-serial/app.src.main.java.ru.alexandersurinov.androidtimereportingsystem.repository.ProjectRepository.java-onFailure.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:24 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
+String OUTSTRING="";
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+String OUTSTRING="";
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+String OUTSTRING="";
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
+String OUTSTRING="";
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/487/pattern-ver1-serial/api.src.main.java.v1.rest.LabelsResource.java-getLabel_XML.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs.charAt(i)*1000)==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V33/3175/pattern-ver1-serial/src.de.fuberlin.wiwiss.d2rq.server.D2RServer.java-describe.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:40 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;){
+i++;
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V22/7304/pattern-ver1-serial/vipr-portal.com.iwave.isa.content.src.java.com.emc.sa.service.vipr.file.tasks.IngestUnmanagedFilesystems.java-ingestInChunks.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 1, DEL : 2
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+ final String emailPattern="[a-zA-Z0-9._-]+@[a-z]+\\.+[a-z]+";
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V44/5976/pattern-ver1-serial/rhymecity.src.main.java.com.fly.firefly.ui.activity.Login.LoginFragment.java-forgotPassword.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+int indexSelection=0;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
+int indexSelection=0;
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/7667/pattern-ver1-serial/Handyboy.src.com.vallverk.handyboy.view.HandyBoyViewFragment.java-updateJobsContainer.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(cs.equals("sounds")){
+continue;
+}
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V49/2569/pattern-ver1-serial/src.main.java.net.dirtydeeds.discordsoundboard.chat.ListCategoriesProcessor.java-handleEvent.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:04:57 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if("Chrome".equals(cs)||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/4219/pattern-ver1-serial/src.browsermator.com.STAppController.java-itemStateChanged.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
+int a=1;
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+int a=1;
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
+int a=1;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+int a=1;
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V25/7434/pattern-ver1-serial/app.src.main.java.hummingbird.android.mobile_app.views.fragments.LibraryFragmentAdapter.java-onFragmentSelected.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+boolean Character=true;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V29/4636/pattern-ver1-serial/core.src.io.github.emergentorganization.cellrpg.input.player.MovementControls.PathDraw.java-process.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:18 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
+boolean b=true;
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:21 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+boolean b=true;
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
+boolean b=true;
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:27 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+boolean b=true;
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V30/6898/pattern-ver1-serial/minijava-compiler-frontend.SamplePrograms.SampleMiniJavaPrograms.QuickSort.java-main.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length()+1)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2011/V1/5032/pattern-ver1-serial/mapreduce.src.contrib.streaming.src.java.org.wikimedia.wikihadoop.StreamWikiDumpInputFormat.java-MyRecordReader.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(cs==null){
+continue;
+}
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/7058/pattern-ver1-serial/datakit.src.main.java.org.md2k.datakit.manager.FileManager.java-getExternalSDCardDirectory.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 0, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
-for(int i=0;i<strLen;i++){
+for(int i=0;i<strLen;Math.abs(i++)){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs.charAt(Math.abs(i)))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:42 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(Math.abs(cs.charAt(i)))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/6264/pattern-ver1-serial/src.main.java.com.metal.fetcher.fetcher.impl.WeiboFetcher.java-getRandomAccount.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())==0-1){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V19/2784/pattern-ver1-serial/src.main.java.org.jboss.pressgang.ccms.server.rest.v1.TopicV1Factory.java-syncDBEntityWithRESTEntitySecondPass.pattern
MATCHLEVEL : ALL
ALL : 3, UPD : 3, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
+return false;
+}
+if(cs==null){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:52 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
+if(cs==null){
+return false;
+}
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V33/244/pattern-ver1-serial/app.src.main.java.net.pilpin.nanodegree_popularmovies.FetchMoviesTask.java-getDataFromJsonMovieList.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:56 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
+}
+if(cs==null){
+return false;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V19/3094/pattern-ver1-serial/scribengin.core.src.main.java.com.neverwinterdp.scribengin.storage.hdfs.sink.HDFSSinkPartitionStreamWriter.java-prepareCommit.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:05:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())+strLen==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V28/3750/pattern-ver1-serial/src.main.java.de.tudarmstadt.awesome.erclaerung.precomputation.LevenshteinStep.java-getAdjustedString.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs.charAt(i)*-1)==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V33/1084/pattern-ver1-serial/Bank.src.entities.Account.java-returnLoan.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 4, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:04 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+assert (cs!=null);
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:07 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+assert (cs!=null);
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V42/2471/pattern-ver1-serial/src.main.java.seedu.taskell.model.task.TaskDate.java-convertMonthIntoInteger.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+if(cs!=null){
+int strLen;
+if(cs==null||(strLen=cs.length())==0){
+return true;
+}
+for(int i=0;i<strLen;i++){
+if(Character.isWhitespace(cs.charAt(i))==false){
+return false;
+}
+}
+return true;
+}
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(cs!=null){
+if(Character.isWhitespace(cs.charAt(i))==false){
+return false;
+}
+}
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V8/384/pattern-ver1-serial/app.src.main.java.com.farfromsober.ffs.activities.LoginActivity.java-onDataParsed.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
+}
+if(strLen==0){
+return false;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/331/pattern-ver1-serial/flink-runtime.src.main.java.org.apache.flink.runtime.operators.hash.ReduceHashTable.java-EntryIterator.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=-1)==0){
 return true;
 }
+strLen++;
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=-1)==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+strLen++;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V34/1212/pattern-ver1-serial/src.main.java.com.sk89q.mclauncher.update.Updater.java-downloadFiles.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 2, INS : 2, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+assert (cs!=null);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
+assert (cs!=null);
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V31/4812/pattern-ver1-serial/graal.com.oracle.graal.nodes.src.com.oracle.graal.nodes.calc.IsNullNode.java-IsNullNode.pattern
MATCHLEVEL : ALL
ALL : 4, UPD : 0, INS : 4, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:34 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:37 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
+JOptionPane.showMessageDialog(null,"No se pudo cargar la canci�n","Error",JOptionPane.ERROR_MESSAGE);
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V30/7753/pattern-ver1-serial/src.entities.Playlist.java-putInMemory.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:41 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs==null?null:cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V31/4299/pattern-ver1-serial/client.synapseJavaClient.src.main.java.org.sagebionetworks.client.SynapseClientImpl.java-uploadToS3FileHandle.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:44 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs!=null?cs.charAt(i):null)==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V2/4302/pattern-ver1-serial/src.com.floreantpos.model.KitchenTicket.java-fromTicket.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 5, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:47 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
+import javax.swing.JOptionPane;
+
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+JOptionPane.showMessageDialog(null,"Uspješno ste odjavljeni sa sistema!","Info",JOptionPane.INFORMATION_MESSAGE);
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/3046/pattern-ver1-serial/Projekat.iTravel.src.main.java.ba.unsa.etf.si.app.iTravel.Forms.Meni.java-OdjaviSe.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:51 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+assert (cs!=null):"Appointments day is not allowed to be null!";
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:54 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+assert (cs!=null):"Appointments day is not allowed to be null!";
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V26/3408/pattern-ver1-serial/tutorfinder.src.main.java.ch.unibe.ese.Tutorfinder.model.Appointment.java-setDay.pattern
MATCHLEVEL : ALL
ALL : 5, UPD : 0, INS : 5, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:06:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
+if(cs==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(cs==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
+}
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
+}
+if(cs==null){
+throw new IllegalStateException("player is not initialised, game might not be started");
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V47/378/pattern-ver1-serial/src.main.java.game.Game.java-extraLife.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:08 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
+}
+if(strLen<0){
+strLen=0;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/4394/pattern-ver1-serial/src.main.java.cloudsync.connector.RemoteGoogleDriveConnector.java-remove.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:11 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
+}
+if(strLen<=0){
+strLen=1;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/1761/pattern-ver1-serial/JazminServer.src.jazmin.core.monitor.DispatcherMonitorAgent.java-sample.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:14 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
+}
+if(cs.getClass().getSimpleName().startsWith("SystemException")){
+return true;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:17 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
+return true;
+}
+if(cs.getClass().getSimpleName().startsWith("SystemException")){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V21/3872/pattern-ver1-serial/sdk.src.main.java.com.amazon.speech.speechlet.verifier.ApplicationIdSpeechletRequestVerifier.java-verify.pattern
MATCHLEVEL : ALL
ALL : 6, UPD : 0, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs.charAt(i))==false||"查看红包".equals(Character.isWhitespace(cs.charAt(i)))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:23 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(!Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V12/6908/pattern-ver1-serial/mainModule.src.backend.building.ProductionBuilding.java-canBuild.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:25 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(true){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:28 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs.charAt(i))==false==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:30 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs.charAt(i))==false&&false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:33 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V41/1184/pattern-ver1-serial/swagplash.src.main.java.com.github.albertosh.swagplash.actions.ApiBodyParamAction.java-call.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:36 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs.charAt(i))==false==true){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:39 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(!Character.isWhitespace(cs.charAt(i))){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V35/7408/pattern-ver1-serial/src.main.java.com.joshuasnider.workspace.InternetIO.XKCDDebugger.java-printMissing.pattern
MATCHLEVEL : ALL
ALL : 7, UPD : 7, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:43 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())==0||"查看红包".equals(cs==null)){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V13/4605/pattern-ver1-serial/app.src.main.java.xyz.monkeytong.hongbao.utils.HongbaoSignature.java-generateSignature.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:46 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())==0||(strLen=cs.length())=='%'){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V5/6049/pattern-ver1-serial/src.main.java.org.wltea.analyzer.core.LaTeXSegmenter.java-addOperatorFormula.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:49 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(i==3){
+System.out.println("debug");
+}
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
+}
+if(i==3){
+System.out.println("debug");
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:53 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+if(strLen==3){
+System.out.println("debug");
+}
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
+}
+if(strLen==3){
+System.out.println("debug");
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V9/4383/pattern-ver1-serial/Dameo.src.dameo.gametree.NegaMax.java-alphaBeta.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 0, INS : 10, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:55 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(true){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V14/6216/pattern-ver1-serial/app.src.main.java.example.com.mpdlcamera.Upload.CustomAdapter.java-getView.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:07:58 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())==0==false){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V61/3764/pattern-ver1-serial/uDig.org.locationtech.udig.processingtoolbox.src.org.locationtech.udig.processingtoolbox.tools.TextfileToPointDialog.java-getTextColumns.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:08:01 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if((strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2012-2014/V8/293/pattern-ver1-serial/src.snpsvm.app.CommandLineApp.java-main.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:08:05 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())==0&&false){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V24/5079/pattern-ver1-serial/Server.src.server.model.players.packets.ClickNPC.java-processPacket.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:08:10 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
+boolean haveBreadCrumbs=false;
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs.charAt(i))==false&&haveBreadCrumbs){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 7, INS : 3, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:08:12 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if(cs==null||(strLen=cs.length())==0==true){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V1/1922/pattern-ver1-serial/app.src.main.java.ch.hsr.edu.sinv_56082.gastroginiapp.ui.activities.menu.ProductListListEditView.java-onClick.pattern
MATCHLEVEL : ALL
ALL : 10, UPD : 10, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:08:15 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
+boolean haveBreadCrumbs=false;
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if(Character.isWhitespace(cs.charAt(i))==false&&haveBreadCrumbs){
 return false;
 }
+haveBreadCrumbs=true;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2015/V25/2313/pattern-ver1-serial/src.main.java.org.ednovo.gooru.client.mvp.folder.toc.FolderTocView.java-setBreadCrumbs.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 7, INS : 6, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:08:19 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
+long startTime=System.currentTimeMillis();
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:08:22 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
+long startTime=System.currentTimeMillis();
 int strLen;
 if(cs==null||(strLen=cs.length())==0){
 return true;
 }
 for(int i=0;i<strLen;i++){
 if(Character.isWhitespace(cs.charAt(i))==false){
 return false;
 }
 }
+long endTime=System.currentTimeMillis();
+long totalTime=endTime-startTime;
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V6/5668/pattern-ver1-serial/Euler.src.Euler20.java-main.pattern
MATCHLEVEL : ALL
ALL : 13, UPD : 0, INS : 13, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:08:26 CDT
--------------- END -----------------
FILE : /home/jiajun/GenPat/artifacts-bak/projects/lang/lang_1_buggy/src/main/java/org/apache/commons/lang3/StringUtils.java[239,266]
------------Candidate---------------
 public static boolean isBlank(CharSequence cs){
 int strLen;
-if(cs==null||(strLen=cs.length())==0){
+if((cs==null)||((strLen=cs.length())==0)){
 return true;
 }
 for(int i=0;i<strLen;i++){
-if(Character.isWhitespace(cs.charAt(i))==false){
+if((Character.isWhitespace(cs.charAt(i)))==(false)){
 return false;
 }
 }
 return true;
 }

PATTERN : /home/jiajun/GithubData/2016/V17/5331/pattern-ver1-serial/src.main.java.groupProject.twentyFortyEight.GameLogic.java-gameOver.pattern
MATCHLEVEL : ALL
ALL : 15, UPD : 15, INS : 0, DEL : 0
Failing Tests:[org.apache.commons.lang3.math.NumberUtilsTest::TestLang747]
---------START : 2019.09.04 AD at 09:18:01 CDT
---------TIME : 2019.09.04 AD at 14:08:29 CDT
--------------- END -----------------
Finish : lang-1 > patch : 0 | Start : Wed Sep 04 09:18:01 CDT 2019 | End : 2019.09.04 AD at 14:08:29 CDT
